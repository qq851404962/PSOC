C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.0\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\cyfitter_cfg.lst)
                    - CD DB NOIP OT(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\cyfitter_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * FILENAME: cyfitter_cfg.c
   3          * PSoC Creator 2.0
   4          *
   5          * Description:
   6          * This file is automatically generated by PSoC Creator with device 
   7          * initialization code.
   8          *
   9          * THIS FILE SHOULD NOT BE MODIFIED.
  10          *
  11          ********************************************************************************
  12          * Copyright 2011, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          ********************************************************************************/
  17          
  18          #include <string.h>
  19          #include <cytypes.h>
  20          #include <cydevice_trm.h>
  21          #include <cyfitter.h>
  22          #include <CyLib.h>
  23          #include <CyDmac.h>
  24          #include <cyfitter_cfg.h>
  25          
  26          /* Clock startup error codes                                                   */
  27          #define CYCLOCKSTART_NO_ERROR    0
  28          #define CYCLOCKSTART_XTAL_ERROR  1
  29          #define CYCLOCKSTART_32KHZ_ERROR 2
  30          #define CYCLOCKSTART_PLL_ERROR   3
  31          
  32          /*******************************************************************************
  33          * Function Name: CyClockStartupError
  34          ********************************************************************************
  35          * Summary:
  36          *  If an error is encountered during clock configuration (crystal startup error,
  37          *  PLL lock error, etc) the system will end up here.  Unless reimplemented by 
  38          *  the customer, an infinite loop will be encountered.
  39          *
  40          * Parameters:  
  41          *   void
  42          *
  43          * Return:
  44          *   void
  45          *
  46          *******************************************************************************/
  47          #if defined(__GNUC__) || defined(__ARMCC_VERSION)
              __attribute__ ((unused))
              #endif
  50          static void CyClockStartupError(uint8 errorCode)
  51          {
  52   1          /* To remove the compiler warning if errorCode not used.                */
  53   1          errorCode = errorCode;
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 2   

  54   1      
  55   1          /* `#START CyClockStartupError` */
  56   1      
  57   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc)    */
  58   1          /* we will end up here to allow the customer to implement something to  */
  59   1          /* deal with the clock condition.                                       */
  60   1      
  61   1          /* `#END` */
  62   1      
  63   1          /* If nothing else, stop here since the clocks have not started         */
  64   1          /* correctly.                                                           */
  65   1          while(1) {}
  66   1      }
  67          
  68          
  69          #undef CYCODE
  70          #undef CYDATA
  71          #undef CYXDATA
  72          #undef CYFAR
  73          #if defined(__C51__) || defined(__CX51__)
  74                  #define CYCODE code
  75                  #define CYDATA data
  76                  #define CYXDATA xdata
  77                  #define CYFAR far
  78          
  79                  #define CYPACKED
  80                  #define CYALIGNED
  81              #define DMAINITSEC
  82                  #define CY_CFG_MEMORY_BARRIER()
  83          
  84                  #ifndef CYCONFIGCPY_DECLARED
                              extern void cymemzero(void CYFAR *addr, uint16 size);
                              extern void cyconfigcpy(uint16 size, const void CYFAR *src, void CYFAR *dest) small;
                              extern void cyconfigcpycode(uint16 size, const void CYCODE *src, void CYFAR *dest);
                      #endif
  89          
  90              #define CYMEMZERO8(a,c) cymemzero((a),(c))
  91              #define CYCONFIGCPY8(d,s,c) cyconfigcpy((c),(s),(d))
  92              #define CYCONFIGCPYCODE8(d,s,c) cyconfigcpycode((c),(s),(d))
  93          
  94                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  95                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  96                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  97          #else
                      #error Unsupported toolchain
              #endif
 100          
 101          /* Defines the layout and meaning of each entry in the cfg_memset_list used for clearing registers */
 102          typedef struct {
 103                  void CYFAR *address;
 104                  uint16 size;
 105          } CYPACKED cfg_memset_t;
 106          
 107          /* Defines the layout and meaning of each entry in the cfg_memcpy_list used for initializing registers */
 108          typedef struct {
 109                  void CYFAR *dest;
 110                  const void CYFAR *src;
 111                  uint16 size;
 112          } CYPACKED cfg_memcpy_t;
 113          
 114          /* TD structure for big-endian systems. Requires 2-byte endian swap */
 115          struct td_t {
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 3   

 116                  uint16 size;
 117                  uint8 flags;
 118                  uint8 next_td_ptr;
 119                  uint16 src;
 120                  uint16 dest;
 121          } CYPACKED;
 122          
 123          /* IDMUX_IRQ Address: CYREG_IDMUX_IRQ_CTL0 Size (bytes): 8 */
 124          #define BS_IDMUX_IRQ_VAL ((const uint8 CYFAR *)0x00080000)
 125          
 126          /* UDB_1_5_0_CONFIG Address: CYDEV_UCFG_B0_P0_U0_BASE Size (bytes): 128 */
 127          #define BS_UDB_1_5_0_CONFIG_VAL ((const uint8 CYFAR *)0x00080008)
 128          
 129          /* UDB_1_5_1_CONFIG Address: CYDEV_UCFG_B0_P0_U1_BASE Size (bytes): 128 */
 130          #define BS_UDB_1_5_1_CONFIG_VAL ((const uint8 CYFAR *)0x00080088)
 131          
 132          /* UDB_1_4_1_CONFIG Address: CYDEV_UCFG_B0_P1_U0_BASE Size (bytes): 128 */
 133          #define BS_UDB_1_4_1_CONFIG_VAL ((const uint8 CYFAR *)0x00080108)
 134          
 135          /* UDB_1_4_0_CONFIG Address: CYDEV_UCFG_B0_P1_U1_BASE Size (bytes): 128 */
 136          #define BS_UDB_1_4_0_CONFIG_VAL ((const uint8 CYFAR *)0x00080188)
 137          
 138          /* UDB_0_4_1_CONFIG Address: CYDEV_UCFG_B0_P6_U0_BASE Size (bytes): 128 */
 139          #define BS_UDB_0_4_1_CONFIG_VAL ((const uint8 CYFAR *)0x00080208)
 140          
 141          /* UDB_0_5_0_CONFIG Address: CYDEV_UCFG_B0_P7_U0_BASE Size (bytes): 128 */
 142          #define BS_UDB_0_5_0_CONFIG_VAL ((const uint8 CYFAR *)0x00080288)
 143          
 144          /* UDB_0_5_1_CONFIG Address: CYDEV_UCFG_B0_P7_U1_BASE Size (bytes): 128 */
 145          #define BS_UDB_0_5_1_CONFIG_VAL ((const uint8 CYFAR *)0x00080308)
 146          
 147          /* UWRK_B0_WRK_DP_BITS Address: CYDEV_UWRK_UWRK8_B0_BASE Size (bytes): 64 */
 148          #define BS_UWRK_B0_WRK_DP_BITS_VAL ((const uint8 CYFAR *)0x00080388)
 149          
 150          /* UWRK_B0_WRK_STATCTL_BITS Address: CYDEV_UWRK_UWRK8_B0_BASE + 0x00000070 Size (bytes): 32 */
 151          #define BS_UWRK_B0_WRK_STATCTL_BITS_VAL ((const uint8 CYFAR *)0x000803C8)
 152          
 153          /* DSI0_2_HV_ROUTING Address: CYDEV_UCFG_DSI7_BASE + 0x00000080 Size (bytes): 128 */
 154          #define BS_DSI0_2_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000803E8)
 155          
 156          /* DSISWITCH_0_3 Address: CYDEV_UCFG_DSI6_BASE Size (bytes): 128 */
 157          #define BS_DSISWITCH_0_3_VAL ((const uint8 CYFAR *)0x00080468)
 158          
 159          /* DSI0_3_HV_ROUTING Address: CYDEV_UCFG_DSI6_BASE + 0x00000080 Size (bytes): 128 */
 160          #define BS_DSI0_3_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000804E8)
 161          
 162          /* DSI0_4_HV_ROUTING Address: CYDEV_UCFG_DSI5_BASE + 0x00000080 Size (bytes): 128 */
 163          #define BS_DSI0_4_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080568)
 164          
 165          /* DSISWITCH_0_5 Address: CYDEV_UCFG_DSI4_BASE Size (bytes): 128 */
 166          #define BS_DSISWITCH_0_5_VAL ((const uint8 CYFAR *)0x000805E8)
 167          
 168          /* DSI0_5_HV_ROUTING Address: CYDEV_UCFG_DSI4_BASE + 0x00000080 Size (bytes): 128 */
 169          #define BS_DSI0_5_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080668)
 170          
 171          /* UDB_2_1_HV_ROUTING Address: CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 172          #define BS_UDB_2_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000806E8)
 173          
 174          /* UDB_1_2_HV_ROUTING Address: CYDEV_UCFG_B0_P4_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 175          #define BS_UDB_1_2_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080768)
 176          
 177          /* UDB_2_2_HV_ROUTING Address: CYDEV_UCFG_B0_P3_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 4   

 178          #define BS_UDB_2_2_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000807E8)
 179          
 180          /* UDB_1_3_HV_ROUTING Address: CYDEV_UCFG_B0_P5_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 181          #define BS_UDB_1_3_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080868)
 182          
 183          /* UDB_2_3_HV_ROUTING Address: CYDEV_UCFG_B0_P2_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 184          #define BS_UDB_2_3_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000808E8)
 185          
 186          /* UDBSWITCH_0_4 Address: CYDEV_UCFG_B0_P6_ROUTE_BASE Size (bytes): 128 */
 187          #define BS_UDBSWITCH_0_4_VAL ((const uint8 CYFAR *)0x00080968)
 188          
 189          /* UDB_1_4_HV_ROUTING Address: CYDEV_UCFG_B0_P6_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 190          #define BS_UDB_1_4_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000809E8)
 191          
 192          /* UDBSWITCH_1_4 Address: CYDEV_UCFG_B0_P1_ROUTE_BASE Size (bytes): 128 */
 193          #define BS_UDBSWITCH_1_4_VAL ((const uint8 CYFAR *)0x00080A68)
 194          
 195          /* UDB_2_4_HV_ROUTING Address: CYDEV_UCFG_B0_P1_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 196          #define BS_UDB_2_4_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080AE8)
 197          
 198          /* UDBSWITCH_0_5 Address: CYDEV_UCFG_B0_P7_ROUTE_BASE Size (bytes): 128 */
 199          #define BS_UDBSWITCH_0_5_VAL ((const uint8 CYFAR *)0x00080B68)
 200          
 201          /* UDB_1_5_HV_ROUTING Address: CYDEV_UCFG_B0_P7_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 202          #define BS_UDB_1_5_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080BE8)
 203          
 204          /* UDBSWITCH_1_5 Address: CYDEV_UCFG_B0_P0_ROUTE_BASE Size (bytes): 128 */
 205          #define BS_UDBSWITCH_1_5_VAL ((const uint8 CYFAR *)0x00080C68)
 206          
 207          /* UDB_2_5_HV_ROUTING Address: CYDEV_UCFG_B0_P0_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 208          #define BS_UDB_2_5_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080CE8)
 209          
 210          /* DSISWITCH_1_0 Address: CYDEV_UCFG_DSI9_BASE Size (bytes): 128 */
 211          #define BS_DSISWITCH_1_0_VAL ((const uint8 CYFAR *)0x00080D68)
 212          
 213          /* DSI3_0_HV_ROUTING Address: CYDEV_UCFG_DSI9_BASE + 0x00000080 Size (bytes): 128 */
 214          #define BS_DSI3_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080DE8)
 215          
 216          /* DSI3_1_HV_ROUTING Address: CYDEV_UCFG_DSI8_BASE + 0x00000080 Size (bytes): 128 */
 217          #define BS_DSI3_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080E68)
 218          
 219          /* DSI3_4_HV_ROUTING Address: CYDEV_UCFG_DSI1_BASE + 0x00000080 Size (bytes): 128 */
 220          #define BS_DSI3_4_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080EE8)
 221          
 222          /* DSISWITCH_1_5 Address: CYDEV_UCFG_DSI0_BASE Size (bytes): 128 */
 223          #define BS_DSISWITCH_1_5_VAL ((const uint8 CYFAR *)0x00080F68)
 224          
 225          /* DSI3_5_HV_ROUTING Address: CYDEV_UCFG_DSI0_BASE + 0x00000080 Size (bytes): 128 */
 226          #define BS_DSI3_5_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080FE8)
 227          
 228          /* UCFG_BCTL0 Address: CYREG_BCTL0_MDCLK_EN Size (bytes): 16 */
 229          #define BS_UCFG_BCTL0_VAL ((const uint8 CYFAR *)0x00081068)
 230          
 231          /* IOPINS0_0 Address: CYREG_PRT0_DM0 Size (bytes): 8 */
 232          #define BS_IOPINS0_0_VAL ((const uint8 CYFAR *)0x00081078)
 233          
 234          /* IOPINS0_1 Address: CYREG_PRT1_DM0 Size (bytes): 8 */
 235          #define BS_IOPINS0_1_VAL ((const uint8 CYFAR *)0x00081080)
 236          
 237          /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
 238          #define BS_IOPINS0_2_VAL ((const uint8 CYFAR *)0x00081088)
 239          
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 5   

 240          /* IOPORT_0 Address: CYDEV_PRTDSI_PRT0_BASE Size (bytes): 7 */
 241          #define BS_IOPORT_0_VAL ((const uint8 CYFAR *)0x00081090)
 242          
 243          /* IOPORT_1 Address: CYDEV_PRTDSI_PRT1_BASE Size (bytes): 7 */
 244          #define BS_IOPORT_1_VAL ((const uint8 CYFAR *)0x00081098)
 245          
 246          
 247          /* PHUB_CH1_CFGMEM_CFG0/1 initialization data */
 248          static const uint8 CYCODE CH1_ADDR_DATA0[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
             -;
 249          
 250          /* PHUB_CH2_CFGMEM_CFG0/1 initialization data */
 251          static const uint8 CYCODE CH2_ADDR_DATA0[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00 }
             -;
 252          
 253          /* PHUB_CH5_CFGMEM_CFG0/1 initialization data */
 254          static const uint8 CYCODE CH5_ADDR_DATA0[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00 }
             -;
 255          
 256          /* PHUB_CH6_CFGMEM_CFG0/1 initialization data */
 257          static const uint8 CYCODE CH6_ADDR_DATA0[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00 }
             -;
 258          
 259          /* Initialization data for each DMA channel's TD registers */
 260          static const uint8 CYCODE DMA_TD_START_CMD[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x01 };
 261          
 262          static uint32 CYXDATA DMA_ZERO_VAL CYALIGNED;
 263          
 264          /* This table holds all of the initialization data necessary for the DMA
 265             process to transfer data from the source location to the destination. */
 266          static const struct td_t CYCODE CFG_TD_LIST0[] DMAINITSEC = {
 267          /* Size, Flags, Next, Source, Destination */
 268                  { 8, 0x23, 0x02, (uint16)(&CH1_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM1_CFG0) },        /* TD 1 */
 269                  { 8, 0x23, 0x03, (uint16)(&CH2_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM2_CFG0) },        /* TD 2 */
 270                  { 8, 0x23, 0x04, (uint16)(&CH5_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM5_CFG0) },        /* TD 3 */
 271                  { 8, 0x23, 0x05, (uint16)(&CH6_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM6_CFG0) },        /* TD 4 */
 272                  { 5, 0x23, 0x06, (uint16)(&DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH1_BASIC_CFG) },     /* TD 5 */
 273                  { 5, 0x23, 0x07, (uint16)(&DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH2_BASIC_CFG) },     /* TD 6 */
 274                  { 5, 0x23, 0x08, (uint16)(&DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH5_BASIC_CFG) },     /* TD 7 */
 275                  { 5, 0x23, 0xFF, (uint16)(&DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH6_BASIC_CFG) },     /* TD 8 */
 276                  { 64, 0x22, 0x0A, (uint16)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT3_DR) },   /* TD 9 */
 277                  { 16, 0x22, 0x0B, (uint16)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT12_DR) },  /* TD 10 */
 278                  { 16, 0x22, 0xFF, (uint16)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT15_DR) },  /* TD 11 */
 279                  { 384, 0x22, 0x0D, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P2_U0_BASE) },       /* TD 12 */
 280                  { 384, 0x22, 0x0E, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P3_U0_BASE) },       /* TD 13 */
 281                  { 384, 0x22, 0x0F, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P4_U0_BASE) },       /* TD 14 */
 282                  { 384, 0x22, 0x10, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P5_U0_BASE) },       /* TD 15 */
 283                  { 128, 0x22, 0x11, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P6_U1_BASE) },       /* TD 16 */
 284                  { 896, 0x22, 0x12, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P2_U0_BASE) },       /* TD 17 */
 285                  { 1024, 0x22, 0x13, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P4_U0_BASE) },      /* TD 18 */
 286                  { 128, 0x22, 0x14, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI1_BASE) },   /* TD 19 */
 287                  { 512, 0x22, 0x15, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI2_BASE) },   /* TD 20 */
 288                  { 128, 0x22, 0x16, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI5_BASE) },   /* TD 21 */
 289                  { 128, 0x22, 0x17, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI7_BASE) },   /* TD 22 */
 290                  { 128, 0x22, 0x18, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI8_BASE) },   /* TD 23 */
 291                  { 512, 0x22, 0xFF, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE) },  /* TD 24 */
 292                  { 64, 0x23, 0x1A, (uint16)(BS_UWRK_B0_WRK_DP_BITS_VAL), (uint16)(CYDEV_UWRK_UWRK8_B0_BASE) },   /* TD 25 */
 293                  { 32, 0x23, 0xFF, (uint16)(BS_UWRK_B0_WRK_STATCTL_BITS_VAL), (uint16)(CYDEV_UWRK_UWRK8_B0_BASE + 0x000000
             -70) },        /* TD 26 */
 294                  { 8, 0x23, 0x1C, (uint16)(BS_IDMUX_IRQ_VAL), (uint16)(CYREG_IDMUX_IRQ_CTL0) },  /* TD 27 */
 295                  { 128, 0x23, 0x1D, (uint16)(BS_UDB_1_5_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P0_U0_BASE) },     /* TD 28 */
 296                  { 128, 0x23, 0x1E, (uint16)(BS_UDB_1_5_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P0_U1_BASE) },     /* TD 29 */
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 6   

 297                  { 128, 0x23, 0x1F, (uint16)(BS_UDB_1_4_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P1_U0_BASE) },     /* TD 30 */
 298                  { 128, 0x23, 0x20, (uint16)(BS_UDB_1_4_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P1_U1_BASE) },     /* TD 31 */
 299                  { 128, 0x23, 0x21, (uint16)(BS_UDB_0_4_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P6_U0_BASE) },     /* TD 32 */
 300                  { 128, 0x23, 0x22, (uint16)(BS_UDB_0_5_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P7_U0_BASE) },     /* TD 33 */
 301                  { 128, 0x23, 0x23, (uint16)(BS_UDB_0_5_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P7_U1_BASE) },     /* TD 34 */
 302                  { 128, 0x23, 0x24, (uint16)(BS_DSI0_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI7_BASE + 0x00000080) },   /* 
             -TD 35 */
 303                  { 128, 0x23, 0x25, (uint16)(BS_DSISWITCH_0_3_VAL), (uint16)(CYDEV_UCFG_DSI6_BASE) },    /* TD 36 */
 304                  { 128, 0x23, 0x26, (uint16)(BS_DSI0_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI6_BASE + 0x00000080) },   /* 
             -TD 37 */
 305                  { 128, 0x23, 0x27, (uint16)(BS_DSI0_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI5_BASE + 0x00000080) },   /* 
             -TD 38 */
 306                  { 128, 0x23, 0x28, (uint16)(BS_DSISWITCH_0_5_VAL), (uint16)(CYDEV_UCFG_DSI4_BASE) },    /* TD 39 */
 307                  { 128, 0x23, 0x29, (uint16)(BS_DSI0_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI4_BASE + 0x00000080) },   /* 
             -TD 40 */
 308                  { 128, 0x23, 0x2A, (uint16)(BS_UDB_2_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080
             -) },        /* TD 41 */
 309                  { 128, 0x23, 0x2B, (uint16)(BS_UDB_1_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P4_ROUTE_BASE + 0x00000080
             -) },        /* TD 42 */
 310                  { 128, 0x23, 0x2C, (uint16)(BS_UDB_2_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P3_ROUTE_BASE + 0x00000080
             -) },        /* TD 43 */
 311                  { 128, 0x23, 0x2D, (uint16)(BS_UDB_1_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P5_ROUTE_BASE + 0x00000080
             -) },        /* TD 44 */
 312                  { 128, 0x23, 0x2E, (uint16)(BS_UDB_2_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P2_ROUTE_BASE + 0x00000080
             -) },        /* TD 45 */
 313                  { 128, 0x23, 0x2F, (uint16)(BS_UDBSWITCH_0_4_VAL), (uint16)(CYDEV_UCFG_B0_P6_ROUTE_BASE) },     /* TD 46 */
 314                  { 128, 0x23, 0x30, (uint16)(BS_UDB_1_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P6_ROUTE_BASE + 0x00000080
             -) },        /* TD 47 */
 315                  { 128, 0x23, 0x31, (uint16)(BS_UDBSWITCH_1_4_VAL), (uint16)(CYDEV_UCFG_B0_P1_ROUTE_BASE) },     /* TD 48 */
 316                  { 128, 0x23, 0x32, (uint16)(BS_UDB_2_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P1_ROUTE_BASE + 0x00000080
             -) },        /* TD 49 */
 317                  { 128, 0x23, 0x33, (uint16)(BS_UDBSWITCH_0_5_VAL), (uint16)(CYDEV_UCFG_B0_P7_ROUTE_BASE) },     /* TD 50 */
 318                  { 128, 0x23, 0x34, (uint16)(BS_UDB_1_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P7_ROUTE_BASE + 0x00000080
             -) },        /* TD 51 */
 319                  { 128, 0x23, 0x35, (uint16)(BS_UDBSWITCH_1_5_VAL), (uint16)(CYDEV_UCFG_B0_P0_ROUTE_BASE) },     /* TD 52 */
 320                  { 128, 0x23, 0x36, (uint16)(BS_UDB_2_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P0_ROUTE_BASE + 0x00000080
             -) },        /* TD 53 */
 321                  { 128, 0x23, 0x37, (uint16)(BS_DSISWITCH_1_0_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE) },    /* TD 54 */
 322                  { 128, 0x23, 0x38, (uint16)(BS_DSI3_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE + 0x00000080) },   /* 
             -TD 55 */
 323                  { 128, 0x23, 0x39, (uint16)(BS_DSI3_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI8_BASE + 0x00000080) },   /* 
             -TD 56 */
 324                  { 128, 0x23, 0x3A, (uint16)(BS_DSI3_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI1_BASE + 0x00000080) },   /* 
             -TD 57 */
 325                  { 128, 0x23, 0x3B, (uint16)(BS_DSISWITCH_1_5_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE) },    /* TD 58 */
 326                  { 128, 0x23, 0x3C, (uint16)(BS_DSI3_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE + 0x00000080) },   /* 
             -TD 59 */
 327                  { 16, 0x23, 0xFF, (uint16)(BS_UCFG_BCTL0_VAL), (uint16)(CYREG_BCTL0_MDCLK_EN) },        /* TD 60 */
 328          };
 329          /*******************************************************************************
 330          * Function Name: cfg_dma_init
 331          ********************************************************************************
 332          * Summary:
 333          *  This function is used to copy device configuration data from constant values
 334          *  stored in memory into the proper chip configuration registers using DMA.  It
 335          *  pulls data out of the CFG_TD_LISTs to know exactly how/what to configure.
 336          *
 337          * Parameters:  
 338          *   void
 339          *
 340          * Return:
 341          *   void
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 7   

 342          *
 343          *******************************************************************************/
 344          static void cfg_dma_init(void)
 345          {
 346   1              DMA_ZERO_VAL = 0u;
 347   1              DMAC_CFGMEM[0].CFG0[0] = 0x10;          /* set burstcount */
 348   1              DMAC_CH[0].basic_cfg[0] = 0x01u;        /* enable channel0 */
 349   1              DMAC_CH[0].basic_status[1] = 0;         /* set channel0's first td to 0 */
 350   1              
 351   1              DMAC_TDMEM[0].TD0[2] = 0x01;            /* set td0's next td to 1 */
 352   1              DMAC_TDMEM[0].TD0[3] = 0xA3;            /* set td0's flags */
 353   1              CY_SET_REG16((reg16 *) &DMAC_TDMEM[0].TD0[0], 60*8);                                    /* set td0's size */
 354   1              CY_SET_REG16((reg16 *) &DMAC_TDMEM[0].TD1[0], (uint16)(uint32)CFG_TD_LIST0);    /* set td0's src addr */
 355   1              CY_SET_REG16((reg16 *) &DMAC_TDMEM[0].TD1[2], CYDEV_PHUB_TDMEM1_BASE);  /* set td0's dst addr */
 356   1              CY_SET_REG16((reg16 *) &DMAC_CFGMEM[0].CFG1[0], (uint16)(CYDEV_FLS_BASE >> 16));                                /* set ch0's src high
             - addr */
 357   1              CY_SET_REG16((reg16 *) &DMAC_CFGMEM[0].CFG1[2], (uint16)(CYDEV_PHUB_TDMEM1_BASE >> 16));                                /* set ch0's 
             -dst high addr */
 358   1              DMAC_CH[1].basic_status[1] = 0x09; /* First TD = 9 */
 359   1              DMAC_CH[2].basic_status[1] = 0x0C; /* First TD = 12 */
 360   1              DMAC_CH[5].basic_status[1] = 0x19; /* First TD = 25 */
 361   1              DMAC_CH[6].basic_status[1] = 0x1B; /* First TD = 27 */
 362   1      
 363   1              CY_CFG_MEMORY_BARRIER();
 364   1              DMAC_CH[0].action[0] = CPU_REQ;    /* initiate the DMA transfer */
 365   1              CY_CFG_MEMORY_BARRIER();
 366   1      
 367   1              /* Wait for all DMA transfers to complete */
 368   1              while((CY_GET_REG8(CYREG_PHUB_CH0_BASIC_STATUS) & 0x01u)){}
 369   1              while((CY_GET_REG8(CYREG_PHUB_CH1_BASIC_STATUS) & 0x01u)){}
 370   1              while((CY_GET_REG8(CYREG_PHUB_CH2_BASIC_STATUS) & 0x01u)){}
 371   1              while((CY_GET_REG8(CYREG_PHUB_CH5_BASIC_STATUS) & 0x01u)){}
 372   1              while((CY_GET_REG8(CYREG_PHUB_CH6_BASIC_STATUS) & 0x01u)){}
 373   1      
 374   1              /* DMA initialization is complete, disable all channels */
 375   1              CY_SET_REG8(CYREG_PHUB_CH0_BASIC_CFG, 0x00);
 376   1              CY_SET_REG8(CYREG_PHUB_CH1_BASIC_CFG, 0x00);
 377   1              CY_SET_REG8(CYREG_PHUB_CH2_BASIC_CFG, 0x00);
 378   1              CY_SET_REG8(CYREG_PHUB_CH5_BASIC_CFG, 0x00);
 379   1              CY_SET_REG8(CYREG_PHUB_CH6_BASIC_CFG, 0x00);
 380   1      
 381   1      }
 382          /*******************************************************************************
 383          * Function Name: ClockSetup
 384          ********************************************************************************
 385          *
 386          * Summary:
 387          *  Performs the initialization of all of the clocks in the device based on the
 388          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 389          *  clocks and setting the necessary dividers to produce the desired frequency. 
 390          *
 391          * Parameters:
 392          *  void
 393          *
 394          * Return:
 395          *  void
 396          *
 397          *******************************************************************************/
 398          static void ClockSetup(void)
 399          {
 400   1              reg32  timeout;
 401   1              reg32* timeout_p = &timeout;
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 8   

 402   1              reg8   pllLock;
 403   1      
 404   1      
 405   1              /* Configure Digital Clocks based on settings from Clock DWR */
 406   1              CY_SET_XTND_REG24((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x180001);
 407   1              CY_SET_XTND_REG24((void CYFAR *)(CYREG_CLKDIST_DCFG1_CFG0), 0x190000);
 408   1      
 409   1              /* Configure ILO based on settings from Clock DWR */
 410   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02);
 411   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08);
 412   1      
 413   1              /* Configure IMO based on settings from Clock DWR */
 414   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03);
 415   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8(CYREG_FLSHID_CUST_TABLES_IMO_3MHZ)));
 416   1      
 417   1              /* Configure PLL based on settings from Clock DWR */
 418   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0008);
 419   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1051);
 420   1              /* Wait up to 250us for the PLL to lock */
 421   1              pllLock = 0;
 422   1              for (timeout = 250 / 10; *timeout_p && (pllLock != 0x03u); timeout--) { 
 423   2                      pllLock = 0x03u & ((pllLock << 1) | ((CY_GET_REG8(CYREG_FASTCLK_PLL_SR) & 0x01u) >> 0));
 424   2                      CyDelayCycles(10 * 48); /* Delay 10us based on 48MHz clock */
 425   2              }
 426   1      
 427   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 428   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0103);
 429   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00);
 430   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07);
 431   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00);
 432   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48);
 433   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00);
 434   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02);
 435   1      
 436   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8(CYREG_PM_ACT_CFG2) | 0x03)));
 437   1      }
 438          
 439          
 440          /* Analog API Functions */
 441          
 442          /*******************************************************************************
 443          * Function Name: AnalogSetDefault
 444          ********************************************************************************
 445          *
 446          * Summary:
 447          *  Sets up the analog portions of the chip to default values based on chip
 448          *  configuration options from the project.
 449          *
 450          * Parameters:
 451          *  void
 452          *
 453          * Return:
 454          *  void
 455          *
 456          *******************************************************************************/
 457          void AnalogSetDefault(void)
 458          {
 459   1              CY_SET_REG8(CYREG_PRT2_AG, 0x80);
 460   1              CY_SET_REG8(CYREG_PRT12_AG, 0xAA);
 461   1              CY_SET_REG8(CYREG_CAPSL_CFG0, 0x00);
 462   1              CY_SET_REG8(CYREG_CMP0_SW3, 0x20);
 463   1              CY_SET_REG8(CYREG_DSM0_SW0, 0x09);
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 9   

 464   1              CY_SET_REG8(CYREG_PUMP_CR0, 0x44);
 465   1      }
 466          
 467          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 468          /* Table used to specify registers used to implement CapSense_AMuxCH0 */
 469          uint8 CYXDATA * const CYCODE CapSense_AMuxCH0__addrTable[] = {
 470                  (uint8 CYXDATA *)CYREG_PRT0_AMUX, 
 471                  (uint8 CYXDATA *)CYREG_PRT0_AMUX, 
 472                  (uint8 CYXDATA *)CYREG_PRT0_AMUX, 
 473                  (uint8 CYXDATA *)CYREG_PRT0_AMUX, 
 474                  (uint8 CYXDATA *)CYREG_PRT0_AMUX, 
 475                  (uint8 CYXDATA *)CYREG_PRT0_AMUX, 
 476                  (uint8 CYXDATA *)CYREG_PRT0_AMUX, 
 477                  (uint8 CYXDATA *)CYREG_PRT2_AMUX, 
 478                  (uint8 CYXDATA *)CYREG_CMP0_SW3, 
 479                  (uint8 CYXDATA *)CYREG_DAC0_SW3, 
 480          };
 481          
 482          /* Table used to define bit masks used to enable inputs for CapSense_AMuxCH0 */
 483          const uint8 CYCODE CapSense_AMuxCH0__maskTable[] = {
 484                  0x20, 
 485                  0x40, 
 486                  0x01, 
 487                  0x02, 
 488                  0x04, 
 489                  0x08, 
 490                  0x10, 
 491                  0x80, 
 492                  0x01, 
 493                  0x10, 
 494          };
 495          
 496          /*******************************************************************************
 497          * Function Name: CapSense_AMuxCH0_Set
 498          ********************************************************************************
 499          * Summary:
 500          *  This function is used to set a particular channel as active on the AMux.
 501          *
 502          * Parameters:  
 503          *   channel - The mux channel input to set as active
 504          *
 505          * Return:
 506          *   void
 507          *
 508          *******************************************************************************/
 509          void CapSense_AMuxCH0_Set(uint8 channel)
 510          {
 511   1              if (channel >= 10)
 512   1                      return;
 513   1              *CapSense_AMuxCH0__addrTable[channel] |= CapSense_AMuxCH0__maskTable[channel];
 514   1      }
 515          
 516          /*******************************************************************************
 517          * Function Name: CapSense_AMuxCH0_Unset
 518          ********************************************************************************
 519          * Summary:
 520          *  This function is used to clear a particular channel from being active on the
 521          *  AMux.
 522          *
 523          * Parameters:  
 524          *   channel - The mux channel input to mark inactive
 525          *
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 10  

 526          * Return:
 527          *   void
 528          *
 529          *******************************************************************************/
 530          void CapSense_AMuxCH0_Unset(uint8 channel)
 531          {
 532   1              if (channel >= 10)
 533   1                      return;
 534   1              *CapSense_AMuxCH0__addrTable[channel] &= ~CapSense_AMuxCH0__maskTable[channel];
 535   1      }
 536          
 537          
 538          
 539          /*******************************************************************************
 540          * Function Name: cyfitter_cfg
 541          ********************************************************************************
 542          * Summary:
 543          *  This function is called by the start-up code for the selected device. It
 544          *  performs all of the necessary device configuration based on the design
 545          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 546          *  as Clocks and Pins as well as any component configuration that is necessary.
 547          *
 548          * Parameters:  
 549          *   void
 550          *
 551          * Return:
 552          *   void
 553          *
 554          *******************************************************************************/
 555          void cyfitter_cfg(void)
 556          {
 557   1              /* Setup Flash Cycles based on 48MHz clock startup frequency. */
 558   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), ((CYDEV_INSTRUCT_CACHE_ENABLED) ? 0x90 : 0x80));
 559   1      
 560   1              /* Disable DMA channels so they can be configured for chip initialization */
 561   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH0_BASIC_CFG), 0x00);
 562   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH1_BASIC_CFG), 0x00);
 563   1      
 564   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 565   1              CY_SET_XTND_REG8(CYREG_MLOGIC_DBG_EN_DBG_EN, (CY_GET_XTND_REG8(CYREG_MLOGIC_DBG_EN_DBG_EN) | 0x01));
 566   1      
 567   1              {
 568   2                      cfg_dma_init();
 569   2      
 570   2                      /* Perform normal device configuration. Order is not critical for these items. */
 571   2                      CYCONFIGCPY8((void CYFAR *)(CYDEV_PRTDSI_PRT0_BASE), (void CYFAR *)(BS_IOPORT_0_VAL), 7);
 572   2                      CYCONFIGCPY8((void CYFAR *)(CYDEV_PRTDSI_PRT1_BASE), (void CYFAR *)(BS_IOPORT_1_VAL), 7);
 573   2                      CYMEMZERO8((void CYFAR *)(CYDEV_PRTDSI_PRT2_BASE), 7);
 574   2                      CYMEMZERO8((void CYFAR *)(CYDEV_PRTDSI_PRT3_BASE), 7);
 575   2                      CYMEMZERO8((void CYFAR *)(CYDEV_PRTDSI_PRT4_BASE), 7);
 576   2                      CYMEMZERO8((void CYFAR *)(CYDEV_PRTDSI_PRT5_BASE), 7);
 577   2                      CYMEMZERO8((void CYFAR *)(CYDEV_PRTDSI_PRT6_BASE), 7);
 578   2                      CYMEMZERO8((void CYFAR *)(CYDEV_PRTDSI_PRT12_BASE), 6);
 579   2                      CYMEMZERO8((void CYFAR *)(CYDEV_PRTDSI_PRT15_BASE), 7);
 580   2                      CY_SET_XTND_REG16((void CYFAR *)(CYREG_CAPSL_CFG0), 0x0300);
 581   2                      CY_SET_XTND_REG16((void CYFAR *)(CYREG_LUT0_CR), 0x0003);
 582   2      
 583   2                      /* Enable digital routing */
 584   2                      CY_SET_XTND_REG8(CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8(CYREG_BCTL0_BANK_CTL) | 0x02u);
 585   2                      CY_SET_XTND_REG8(CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8(CYREG_BCTL1_BANK_CTL) | 0x02u);
 586   2      
 587   2                      /* Enable UDB array */
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 11  

 588   2                      CY_SET_REG8(CYREG_PM_ACT_CFG0, CY_GET_REG8(CYREG_PM_ACT_CFG0) | 0x40u);
 589   2                      CY_SET_REG8(CYREG_PM_AVAIL_CR2, CY_GET_REG8(CYREG_PM_AVAIL_CR2) | 0x10u);
 590   2              }
 591   1      
 592   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 593   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT0_DM0), (void CYFAR *)(BS_IOPINS0_0_VAL), 8);
 594   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT1_DM0), (void CYFAR *)(BS_IOPINS0_1_VAL), 8);
 595   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT2_DM0), (void CYFAR *)(BS_IOPINS0_2_VAL), 8);
 596   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CLOCK_EN), 0x01);
 597   1      
 598   1      
 599   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 600   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), ((CYDEV_INSTRUCT_CACHE_ENABLED) ? 0x10 : 0x00));
 601   1              /* Setup clocks based on selections from Clock DWR */
 602   1              ClockSetup();
 603   1              /* Set Flash Cycles based on newly configured 24.00MHz Bus Clock. */
 604   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), ((CYDEV_INSTRUCT_CACHE_ENABLED) ? 0x50 : 0x40));
 605   1      
 606   1              /* Perform basic analog initialization to defaults */
 607   1              AnalogSetDefault();
 608   1      
 609   1              /* Configure alternate active mode */
 610   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (void CYFAR *)CYDEV_PM_ACT_BASE, 12);
 611   1              CY_SET_REG8(CYREG_PM_STBY_CFG0, CY_GET_REG8(CYREG_PM_STBY_CFG0) & ~0x02u);      /* Disable CPU */
 612   1      }
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 12  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 50
0000 900000      R     MOV     DPTR,#errorCode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 53
0005 900000      R     MOV     DPTR,#errorCode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#errorCode
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
000F         ?C0001:
                                           ; SOURCE LINE # 65
000F 80FE              SJMP    ?C0001
0011 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION cfg_dma_init (BEGIN)
                                           ; SOURCE LINE # 344
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 346
0000 7F00              MOV     R7,#00H
0002 7E00              MOV     R6,#00H
0004 7D00              MOV     R5,#00H
0006 7C00              MOV     R4,#00H
0008 900000      R     MOV     DPTR,#DMA_ZERO_VAL
000B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 347
000E 907600            MOV     DPTR,#07600H
0011 7410              MOV     A,#010H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 348
0014 907010            MOV     DPTR,#07010H
0017 7401              MOV     A,#01H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 349
001A 907019            MOV     DPTR,#07019H
001D E4                CLR     A
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 351
001F 907802            MOV     DPTR,#07802H
0022 7401              MOV     A,#01H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 352
0025 907803            MOV     DPTR,#07803H
0028 74A3              MOV     A,#0A3H
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 353
002B 7B02              MOV     R3,#02H
002D 7A78              MOV     R2,#078H
002F 7900              MOV     R1,#00H
0031 7DE0              MOV     R5,#0E0H
0033 7C01              MOV     R4,#01H
0035 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 354
0038 7B02              MOV     R3,#02H
003A 7A78              MOV     R2,#078H
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 13  

003C 7904              MOV     R1,#04H
003E C003              PUSH    AR3
0040 C002              PUSH    AR2
0042 C001              PUSH    AR1
0044 7BFF              MOV     R3,#0FFH
0046 7A00        R     MOV     R2,#HIGH CFG_TD_LIST0
0048 7900        R     MOV     R1,#LOW CFG_TD_LIST0
004A AC02              MOV     R4,AR2
004C AD01              MOV     R5,AR1
004E D001              POP     AR1
0050 D002              POP     AR2
0052 D003              POP     AR3
0054 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 355
0057 7B02              MOV     R3,#02H
0059 7A78              MOV     R2,#078H
005B 7906              MOV     R1,#06H
005D 7D08              MOV     R5,#08H
005F 7C78              MOV     R4,#078H
0061 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 356
0064 7B02              MOV     R3,#02H
0066 7A76              MOV     R2,#076H
0068 7904              MOV     R1,#04H
006A 7D10              MOV     R5,#010H
006C 7C00              MOV     R4,#00H
006E 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 357
0071 7B02              MOV     R3,#02H
0073 7A76              MOV     R2,#076H
0075 7906              MOV     R1,#06H
0077 7D00              MOV     R5,#00H
0079 7C00              MOV     R4,#00H
007B 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 358
007E 907029            MOV     DPTR,#07029H
0081 7409              MOV     A,#09H
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 359
0084 907039            MOV     DPTR,#07039H
0087 740C              MOV     A,#0CH
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 360
008A 907069            MOV     DPTR,#07069H
008D 7419              MOV     A,#019H
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 361
0090 907079            MOV     DPTR,#07079H
0093 741B              MOV     A,#01BH
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 364
0096 907014            MOV     DPTR,#07014H
0099 7401              MOV     A,#01H
009B F0                MOVX    @DPTR,A
009C         ?C0004:
                                           ; SOURCE LINE # 368
009C 907018            MOV     DPTR,#07018H
009F E0                MOVX    A,@DPTR
00A0 FF                MOV     R7,A
00A1 EF                MOV     A,R7
00A2 20E0F7            JB      ACC.0,?C0004
00A5         ?C0005:
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 14  

00A5         ?C0006:
                                           ; SOURCE LINE # 369
00A5 907028            MOV     DPTR,#07028H
00A8 E0                MOVX    A,@DPTR
00A9 FF                MOV     R7,A
00AA EF                MOV     A,R7
00AB 20E0F7            JB      ACC.0,?C0006
00AE         ?C0007:
00AE         ?C0008:
                                           ; SOURCE LINE # 370
00AE 907038            MOV     DPTR,#07038H
00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 EF                MOV     A,R7
00B4 20E0F7            JB      ACC.0,?C0008
00B7         ?C0009:
00B7         ?C0010:
                                           ; SOURCE LINE # 371
00B7 907068            MOV     DPTR,#07068H
00BA E0                MOVX    A,@DPTR
00BB FF                MOV     R7,A
00BC EF                MOV     A,R7
00BD 20E0F7            JB      ACC.0,?C0010
00C0         ?C0011:
00C0         ?C0012:
                                           ; SOURCE LINE # 372
00C0 907078            MOV     DPTR,#07078H
00C3 E0                MOVX    A,@DPTR
00C4 FF                MOV     R7,A
00C5 EF                MOV     A,R7
00C6 20E0F7            JB      ACC.0,?C0012
00C9         ?C0013:
                                           ; SOURCE LINE # 375
00C9 907010            MOV     DPTR,#07010H
00CC E4                CLR     A
00CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 376
00CE 907020            MOV     DPTR,#07020H
00D1 E4                CLR     A
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 377
00D3 907030            MOV     DPTR,#07030H
00D6 E4                CLR     A
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 378
00D8 907060            MOV     DPTR,#07060H
00DB E4                CLR     A
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 379
00DD 907070            MOV     DPTR,#07070H
00E0 E4                CLR     A
00E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 381
00E2 22                RET     
             ; FUNCTION cfg_dma_init (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 399
                                           ; SOURCE LINE # 401
0000 7E00        R     MOV     R6,#HIGH timeout
0002 7F00        R     MOV     R7,#LOW timeout
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 15  

0004 900000      R     MOV     DPTR,#timeout_p
0007 EE                MOV     A,R6
0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A EF                MOV     A,R7
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 406
000C 7B00              MOV     R3,#00H
000E 7A40              MOV     R2,#040H
0010 7980              MOV     R1,#080H
0012 7F01              MOV     R7,#01H
0014 7E00              MOV     R6,#00H
0016 7D18              MOV     R5,#018H
0018 7C00              MOV     R4,#00H
001A 120000      E     LCALL   _cywrite24
                                           ; SOURCE LINE # 407
001D 7B00              MOV     R3,#00H
001F 7A40              MOV     R2,#040H
0021 7984              MOV     R1,#084H
0023 7F00              MOV     R7,#00H
0025 7E00              MOV     R6,#00H
0027 7D19              MOV     R5,#019H
0029 7C00              MOV     R4,#00H
002B 120000      E     LCALL   _cywrite24
                                           ; SOURCE LINE # 410
002E 904300            MOV     DPTR,#04300H
0031 7402              MOV     A,#02H
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 411
0034 904000            MOV     DPTR,#04000H
0037 7408              MOV     A,#08H
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 414
003A 904200            MOV     DPTR,#04200H
003D 7403              MOV     A,#03H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 415
0040 7B0C              MOV     R3,#0CH
0042 7A01              MOV     R2,#01H
0044 7908              MOV     R1,#08H
0046 120000      E     LCALL   _cyread8
0049 9046A1            MOV     DPTR,#046A1H
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 418
004E 7B00              MOV     R3,#00H
0050 7A42              MOV     R2,#042H
0052 7922              MOV     R1,#022H
0054 7D08              MOV     R5,#08H
0056 7C00              MOV     R4,#00H
0058 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 419
005B 7B00              MOV     R3,#00H
005D 7A42              MOV     R2,#042H
005F 7920              MOV     R1,#020H
0061 7D51              MOV     R5,#051H
0063 7C10              MOV     R4,#010H
0065 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 421
0068 900000      R     MOV     DPTR,#pllLock
006B E4                CLR     A
006C F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 16  

                                           ; SOURCE LINE # 422
006D 7F19              MOV     R7,#019H
006F 7E00              MOV     R6,#00H
0071 7D00              MOV     R5,#00H
0073 7C00              MOV     R4,#00H
0075 900000      R     MOV     DPTR,#timeout
0078 120000      E     LCALL   ?C?LSTXDATA
007B         ?C0015:
007B 900000      R     MOV     DPTR,#timeout_p
007E E0                MOVX    A,@DPTR
007F FE                MOV     R6,A
0080 A3                INC     DPTR
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
0083 8F82              MOV     DPL,R7
0085 8E83              MOV     DPH,R6
0087 120000      E     LCALL   ?C?LLDXDATA
008A EC                MOV     A,R4
008B 4D                ORL     A,R5
008C 4E                ORL     A,R6
008D 4F                ORL     A,R7
008E 604E              JZ      ?C0016
0090 900000      R     MOV     DPTR,#pllLock
0093 E0                MOVX    A,@DPTR
0094 FF                MOV     R7,A
0095 EF                MOV     A,R7
0096 6403              XRL     A,#03H
0098 6044              JZ      ?C0016
                                           ; SOURCE LINE # 423
009A 904225            MOV     DPTR,#04225H
009D E0                MOVX    A,@DPTR
009E FF                MOV     R7,A
009F EF                MOV     A,R7
00A0 5401              ANL     A,#01H
00A2 FF                MOV     R7,A
00A3 7E00              MOV     R6,#00H
00A5 900000      R     MOV     DPTR,#pllLock
00A8 E0                MOVX    A,@DPTR
00A9 FE                MOV     R6,A
00AA EE                MOV     A,R6
00AB 25E0              ADD     A,ACC
00AD FE                MOV     R6,A
00AE EE                MOV     A,R6
00AF 4F                ORL     A,R7
00B0 FF                MOV     R7,A
00B1 EF                MOV     A,R7
00B2 5403              ANL     A,#03H
00B4 FF                MOV     R7,A
00B5 900000      R     MOV     DPTR,#pllLock
00B8 EF                MOV     A,R7
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 424
00BA 7FE0              MOV     R7,#0E0H
00BC 7E01              MOV     R6,#01H
00BE 7D00              MOV     R5,#00H
00C0 7C00              MOV     R4,#00H
00C2 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 425
00C5 900000      R     MOV     DPTR,#timeout
00C8 120000      E     LCALL   ?C?LLDXDATA
00CB 7BFF              MOV     R3,#0FFH
00CD 7AFF              MOV     R2,#0FFH
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 17  

00CF 79FF              MOV     R1,#0FFH
00D1 78FF              MOV     R0,#0FFH
00D3 120000      E     LCALL   ?C?LADD
00D6 900000      R     MOV     DPTR,#timeout
00D9 120000      E     LCALL   ?C?LSTXDATA
00DC 809D              SJMP    ?C0015
00DE         ?C0016:
                                           ; SOURCE LINE # 428
00DE 7B00              MOV     R3,#00H
00E0 7A40              MOV     R2,#040H
00E2 7904              MOV     R1,#04H
00E4 7D03              MOV     R5,#03H
00E6 7C01              MOV     R4,#01H
00E8 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 429
00EB 904004            MOV     DPTR,#04004H
00EE E4                CLR     A
00EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 430
00F0 904004            MOV     DPTR,#04004H
00F3 7407              MOV     A,#07H
00F5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 431
00F6 904006            MOV     DPTR,#04006H
00F9 E4                CLR     A
00FA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 432
00FB 904008            MOV     DPTR,#04008H
00FE 7448              MOV     A,#048H
0100 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 433
0101 904004            MOV     DPTR,#04004H
0104 E4                CLR     A
0105 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 434
0106 904001            MOV     DPTR,#04001H
0109 7402              MOV     A,#02H
010B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 436
010C 9043A2            MOV     DPTR,#043A2H
010F E0                MOVX    A,@DPTR
0110 FF                MOV     R7,A
0111 EF                MOV     A,R7
0112 4403              ORL     A,#03H
0114 FF                MOV     R7,A
0115 EF                MOV     A,R7
0116 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 437
0117 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 458
                                           ; SOURCE LINE # 459
0000 90512D            MOV     DPTR,#0512DH
0003 7480              MOV     A,#080H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 460
0006 9051CD            MOV     DPTR,#051CDH
0009 74AA              MOV     A,#0AAH
000B F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 18  

                                           ; SOURCE LINE # 461
000C 905870            MOV     DPTR,#05870H
000F E4                CLR     A
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 462
0011 905AC3            MOV     DPTR,#05AC3H
0014 7420              MOV     A,#020H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 463
0017 905B00            MOV     DPTR,#05B00H
001A 7409              MOV     A,#09H
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 464
001D 905876            MOV     DPTR,#05876H
0020 7444              MOV     A,#044H
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 465
0023 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _CapSense_AMuxCH0_Set (BEGIN)
                                           ; SOURCE LINE # 509
0000 900000      R     MOV     DPTR,#channel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
0005 900000      R     MOV     DPTR,#channel
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 940A              SUBB    A,#0AH
000E 5036              JNC     ?C0021
0010         ?C0020:
                                           ; SOURCE LINE # 513
0010 900000      R     MOV     DPTR,#channel
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 25E0              ADD     A,ACC
0018 2400        R     ADD     A,#LOW CapSense_AMuxCH0__addrTable
001A F582              MOV     DPL,A
001C E4                CLR     A
001D 3400        R     ADDC    A,#HIGH CapSense_AMuxCH0__addrTable
001F F583              MOV     DPH,A
0021 E4                CLR     A
0022 93                MOVC    A,@A+DPTR
0023 FE                MOV     R6,A
0024 7401              MOV     A,#01H
0026 93                MOVC    A,@A+DPTR
0027 FF                MOV     R7,A
0028 8F82              MOV     DPL,R7
002A 8E83              MOV     DPH,R6
002C C083              PUSH    DPH
002E C082              PUSH    DPL
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#channel
0035 E0                MOVX    A,@DPTR
0036 FE                MOV     R6,A
0037 EE                MOV     A,R6
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 19  

0038 900000      R     MOV     DPTR,#CapSense_AMuxCH0__maskTable
003B 93                MOVC    A,@A+DPTR
003C FE                MOV     R6,A
003D EF                MOV     A,R7
003E 4E                ORL     A,R6
003F FF                MOV     R7,A
0040 D082              POP     DPL
0042 D083              POP     DPH
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 514
0046         ?C0021:
0046 22                RET     
             ; FUNCTION _CapSense_AMuxCH0_Set (END)

             ; FUNCTION _CapSense_AMuxCH0_Unset (BEGIN)
                                           ; SOURCE LINE # 530
0000 900000      R     MOV     DPTR,#channel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 531
                                           ; SOURCE LINE # 532
0005 900000      R     MOV     DPTR,#channel
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 940A              SUBB    A,#0AH
000E 5039              JNC     ?C0023
0010         ?C0022:
                                           ; SOURCE LINE # 534
0010 900000      R     MOV     DPTR,#channel
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 25E0              ADD     A,ACC
0018 2400        R     ADD     A,#LOW CapSense_AMuxCH0__addrTable
001A F582              MOV     DPL,A
001C E4                CLR     A
001D 3400        R     ADDC    A,#HIGH CapSense_AMuxCH0__addrTable
001F F583              MOV     DPH,A
0021 E4                CLR     A
0022 93                MOVC    A,@A+DPTR
0023 FE                MOV     R6,A
0024 7401              MOV     A,#01H
0026 93                MOVC    A,@A+DPTR
0027 FF                MOV     R7,A
0028 8F82              MOV     DPL,R7
002A 8E83              MOV     DPH,R6
002C C083              PUSH    DPH
002E C082              PUSH    DPL
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#channel
0035 E0                MOVX    A,@DPTR
0036 FE                MOV     R6,A
0037 EE                MOV     A,R6
0038 900000      R     MOV     DPTR,#CapSense_AMuxCH0__maskTable
003B 93                MOVC    A,@A+DPTR
003C FE                MOV     R6,A
003D EE                MOV     A,R6
003E F4                CPL     A
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 20  

003F FE                MOV     R6,A
0040 EF                MOV     A,R7
0041 5E                ANL     A,R6
0042 FF                MOV     R7,A
0043 D082              POP     DPL
0045 D083              POP     DPH
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 535
0049         ?C0023:
0049 22                RET     
             ; FUNCTION _CapSense_AMuxCH0_Unset (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 555
                                           ; SOURCE LINE # 556
                                           ; SOURCE LINE # 558
0000 904800            MOV     DPTR,#04800H
0003 7480              MOV     A,#080H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 561
0006 907010            MOV     DPTR,#07010H
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 562
000B 907020            MOV     DPTR,#07020H
000E E4                CLR     A
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 565
0010 7B00              MOV     R3,#00H
0012 7A46              MOV     R2,#046H
0014 79E8              MOV     R1,#0E8H
0016 120000      E     LCALL   _cyread8
0019 EF                MOV     A,R7
001A 4401              ORL     A,#01H
001C FD                MOV     R5,A
001D 7B00              MOV     R3,#00H
001F 7A46              MOV     R2,#046H
0021 79E8              MOV     R1,#0E8H
0023 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 567
                                           ; SOURCE LINE # 568
0026 120000      R     LCALL   cfg_dma_init
                                           ; SOURCE LINE # 571
0029 7B08              MOV     R3,#08H
002B 7A10              MOV     R2,#010H
002D 7990              MOV     R1,#090H
002F C003              PUSH    AR3
0031 C002              PUSH    AR2
0033 C001              PUSH    AR1
0035 7B00              MOV     R3,#00H
0037 7A52              MOV     R2,#052H
0039 7900              MOV     R1,#00H
003B 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
003E 120000      E     LCALL   ?C?PSTXDATA
0041 D001              POP     AR1
0043 D002              POP     AR2
0045 D003              POP     AR3
0047 7F07              MOV     R7,#07H
0049 7E00              MOV     R6,#00H
004B 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 572
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 21  

004E 7B08              MOV     R3,#08H
0050 7A10              MOV     R2,#010H
0052 7998              MOV     R1,#098H
0054 C003              PUSH    AR3
0056 C002              PUSH    AR2
0058 C001              PUSH    AR1
005A 7B00              MOV     R3,#00H
005C 7A52              MOV     R2,#052H
005E 7908              MOV     R1,#08H
0060 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0063 120000      E     LCALL   ?C?PSTXDATA
0066 D001              POP     AR1
0068 D002              POP     AR2
006A D003              POP     AR3
006C 7F07              MOV     R7,#07H
006E 7E00              MOV     R6,#00H
0070 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 573
0073 7B00              MOV     R3,#00H
0075 7A52              MOV     R2,#052H
0077 7910              MOV     R1,#010H
0079 7D07              MOV     R5,#07H
007B 7C00              MOV     R4,#00H
007D 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 574
0080 7B00              MOV     R3,#00H
0082 7A52              MOV     R2,#052H
0084 7918              MOV     R1,#018H
0086 7D07              MOV     R5,#07H
0088 7C00              MOV     R4,#00H
008A 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 575
008D 7B00              MOV     R3,#00H
008F 7A52              MOV     R2,#052H
0091 7920              MOV     R1,#020H
0093 7D07              MOV     R5,#07H
0095 7C00              MOV     R4,#00H
0097 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 576
009A 7B00              MOV     R3,#00H
009C 7A52              MOV     R2,#052H
009E 7928              MOV     R1,#028H
00A0 7D07              MOV     R5,#07H
00A2 7C00              MOV     R4,#00H
00A4 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 577
00A7 7B00              MOV     R3,#00H
00A9 7A52              MOV     R2,#052H
00AB 7930              MOV     R1,#030H
00AD 7D07              MOV     R5,#07H
00AF 7C00              MOV     R4,#00H
00B1 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 578
00B4 7B00              MOV     R3,#00H
00B6 7A52              MOV     R2,#052H
00B8 7960              MOV     R1,#060H
00BA 7D06              MOV     R5,#06H
00BC 7C00              MOV     R4,#00H
00BE 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 579
00C1 7B00              MOV     R3,#00H
00C3 7A52              MOV     R2,#052H
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 22  

00C5 7978              MOV     R1,#078H
00C7 7D07              MOV     R5,#07H
00C9 7C00              MOV     R4,#00H
00CB 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 580
00CE 7B00              MOV     R3,#00H
00D0 7A58              MOV     R2,#058H
00D2 7970              MOV     R1,#070H
00D4 7D00              MOV     R5,#00H
00D6 7C03              MOV     R4,#03H
00D8 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 581
00DB 7B00              MOV     R3,#00H
00DD 7A58              MOV     R2,#058H
00DF 7948              MOV     R1,#048H
00E1 7D03              MOV     R5,#03H
00E3 7C00              MOV     R4,#00H
00E5 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 584
00E8 7B01              MOV     R3,#01H
00EA 7A50              MOV     R2,#050H
00EC 7903              MOV     R1,#03H
00EE 120000      E     LCALL   _cyread8
00F1 EF                MOV     A,R7
00F2 4402              ORL     A,#02H
00F4 FD                MOV     R5,A
00F5 7B01              MOV     R3,#01H
00F7 7A50              MOV     R2,#050H
00F9 7903              MOV     R1,#03H
00FB 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 585
00FE 7B01              MOV     R3,#01H
0100 7A50              MOV     R2,#050H
0102 7913              MOV     R1,#013H
0104 120000      E     LCALL   _cyread8
0107 EF                MOV     A,R7
0108 4402              ORL     A,#02H
010A FD                MOV     R5,A
010B 7B01              MOV     R3,#01H
010D 7A50              MOV     R2,#050H
010F 7913              MOV     R1,#013H
0111 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 588
0114 9043A0            MOV     DPTR,#043A0H
0117 E0                MOVX    A,@DPTR
0118 FF                MOV     R7,A
0119 EF                MOV     A,R7
011A 4440              ORL     A,#040H
011C FF                MOV     R7,A
011D 9043A0            MOV     DPTR,#043A0H
0120 EF                MOV     A,R7
0121 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 589
0122 9043C2            MOV     DPTR,#043C2H
0125 E0                MOVX    A,@DPTR
0126 FF                MOV     R7,A
0127 EF                MOV     A,R7
0128 4410              ORL     A,#010H
012A FF                MOV     R7,A
012B 9043C2            MOV     DPTR,#043C2H
012E EF                MOV     A,R7
012F F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 23  

                                           ; SOURCE LINE # 590
                                           ; SOURCE LINE # 593
0130 7B08              MOV     R3,#08H
0132 7A10              MOV     R2,#010H
0134 7978              MOV     R1,#078H
0136 C003              PUSH    AR3
0138 C002              PUSH    AR2
013A C001              PUSH    AR1
013C 7B00              MOV     R3,#00H
013E 7A51              MOV     R2,#051H
0140 7902              MOV     R1,#02H
0142 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0145 120000      E     LCALL   ?C?PSTXDATA
0148 D001              POP     AR1
014A D002              POP     AR2
014C D003              POP     AR3
014E 7F08              MOV     R7,#08H
0150 7E00              MOV     R6,#00H
0152 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 594
0155 7B08              MOV     R3,#08H
0157 7A10              MOV     R2,#010H
0159 7980              MOV     R1,#080H
015B C003              PUSH    AR3
015D C002              PUSH    AR2
015F C001              PUSH    AR1
0161 7B00              MOV     R3,#00H
0163 7A51              MOV     R2,#051H
0165 7912              MOV     R1,#012H
0167 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
016A 120000      E     LCALL   ?C?PSTXDATA
016D D001              POP     AR1
016F D002              POP     AR2
0171 D003              POP     AR3
0173 7F08              MOV     R7,#08H
0175 7E00              MOV     R6,#00H
0177 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 595
017A 7B08              MOV     R3,#08H
017C 7A10              MOV     R2,#010H
017E 7988              MOV     R1,#088H
0180 C003              PUSH    AR3
0182 C002              PUSH    AR2
0184 C001              PUSH    AR1
0186 7B00              MOV     R3,#00H
0188 7A51              MOV     R2,#051H
018A 7922              MOV     R1,#022H
018C 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
018F 120000      E     LCALL   ?C?PSTXDATA
0192 D001              POP     AR1
0194 D002              POP     AR2
0196 D003              POP     AR3
0198 7F08              MOV     R7,#08H
019A 7E00              MOV     R6,#00H
019C 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 596
019F 9044F4            MOV     DPTR,#044F4H
01A2 7401              MOV     A,#01H
01A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 600
01A5 904800            MOV     DPTR,#04800H
01A8 E4                CLR     A
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/27/2015 14:50:42 PAGE 24  

01A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 602
01AA 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 604
01AD 904800            MOV     DPTR,#04800H
01B0 7440              MOV     A,#040H
01B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 607
01B3 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 610
01B6 7B00              MOV     R3,#00H
01B8 7A43              MOV     R2,#043H
01BA 79A0              MOV     R1,#0A0H
01BC C003              PUSH    AR3
01BE C002              PUSH    AR2
01C0 C001              PUSH    AR1
01C2 7B00              MOV     R3,#00H
01C4 7A43              MOV     R2,#043H
01C6 79B0              MOV     R1,#0B0H
01C8 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
01CB 120000      E     LCALL   ?C?PSTXDATA
01CE D001              POP     AR1
01D0 D002              POP     AR2
01D2 D003              POP     AR3
01D4 7F0C              MOV     R7,#0CH
01D6 7E00              MOV     R6,#00H
01D8 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 611
01DB 9043B0            MOV     DPTR,#043B0H
01DE E0                MOVX    A,@DPTR
01DF FF                MOV     R7,A
01E0 EF                MOV     A,R7
01E1 54FD              ANL     A,#0FDH
01E3 FF                MOV     R7,A
01E4 9043B0            MOV     DPTR,#043B0H
01E7 EF                MOV     A,R7
01E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 612
01E9 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1196    ----
   CONSTANT SIZE    =    547    ----
   XDATA SIZE       =      4      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
