C51 COMPILER V9.03   CAPSENSE_TUNERHELPER                                                  08/27/2015 14:50:40 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CAPSENSE_TUNERHELPER
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\CapSense_TunerHelper.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.0\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\CapSense_TunerHelper.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\CapSense_
                    -TunerHelper.lst) CD DB NOIP OT(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\CapSense_TunerHe
                    -lper.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CapSense_TunerHelper.c
   3          * Version 3.10
   4          *
   5          * Description:
   6          *  This file provides the source code of Tuner helper APIs for the CapSense CSD 
   7          *  component.
   8          *
   9          * Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2011, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "CapSense_TunerHelper.h"
  19          
  20          #if (CapSense_TUNER_API_GENERATE)
                  void CapSense_ProcessAllWidgets(volatile CapSense_OUTBOX *outbox);
                  
                  volatile CapSense_MAILBOXES CapSense_mailboxesComm;
              
                  extern uint8 CapSense_SensorOnMask[(((CapSense_TOTAL_SENSOR_COUNT - 1u) / 8u) + 1u)];
              #endif  /* End (CapSense_TUNER_API_GENERATE) */
  27          
  28          
  29          /*******************************************************************************
  30          * Function Name: CapSense_TunerStart
  31          ********************************************************************************
  32          *
  33          * Summary:
  34          *  Initializes CapSense CSD component and EzI2C communication componenet to use
  35          *  mailbox data structure for communication with Tuner GUI.
  36          *  Start the scanning, after initialization complete.
  37          *
  38          * Parameters:
  39          *  None
  40          *
  41          * Return:
  42          *  None
  43          *
  44          * Reentrant:
  45          *  No
  46          *
  47          *******************************************************************************/
  48          void CapSense_TunerStart(void)
  49          {
  50   1          #if (CapSense_TUNER_API_GENERATE)
                      
                      /* Init mbx and quick check */
C51 COMPILER V9.03   CAPSENSE_TUNERHELPER                                                  08/27/2015 14:50:40 PAGE 2   

                      CapSense_InitMailbox(&CapSense_mailboxesComm.csdMailbox);
                      CapSense_mailboxesComm.numMailBoxes = CapSense_DEFAULT_MAILBOXES_NUMBER;
                      
                      /* Start CapSense and baselines */
                      CapSense_Start();
                      
                      /* Initialize baselines */ 
                      CapSense_InitializeAllBaselines();
                      CapSense_InitializeAllBaselines();
                      
                      /* Start EzI2C, clears buf pointers */
                      EZI2C_Start();
                      
                      /* Setup EzI2C buffers */
                      EZI2C_SetBuffer1(sizeof(CapSense_mailboxesComm), sizeof(CapSense_mailboxesComm),
                                                      (void *) &CapSense_mailboxesComm);
                      
                      /* Starts scan all enabled sensors */
                      CapSense_ScanEnabledWidgets();
                  
                  #endif  /* End (CapSense_TUNER_API_GENERATE) */
  74   1      }
  75          
  76          
  77          /*******************************************************************************
  78          * Function Name: CapSense_TunerComm
  79          ********************************************************************************
  80          *
  81          * Summary:
  82          *  This function is blocking. It waits till scaning loop is completed and apply
  83          *  new parameters from Tuner GUI if available (manual tuning mode only). Updates
  84          *  enabled baselines and state of widgets. Waits while Tuner GUI reports that 
  85          *  content of mailbox could be modified. Then loads the report data into outbox 
  86          *  and sets the busy flag. Starts new scanning loop.
  87          *  
  88          * Parameters:
  89          *  None
  90          *
  91          * Return:
  92          *  None
  93          *
  94          * Reentrant:
  95          *  No
  96          *
  97          *******************************************************************************/
  98          void CapSense_TunerComm(void)
  99          {
 100   1          #if (CapSense_TUNER_API_GENERATE)
                      if (0u == CapSense_IsBusy())
                      {   
                          /* Apply new settings */
                          #if (CapSense_TUNING_METHOD == CapSense_MANUAL_TUNING)
                              CapSense_ReadMessage(&CapSense_mailboxesComm.csdMailbox);
                          #endif  /* End (CapSense_TUNING_METHOD == CapSense_MANUAL_TUNING) */
              
                          /* Update all baselines and process all widgets */
                          CapSense_UpdateEnabledBaselines();
                          CapSense_ProcessAllWidgets(&CapSense_mailboxesComm.csdMailbox.outbox);
                          CapSense_PostMessage(&CapSense_mailboxesComm.csdMailbox);
              
                          /* Enable EZI2C interrupts, after scan complete */
                          EZI2C_EnableInt();
C51 COMPILER V9.03   CAPSENSE_TUNERHELPER                                                  08/27/2015 14:50:40 PAGE 3   

              
                          while((CapSense_mailboxesComm.csdMailbox.type != CapSense_TYPE_ID) || \
                                (EZI2C_GetActivity() & EZI2C_STATUS_BUSY)){}
                          
                          /* Disable EZI2C interrupts, while scanning */
                          EZI2C_DisableInt();
                          
                          /* Start scan all sensors */
                          CapSense_ScanEnabledWidgets();
                      }
                  #endif  /* End (CapSense_TUNER_API_GENERATE) */
 126   1      }
 127          
 128          
 129          #if (CapSense_TUNER_API_GENERATE)
                  /*******************************************************************************
                  * Function Name: CapSense_ProcessAllWidgets
                  ********************************************************************************
                  *
                  * Summary:
                  *  Call required functions to update all widgets state:
                  *   - CapSense_GetCentroidPos() - calls only if linear sliders 
                  *     available.
                  *   - CapSense_GetRadialCentroidPos() - calls only if radial slider 
                  *     available.
                  *   - CapSense_GetTouchCentroidPos() - calls only if touch pad slider 
                  *     available.
                  *   - CapSense_CheckIsAnyWidgetActive();
                  *  The results of opeartions are copied to OUTBOX.
                  *   
                  * Parameters:
                  *  None
                  *
                  * Return:
                  *  None
                  *
                  * Global Variables:
                  *  CapSense_OUTBOX outbox - structure which is used as ouput 
                  *  buffer for report data to Tuner GUI.
                  *  Update fields:
                  *    - position[];
                  *    - OnMask[];
                  *
                  * Reentrant:
                  *  No
                  *
                  *******************************************************************************/
                  void CapSense_ProcessAllWidgets(volatile CapSense_OUTBOX *outbox)
                  {
                      uint8 i = 0u;
              
                      #if (CapSense_TOTAL_TOUCH_PADS_COUNT)
                          uint16 pos[2];
                      #endif  /* End (CapSense_TOTAL_TOUCH_PADS_COUNT) */
                      
                      #if ( (CapSense_TOTAL_RADIAL_SLIDERS_COUNT) || \
                            (CapSense_TOTAL_TOUCH_PADS_COUNT) || \
                            (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) )
                          uint8 widgetCnt = 0u;
                      #endif  /* End ((CapSense_TOTAL_RADIAL_SLIDERS_COUNT) || (CapSense_TOTAL_TOUCH_PADS_COUNT)) || 
                                      (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) */
                      
C51 COMPILER V9.03   CAPSENSE_TUNERHELPER                                                  08/27/2015 14:50:40 PAGE 4   

                      /* Calculate widget with centroids */
                      #if (CapSense_TOTAL_LINEAR_SLIDERS_COUNT)
                          for(; i < CapSense_TOTAL_LINEAR_SLIDERS_COUNT; i++)
                          {
                              outbox->position[i] = CapSense_SWAP_ENDIAN16(CapSense_GetCentroidPos(i));
                          }
                      #endif   /* End (CapSense_TOTAL_LINEAR_SLIDERS_COUNT) */
                      
                      #if (CapSense_TOTAL_RADIAL_SLIDERS_COUNT)
                          widgetCnt = i;
                          for(; i < widgetCnt + CapSense_TOTAL_RADIAL_SLIDERS_COUNT; i++)
                          {
                              outbox->position[i] = CapSense_SWAP_ENDIAN16(CapSense_GetRadialCentroidPos(i));
                          }
                      #endif  /* End (CapSense_TOTAL_RADIAL_SLIDERS_COUNT) */
                      
                      #if (CapSense_TOTAL_TOUCH_PADS_COUNT)
                          widgetCnt = i;
                          for(; i < (widgetCnt + (CapSense_TOTAL_TOUCH_PADS_COUNT * 2)); i=i+2)
                          {
                              if(CapSense_GetTouchCentroidPos(i, pos) == 0u)
                              {
                                  outbox->position[i] = 0xFFFFu;
                                  outbox->position[i+1] = 0xFFFFu;
                              }
                              else
                              {
                                  outbox->position[i] = CapSense_SWAP_ENDIAN16( (uint16) pos[0u]);
                                  outbox->position[i+1] = CapSense_SWAP_ENDIAN16( (uint16) pos[1u]);
                              }
                          }
                      #endif  /* End (CapSense_TOTAL_TOUCH_PADS_COUNT) */
              
                      #if (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)
                          i += CapSense_TOTAL_BUTTONS_COUNT;
                          widgetCnt = 0;
                          for(; widgetCnt < (CapSense_TOTAL_MATRIX_BUTTONS_COUNT * 2); i += 2)
                          {
                              if(CapSense_GetMatrixButtonPos(i, ((uint8*) &outbox->mb_position[widgetCnt])) == 0)
                              {
                                  outbox->mb_position[widgetCnt] = 0xFFu;
                                  outbox->mb_position[widgetCnt+1] = 0xFF;
                              }
                              widgetCnt += 2;
                          }
                      #endif /* End (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)*/
              
                      /* Update On/Off State */
                      CapSense_CheckIsAnyWidgetActive();
              
                      /* Copy OnMask */
                      for(i=0; i < CapSense_TOTAL_SENSOR_MASK_COUNT; i++)
                      {
                          outbox->onMask[i]  = CapSense_SensorOnMask[i];
                      }
                  }
              #endif /* End (CapSense_TUNER_API_GENERATE) */
 234          
 235          
 236          /* [] END OF FILE */
C51 COMPILER V9.03   CAPSENSE_TUNERHELPER                                                  08/27/2015 14:50:40 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CapSense_TunerStart (BEGIN)
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 74
0000 22                RET     
             ; FUNCTION CapSense_TunerStart (END)

             ; FUNCTION CapSense_TunerComm (BEGIN)
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 126
0000 22                RET     
             ; FUNCTION CapSense_TunerComm (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =      2    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
