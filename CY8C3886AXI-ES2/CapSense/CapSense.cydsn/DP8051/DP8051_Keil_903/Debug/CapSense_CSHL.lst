C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CAPSENSE_CSHL
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\CapSense_CSHL.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.0\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\CapSense_CSHL.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\CapSense_CSHL.ls
                    -t) CD DB NOIP OT(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\CapSense_CSHL.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CapSense_CSHL.c
   3          * Version 3.10
   4          *
   5          * Description:
   6          *  This file provides the source code to the High Level APIs for the CapSesne
   7          *  CSD component.
   8          *
   9          * Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2011, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "CapSense_CSHL.h"
  19          
  20          /* SmartSense functions */
  21          #if (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING)
  22              extern void CapSense_CalculateThresholds(uint8 SensorNumber);
  23          #endif /* End (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING) */
  24          
  25          /* Median filter function prototype */
  26          #if ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) || \
  27                (CapSense_POS_FILTERS_MASK & CapSense_MEDIAN_FILTER) )
                  uint16 CapSense_MedianFilter(uint16 x1, uint16 x2, uint16 x3) \
                  ;
              #endif /* End CapSense_RAW_FILTER_MASK && CapSense_POS_FILTERS_MASK */
  31          
  32          /* Averaging filter function prototype */
  33          #if ( (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) || \
  34                (CapSense_POS_FILTERS_MASK & CapSense_AVERAGING_FILTER) )
                  uint16 CapSense_AveragingFilter(uint16 x1, uint16 x2, uint16 x3) \
                  ;
              #endif /* End CapSense_RAW_FILTER_MASK && CapSense_POS_FILTERS_MASK */
  38          
  39          /* IIR2Filter(1/2prev + 1/2cur) filter function prototype */
  40          #if ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) || \
  41                (CapSense_POS_FILTERS_MASK & CapSense_IIR2_FILTER) )
              uint16 CapSense_IIR2Filter(uint16 x1, uint16 x2) ;
              #endif /* End CapSense_RAW_FILTER_MASK && CapSense_POS_FILTERS_MASK */
  44          
  45          /* IIR4Filter(3/4prev + 1/4cur) filter function prototype */
  46          #if ( (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER) || \
  47                (CapSense_POS_FILTERS_MASK & CapSense_IIR4_FILTER) )
                  uint16 CapSense_IIR4Filter(uint16 x1, uint16 x2) ;
              #endif /* End CapSense_RAW_FILTER_MASK && CapSense_POS_FILTERS_MASK */
  50          
  51          /* IIR8Filter(7/8prev + 1/8cur) filter function prototype - RawCounts only */
  52          #if (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)
                  uint16 CapSense_IIR8Filter(uint16 x1, uint16 x2) ;
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 2   

              #endif /* End CapSense_RAW_FILTER_MASK */
  55          
  56          /* IIR16Filter(15/16prev + 1/16cur) filter function prototype - RawCounts only */
  57          #if (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER)
                  uint16 CapSense_IIR16Filter(uint16 x1, uint16 x2) ;
              #endif /* End CapSense_RAW_FILTER_MASK */
  60          
  61          /* JitterFilter filter function prototype */
  62          #if ( (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) || \
  63                (CapSense_POS_FILTERS_MASK & CapSense_JITTER_FILTER) )
                  uint16 CapSense_JitterFilter(uint16 x1, uint16 x2) ;
              #endif /* End CapSense_RAW_FILTER_MASK && CapSense_POS_FILTERS_MASK */
  66          
  67          /* Storage of filters data */
  68          #if ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) || \
  69                (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) )
              
                  uint16 CapSense_rawFilterData1[CapSense_TOTAL_SENSOR_COUNT];
                  uint16 CapSense_rawFilterData2[CapSense_TOTAL_SENSOR_COUNT];
              
              #elif ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)   || \
                      (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)   || \
                      (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) || \
                      (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)   || \
                      (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER) )
                      
                  uint16 CapSense_rawFilterData1[CapSense_TOTAL_SENSOR_COUNT];
              
              #else
  83              /* No Raw filters */
  84          #endif  /* End CapSense_RAW_FILTER_MASK */
  85          
  86          extern uint16 CapSense_SensorRaw[CapSense_TOTAL_SENSOR_COUNT];
  87          extern uint8 CapSense_SensorEnableMask[(((CapSense_TOTAL_SENSOR_COUNT - 1u) / 8u) + 1u)];
  88          extern const uint8 CYCODE CapSense_widgetNumber[];
  89          
  90          uint16 CapSense_SensorBaseline[CapSense_TOTAL_SENSOR_COUNT] = {0u};
  91          uint8 CapSense_SensorBaselineLow[CapSense_TOTAL_SENSOR_COUNT] = {0u};
  92          uint8 CapSense_SensorSignal[CapSense_TOTAL_SENSOR_COUNT] = {0u};
  93          uint8 CapSense_SensorOnMask[(((CapSense_TOTAL_SENSOR_COUNT - 1u) / 8u) + 1u)] = {0u};
  94          
  95          uint8 CapSense_LowBaselineResetCnt[CapSense_TOTAL_SENSOR_COUNT];
  96          
  97          /* Helps while centroid calulation */
  98          #if (CapSense_TOTAL_CENTROIDS_COUNT)
  99              static uint8 CapSense_centroid[3];
 100          #endif  /* End (CapSense_TOTAL_CENTROIDS_COUNT) */
 101          
 102          uint8 CapSense_fingerThreshold[] = {
 103              100u, 100u, 100u, 
 104          };
 105          
 106          uint8 CapSense_noiseThreshold[] = {
 107              20u, 20u, 20u, 
 108          };
 109          
 110          uint8 CapSense_hysteresis[] = {
 111              0u, 10u, 10u, 
 112          };
 113          
 114          uint8 CapSense_debounce[] = {
 115              1u, 1u, 1u, 
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 3   

 116          };
 117          
 118          uint8 CapSense_debounceCounter[] = {
 119              0u, 0u, 0u, 
 120          };
 121          
 122          const uint8 CYCODE CapSense_rawDataIndex[] = {
 123              2u, /* LinearSlider0__LS */
 124              0u, /* Button0__BTN */
 125              1u, /* Button1__BTN */
 126          
 127          };
 128          
 129          const uint8 CYCODE CapSense_numberOfSensors[] = {
 130              5u, /* LinearSlider0__LS */
 131              1u, /* Button0__BTN */
 132              1u, /* Button1__BTN */
 133          
 134          };
 135          
 136          const uint16 CYCODE CapSense_centroidMult[] = {
 137              5120u, 
 138          };
 139          
 140          
 141          
 142          /*******************************************************************************
 143          * Function Name: CapSense_BaseInit
 144          ********************************************************************************
 145          *
 146          * Summary:
 147          *  Loads the CapSense_SensorBaseline[sensor] array element with an 
 148          *  initial value which is equal to raw count value. 
 149          *  Resets to zero CapSense_SensorBaselineLow[senesor] and 
 150          *  CapSense_SensorSignal[sensor] array element.
 151          *  Loads CapSense_debounceCounter[sensor] array element with initial 
 152          *  value equal CapSense_debounce[].
 153          *  Loads the CapSense_rawFilterData2[sensor] and 
 154          *  CapSense_rawFilterData2[sensor] array element with an 
 155          *  initial value which is equal raw count value if raw data filter is enabled.
 156          *
 157          * Parameters:
 158          *  sensor:  Sensor number.
 159          *
 160          * Return:
 161          *  None
 162          *
 163          * Global Variables:
 164          *  CapSense_SensorBaseline[]    - used to store baseline value.
 165          *  CapSense_SensorBaselineLow[] - used to store fraction byte of 
 166          *  baseline value.
 167          *  CapSense_SensorSignal[]      - used to store diffence between 
 168          *  current value of raw data and previous value of baseline.
 169          *  CapSense_debounceCounter[]   - used to store current debounce 
 170          *  counter of sensor. Widget which has this parameter are buttons, matrix 
 171          *  buttons, proximity, guard. All other widgets haven't debounce parameter
 172          *  and use the last element of this array with value 0 (it means no debounce).
 173          *  CapSense_rawFilterData1[]    - used to store previous sample of 
 174          *  any enabled raw data filter.
 175          *  CapSense_rawFilterData2[]    - used to store before previous sample
 176          *  of enabled raw data filter. Only required for median or average filters.
 177          *
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 4   

 178          * Reentrant:
 179          *  No
 180          *
 181          *******************************************************************************/
 182          void CapSense_BaseInit(uint8 sensor)
 183          {
 184   1          #if ((CapSense_TOTAL_BUTTONS_COUNT) || (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) || \
 185   1               (CapSense_TOTAL_GENERICS_COUNT))
 186   1              uint8 widget = CapSense_widgetNumber[sensor];
 187   1          #endif /* ((CapSense_TOTAL_MATRIX_BUTTONS_COUNT) || (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)) */
 188   1          
 189   1          #if (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)
                      uint8 debounceIndex;
                  #endif  /* End (CapSense_TOTAL_MATRIX_BUTTONS_COUNT != 0u) */
 192   1          
 193   1          #if (CapSense_TOTAL_GENERICS_COUNT)
                      /* Exclude generic widget */
                      if(widget < CapSense_END_OF_WIDGETS_INDEX)
                      {
                  #endif  /* End CapSense_TOTAL_GENERICS_COUNT */
 198   1          
 199   1          /* Initialize Baseline */
 200   1          CapSense_SensorBaseline[sensor] = CapSense_SensorRaw[sensor];
 201   1          CapSense_SensorBaselineLow[sensor] = 0u;
 202   1          CapSense_SensorSignal[sensor] = 0u;
 203   1              
 204   1          if(widget > CapSense_END_OF_TOUCH_PAD_INDEX)
 205   1          {
 206   2              CapSense_debounceCounter[widget - (CapSense_END_OF_TOUCH_PAD_INDEX + 1)] =  CapSense_debounce[widg
             -et];
 207   2          }
 208   1      
 209   1          
 210   1          #if ((CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) ||\
 211   1               (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER))
              
                      CapSense_rawFilterData1[sensor] = CapSense_SensorRaw[sensor];
                      CapSense_rawFilterData2[sensor] = CapSense_SensorRaw[sensor];
                  
                  #elif ((CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) ||\
                         (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER) ||\
                         (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) ||\
                         (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER) ||\
                         (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER))
                          
                      CapSense_rawFilterData1[sensor] = CapSense_SensorRaw[sensor];
                  
                  #else
 225   1              /* No Raw filters */
 226   1          #endif  /* End CapSense_RAW_FILTER_MASK */
 227   1          
 228   1          #if (CapSense_TOTAL_GENERICS_COUNT)
                      /* Exclude generic widget */
                      }
                  #endif  /* End CapSense_TOTAL_GENERICS_COUNT */
 232   1      }
 233          
 234          
 235          /*******************************************************************************
 236          * Function Name: CapSense_InitializeSensorBaseline
 237          ********************************************************************************
 238          *
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 5   

 239          * Summary:
 240          *  Loads the CapSense_SensorBaseline[sensor] array element with an 
 241          *  initial value by scanning the selected sensor (one channel design) or pair 
 242          *  of sensors (two channels designs). The raw count value is copied into the 
 243          *  baseline array for each sensor. The raw data filters are initialized if 
 244          *  enabled.
 245          *
 246          * Parameters:
 247          *  sensor:  Sensor number.
 248          *
 249          * Return:
 250          *  None
 251          *
 252          * Reentrant:
 253          *  No
 254          *
 255          *******************************************************************************/
 256          void CapSense_InitializeSensorBaseline(uint8 sensor)
 257          {
 258   1          /* Scan sensor */
 259   1          CapSense_ScanSensor(sensor);
 260   1          while(CapSense_IsBusy() != 0u) {;}
 261   1          
 262   1          #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
 263   1              /* Initialize Baseline, Signal and debounce counters */       
 264   1              CapSense_BaseInit(sensor);
 265   1              
 266   1          #else
                  
                      if(sensor < CapSense_TOTAL_SENSOR_COUNT__CH0)
                      {
                          /* Initialize Baseline, Signal and debounce counters */ 
                          CapSense_BaseInit(sensor);
                      }
                      
                      if(sensor < CapSense_TOTAL_SENSOR_COUNT__CH1)
                      {
                          /* Initialize Baseline, Signal and debounce counters */
                          CapSense_BaseInit(sensor + CapSense_TOTAL_SENSOR_COUNT__CH0);
                      }
                  
                  #endif  /* End (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN) */
 281   1      }
 282          
 283          
 284          /*******************************************************************************
 285          * Function Name: CapSense_InitializeAllBaselines
 286          ********************************************************************************
 287          *
 288          * Summary:
 289          *  Uses the CapSense_InitializeSensorBaseline function to loads the 
 290          *  CapSense_SensorBaseline[] array with an initial values by scanning 
 291          *  all sensors. The raw count values are copied into the baseline array for 
 292          *  all sensors. The raw data filters are initialized if enabled.
 293          *
 294          * Parameters:
 295          *  None
 296          *
 297          * Return:
 298          *  None
 299          *
 300          * Reentrant:
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 6   

 301          *  No
 302          *
 303          *******************************************************************************/
 304          void CapSense_InitializeAllBaselines(void)
 305          {
 306   1          uint8 i;
 307   1          
 308   1          /* The baseline initialize by sensor of sensor pair */
 309   1          for(i = 0u; i < CapSense_TOTAL_SCANSLOT_COUNT; i++)
 310   1          {
 311   2              CapSense_InitializeSensorBaseline(i);
 312   2          }
 313   1      }
 314          
 315          
 316          /*******************************************************************************
 317          * Function Name: CapSense_InitializeEnabledBaselines
 318          ********************************************************************************
 319          *
 320          * Summary:
 321          *  Scans all enabled widgets and the raw count values are copied into the 
 322          *  baseline array for all sensors enabled in scanning process. Baselines 
 323          *  initialize with zero values for sensors disabled from scanning process. 
 324          *  The raw data filters are initialized if enabled.
 325          *
 326          * Parameters:
 327          *  None
 328          *
 329          * Return:
 330          *  None
 331          *
 332          * Reentrant:
 333          *  No
 334          *
 335          *******************************************************************************/
 336          void CapSense_InitializeEnabledBaselines(void)
 337          {
 338   1          uint8 i;
 339   1          uint8 pos;
 340   1          uint8 enMask;
 341   1          
 342   1          CapSense_ScanEnabledWidgets();
 343   1          while(CapSense_IsBusy() != 0u){;}
 344   1          
 345   1          for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 346   1          {
 347   2              pos = (i >> 3u);
 348   2              enMask = 0x01u << (i & 0x07u);
 349   2              
 350   2              /* Clear raw data if sensor is disabled from scanning process */
 351   2              if((CapSense_SensorEnableMask[pos] & enMask) == 0u)
 352   2              {
 353   3                  CapSense_SensorRaw[i] = 0u;
 354   3              }
 355   2              
 356   2              /* Initialize baselines */
 357   2              CapSense_BaseInit(i);
 358   2          }
 359   1      }  
 360          
 361          
 362          /*******************************************************************************
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 7   

 363          * Function Name: CapSense_UpdateSensorBaseline
 364          ********************************************************************************
 365          *
 366          * Summary:
 367          *  Updates the CapSense_SensorBaseline[sensor] array element using the 
 368          *  LP filter with k = 256. The signal calculates the difference of count by 
 369          *  subtracting the previous baseline from the current raw count value and stores
 370          *  it in CapSense_SensorSignal[sensor]. 
 371          *  If auto reset option is enabled the baseline updated regards noise threshold. 
 372          *  If auto reset option is disabled the baseline stops updating if signal is 
 373          *  greater that zero and baseline loads with raw count value if signal is less 
 374          *  that noise threshold.
 375          *  Raw data filters are applied to the values if enabled before baseline 
 376          *  calculation.
 377          *
 378          * Parameters:
 379          *  sensor:  Sensor number.
 380          *
 381          * Return:
 382          *  None
 383          *
 384          * Global Variables:
 385          *  CapSense_SensorBaseline[]    - used to store baseline value.
 386          *  CapSense_SensorBaselineLow[] - used to store fraction byte of 
 387          *  baseline value.
 388          *  CapSense_SensorSignal[]      - used to store diffence between 
 389          *  current value of raw data and previous value of baseline.
 390          *  CapSense_rawFilterData1[]    - used to store previous sample of 
 391          *  any enabled raw data filter.
 392          *  CapSense_rawFilterData2[]    - used to store before previous sample
 393          *  of enabled raw data filter. Only required for median or average filters.
 394          *
 395          * Reentrant:
 396          *  No
 397          *
 398          *******************************************************************************/
 399           void CapSense_UpdateSensorBaseline(uint8 sensor)
 400          {
 401   1          uint32 calc;
 402   1          uint16 tempRaw;
 403   1          uint16 filteredRawData;
 404   1          uint8 widget = CapSense_widgetNumber[sensor];
 405   1          uint8 noiseThreshold = CapSense_noiseThreshold[widget];
 406   1          
 407   1          #if (CapSense_TOTAL_GENERICS_COUNT)
                      /* Exclude generic widget */
                      if(widget < CapSense_END_OF_WIDGETS_INDEX)
                      {
                  #endif  /* End CapSense_TOTAL_GENERICS_COUNT */
 412   1          
 413   1          filteredRawData = CapSense_SensorRaw[sensor];
 414   1          
 415   1          #if (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER)
                      tempRaw = filteredRawData;
                      filteredRawData = CapSense_MedianFilter(filteredRawData, CapSense_rawFilterData1[sensor], 
                                                                      CapSense_rawFilterData2[sensor]);
                      CapSense_rawFilterData2[sensor] = CapSense_rawFilterData1[sensor];
                      CapSense_rawFilterData1[sensor] = tempRaw;
                      
                  #elif (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER)
                      tempRaw = filteredRawData;
                      filteredRawData = CapSense_AveragingFilter(filteredRawData, CapSense_rawFilterData1[sensor],
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 8   

                                                                         CapSense_rawFilterData2[sensor]);
                      CapSense_rawFilterData2[sensor] = CapSense_rawFilterData1[sensor];
                      CapSense_rawFilterData1[sensor] = tempRaw;
                      
                  #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)
                      filteredRawData = CapSense_IIR2Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
                      CapSense_rawFilterData1[sensor] = filteredRawData;
                      
                  #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)
                      filteredRawData = CapSense_IIR4Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
                      CapSense_rawFilterData1[sensor] = filteredRawData;
                          
                  #elif (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER)
                      filteredRawData = CapSense_JitterFilter(filteredRawData, CapSense_rawFilterData1[sensor]);
                      CapSense_rawFilterData1[sensor] = filteredRawData;
                      
                  #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)
                      filteredRawData = CapSense_IIR8Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
                      CapSense_rawFilterData1[sensor] = filteredRawData;
                      
                  #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER)
                      filteredRawData = CapSense_IIR16Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
                      CapSense_rawFilterData1[sensor] = filteredRawData;
                      
                  #else
 450   1              /* No Raw filters */
 451   1          #endif  /* End (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) */
 452   1          
 453   1          #if (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING)
 454   1              CapSense_CalculateThresholds(sensor);
 455   1          #endif /* End (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING) */
 456   1      
 457   1      
 458   1          /* Baseline calculation */
 459   1          /* Calculate difference RawData[cur] - Baseline[prev] */
 460   1          if(filteredRawData >= CapSense_SensorBaseline[sensor])
 461   1          {
 462   2              tempRaw = filteredRawData - CapSense_SensorBaseline[sensor];
 463   2              widget = 1u;    /* Positive difference - Calculate the Signal */
 464   2          }
 465   1          else
 466   1          {
 467   2              tempRaw = CapSense_SensorBaseline[sensor] - filteredRawData;
 468   2              widget = 0u;    /* Negative difference - Do NOT calculate the Signal */
 469   2          }
 470   1      
 471   1          if((widget == 0u) && (tempRaw > (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD))
 472   1          {
 473   2              if(CapSense_LowBaselineResetCnt[sensor] >= CapSense_LOW_BASELINE_RESET)
 474   2              {
 475   3                  CapSense_BaseInit(sensor);
 476   3                  CapSense_LowBaselineResetCnt[sensor] = 0;
 477   3              }
 478   2              else
 479   2              {
 480   3                  CapSense_LowBaselineResetCnt[sensor]++;
 481   3              }
 482   2          }
 483   1          else
 484   1          {
 485   2              #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 486   2                  /* Update Baseline if lower that noiseThreshold */
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 9   

 487   2                  if ( (tempRaw <= (uint16) noiseThreshold) || 
 488   2                       ((tempRaw < (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD)
 489   2                         && widget == 0))
 490   2                  {
 491   3              #endif /* (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE) */
 492   3                      /* Make full Baseline 23 bits */
 493   3                      calc = (uint32) CapSense_SensorBaseline[sensor] << 8u;
 494   3                      calc |= (uint32) CapSense_SensorBaselineLow[sensor];
 495   3      
 496   3                      /* Add Raw Data to Baseline */
 497   3                      calc += filteredRawData;
 498   3      
 499   3                      /* Sub the high Baseline */
 500   3                      calc -= CapSense_SensorBaseline[sensor];
 501   3      
 502   3                      /* Put Baseline and BaselineLow */
 503   3                      CapSense_SensorBaseline[sensor] = ((uint16) (calc >> 8u));
 504   3                      CapSense_SensorBaselineLow[sensor] = ((uint8) calc);
 505   3      
 506   3                      CapSense_LowBaselineResetCnt[sensor] = 0;
 507   3              #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 508   3                  }
 509   2              #endif /* (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE) */
 510   2          }
 511   1      
 512   1          /* Calculate Signal if possitive difference > noiseThreshold */
 513   1          if((tempRaw > (uint16) noiseThreshold) && (widget != 0u))
 514   1          {
 515   2              #if (CapSense_SIGNAL_SIZE == CapSense_SIGNAL_SIZE_UINT8)
 516   2                  /* Over flow defence for uint8 */
 517   2                  if (tempRaw > 0xFFu)
 518   2                  {
 519   3                      CapSense_SensorSignal[sensor] = 0xFFu;
 520   3                  }    
 521   2                  else 
 522   2                  {
 523   3                      CapSense_SensorSignal[sensor] = ((uint8) tempRaw);
 524   3                  }
 525   2              #else
                          CapSense_SensorSignal[sensor] = ((uint16) tempRaw);
                      #endif  /* End (CapSense_SIGNAL_SIZE == CapSense_SIGNAL_SIZE_UINT8) */
 528   2          }
 529   1          else
 530   1          {
 531   2              /* Signal is zero */
 532   2              CapSense_SensorSignal[sensor] = 0u;
 533   2          }
 534   1      
 535   1          #if (CapSense_TOTAL_GENERICS_COUNT)
                      /* Exclude generic widget */
                      }
                  #endif  /* End CapSense_TOTAL_GENERICS_COUNT */
 539   1      }
 540          
 541          
 542          /*******************************************************************************
 543          * Function Name: CapSense_UpdateEnabledBaselines
 544          ********************************************************************************
 545          *
 546          * Summary:
 547          *  Checks CapSense_SensorEnableMask[] array and calls the 
 548          *  CapSense_UpdateSensorBaseline function to update the baselines 
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 10  

 549          *  for enabled sensors.
 550          *
 551          * Parameters:
 552          *  None
 553          *
 554          * Return:
 555          *  None
 556          *
 557          * Global Variables:
 558          *  CapSense_SensorEnableMask[] - used to store the sensor scanning 
 559          *  state.
 560          *  CapSense_SensorEnableMask[0] contains the masked bits for sensors 
 561          *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 562          *  CapSense_SensorEnableMask[1] contains the masked bits for 
 563          *  sensors 8 through 15 (if needed), and so on.
 564          *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 565          *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 566          *
 567          * Reentrant:
 568          *  No
 569          *
 570          *******************************************************************************/
 571           void CapSense_UpdateEnabledBaselines(void)
 572          {
 573   1          uint8 i;
 574   1          uint8 pos;
 575   1          uint8 enMask;
 576   1          
 577   1          for(i = 0; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 578   1          {
 579   2              pos = (i >> 3u);
 580   2              enMask = 0x01u << (i & 0x07u);
 581   2              if((CapSense_SensorEnableMask[pos] & enMask) != 0u)
 582   2              {
 583   3                  CapSense_UpdateSensorBaseline(i);
 584   3              }
 585   2          }
 586   1      }
 587          
 588          
 589          /*******************************************************************************
 590          * Function Name: CapSense_CheckIsSensorActive
 591          ********************************************************************************
 592          *
 593          * Summary:
 594          *  Compares the CapSense_SensorSignal[sensor] array element to finger
 595          *  threshold of widget it belongs to. The hysteresis and debounce are taken into 
 596          *  account. The hysteresis is added or subtracted from the finger threshold 
 597          *  based on whether the sensor is currently active. 
 598          *  If the sensor is active, the threshold is lowered by the hysteresis amount.
 599          *  If the sensor is inactive, the threshold is raised by the hysteresis amount.
 600          *  The debounce counter added to the sensor active transition.
 601          *  This function updates CapSense_SensorOnMask[] array element.
 602          *
 603          * Parameters:
 604          *  sensor:  Sensor number.
 605          *
 606          * Return:
 607          *  Returns sensor state 1 if active, 0 if not active.
 608          *
 609          * Global Variables:
 610          *  CapSense_SensorSignal[]      - used to store diffence between 
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 11  

 611          *  current value of raw data and previous value of baseline.
 612          *  CapSense_debounceCounter[]   - used to store current debounce 
 613          *  counter of sensor. Widget which has this parameter are buttons, matrix 
 614          *  buttons, proximity, guard. All other widgets haven't debounce parameter
 615          *  and use the last element of this array with value 0 (it means no debounce).
 616          *  CapSense_SensorOnMask[] - used to store sensors on/off state.
 617          *  CapSense_SensorOnMask[0] contains the masked bits for sensors 
 618          *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 619          *  CapSense_SensorEnableMask[1] contains the masked bits for 
 620          *  sensors 8 through 15 (if needed), and so on.
 621          *  0 - sensor is inactive.
 622          *  1 - sensor is active.
 623          *
 624          * Reentrant:
 625          *  No
 626          *
 627          *******************************************************************************/
 628          uint8 CapSense_CheckIsSensorActive(uint8 sensor)
 629          {
 630   1          uint8 debounceIndex;
 631   1          /* Get On/Off mask */
 632   1          uint8 pos = (sensor >> 3u);
 633   1          uint8 onMask = 0x01u << (sensor & 0x07u);
 634   1          /* Prepare to find debounce counter index */
 635   1          uint8 widget = CapSense_widgetNumber[sensor];
 636   1          uint8 fingerThreshold = CapSense_fingerThreshold[widget];
 637   1          uint8 hysteresis = CapSense_hysteresis[widget];
 638   1          uint8 debounce = CapSense_debounce[widget];
 639   1          
 640   1          if (widget < CapSense_TOTAL_CENTROIDS_COUNT)
 641   1          {
 642   2              debounceIndex = CapSense_UNUSED_DEBOUNCE_COUNTER_INDEX;
 643   2              CapSense_debounceCounter[debounceIndex] = 1u;
 644   2          }
 645   1          else
 646   1          {
 647   2              debounceIndex = widget - (CapSense_END_OF_TOUCH_PAD_INDEX + 1);
 648   2          }
 649   1      
 650   1          
 651   1          /* Was on */
 652   1          if (CapSense_SensorOnMask[pos] & onMask)
 653   1          {
 654   2              /* Hysteresis minus */
 655   2              if (CapSense_SensorSignal[sensor] < (fingerThreshold - hysteresis))
 656   2              {
 657   3                  CapSense_SensorOnMask[pos] &= ~onMask;
 658   3                  CapSense_debounceCounter[debounceIndex] = debounce; 
 659   3              }
 660   2          }
 661   1          else    /* Was off */
 662   1          {
 663   2              /* Hysteresis plus */
 664   2              if (CapSense_SensorSignal[sensor] > (fingerThreshold + hysteresis))
 665   2              {
 666   3                  /* Sensor active, decrement debounce counter */
 667   3                  if (CapSense_debounceCounter[debounceIndex]-- <= 1u)
 668   3                  {
 669   4                      CapSense_SensorOnMask[pos] |= onMask; 
 670   4                  }
 671   3              }
 672   2              else
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 12  

 673   2              {
 674   3                  /* Sensor inactive - reset Debounce counter */
 675   3                  CapSense_debounceCounter[debounceIndex] = debounce;
 676   3              }
 677   2          }
 678   1          
 679   1          return (CapSense_SensorOnMask[pos] & onMask) ? 1u : 0u;
 680   1      }
 681          
 682          
 683          /*******************************************************************************
 684          * Function Name: CapSense_CheckIsWidgetActive
 685          ********************************************************************************
 686          *
 687          * Summary:
 688          *  Use function CapSense_CheckIsSensorActive() to update 
 689          *  CapSense_SensorOnMask[] for all sensors within the widget.
 690          *  If one of sensors within widget is active the function return that widget is 
 691          *  active.
 692          *  The touch pad and matrix buttons widgets need to have active sensor within 
 693          *  col and row to return widget active status.
 694          *
 695          * Parameters:
 696          *  widget:  widget number.
 697          *
 698          * Return:
 699          *  Returns widget sensor state 1 if one or more sensors within widget is/are 
 700          *  active, 0 if all sensors within widget are inactive.
 701          *
 702          * Reentrant:
 703          *  No
 704          *
 705          *******************************************************************************/
 706          uint8 CapSense_CheckIsWidgetActive(uint8 widget)
 707          {
 708   1          uint8 rawIndex = CapSense_rawDataIndex[widget];
 709   1          uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 710   1          uint8 state = 0u;
 711   1      
 712   1          /* Check all sensors of the widget */
 713   1          do
 714   1          {
 715   2              if(CapSense_CheckIsSensorActive(rawIndex) != 0u)
 716   2              {
 717   3                  state = CapSense_SENSOR_1_IS_ACTIVE;
 718   3              }
 719   2              rawIndex++;
 720   2          }
 721   1          while(rawIndex < numberOfSensors);
 722   1          
 723   1      
 724   1          
 725   1          return state;
 726   1      }
 727          
 728          
 729          /*******************************************************************************
 730          * Function Name: CapSense_CheckIsAnyWidgetActive
 731          ********************************************************************************
 732          *
 733          * Summary:
 734          *  Compares all sensors of the CapSense_Signal[] array to their finger 
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 13  

 735          *  threshold. Calls CapSense_CheckIsWidgetActive() for each widget so 
 736          *  the CapSense_SensorOnMask[] array is up to date after calling this 
 737          *  function.
 738          *
 739          * Parameters:
 740          *  widget:  widget number.
 741          *
 742          * Return:
 743          *  Returns 1 if any widget is active, 0 none of widgets are active.
 744          *
 745          * Reentrant:
 746          *  No
 747          *
 748          *******************************************************************************/
 749          uint8 CapSense_CheckIsAnyWidgetActive(void)
 750          {
 751   1          uint8 i;
 752   1          uint8 state = 0u;
 753   1          
 754   1          for(i = 0u; i < CapSense_TOTAL_WIDGET_COUNT; i++)
 755   1          {
 756   2              if (CapSense_CheckIsWidgetActive(i) != 0u)
 757   2              {
 758   3                  state = CapSense_WIDGET_IS_ACTIVE;
 759   3              }
 760   2          }
 761   1          
 762   1      
 763   1          return state;
 764   1      }
 765          
 766          
 767          /*******************************************************************************
 768          * Function Name: CapSense_EnableWidget
 769          ********************************************************************************
 770          *
 771          * Summary:
 772          *  Enable all widget elements (sensors) to scanning process.
 773          *
 774          * Parameters:
 775          *  widget:  widget number.
 776          *
 777          * Return:
 778          *  None
 779          *
 780          * Global Variables:
 781          *  CapSense_SensorEnableMask[] - used to store the sensor scanning 
 782          *  state.
 783          *  CapSense_SensorEnableMask[0] contains the masked bits for sensors 
 784          *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 785          *  CapSense_SensorEnableMask[1] contains the masked bits for 
 786          *  sensors 8 through 15 (if needed), and so on.
 787          *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 788          *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 789          *
 790          * Reentrant:
 791          *  No
 792          *
 793          *******************************************************************************/
 794          void CapSense_EnableWidget(uint8 widget)
 795          {
 796   1          uint8 pos;
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 14  

 797   1          uint8 enMask;
 798   1          uint8 rawIndex = CapSense_rawDataIndex[widget];
 799   1          uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 800   1          
 801   1          /* Enable all sensors of the widget */
 802   1          do
 803   1          {
 804   2              pos = (rawIndex >> 3u);
 805   2              enMask = 0x01u << (rawIndex & 0x07u);
 806   2              
 807   2              CapSense_SensorEnableMask[pos] |= enMask;
 808   2              rawIndex++;
 809   2          }
 810   1          while(rawIndex < numberOfSensors);
 811   1          
 812   1      
 813   1      }
 814          
 815          
 816          /*******************************************************************************
 817          * Function Name: CapSense_DisableWidget
 818          ********************************************************************************
 819          *
 820          * Summary:
 821          *  Disable all widget elements (sensors) from scanning process.
 822          *
 823          * Parameters:
 824          *  widget:  widget number.
 825          *
 826          * Return:
 827          *  None
 828          *
 829          * Global Variables:
 830          *  CapSense_SensorEnableMask[] - used to store the sensor scanning 
 831          *  state.
 832          *  CapSense_SensorEnableMask[0] contains the masked bits for sensors 
 833          *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 834          *  CapSense_SensorEnableMask[1] contains the masked bits for 
 835          *  sensors 8 through 15 (if needed), and so on.
 836          *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 837          *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 838          *
 839          * Reentrant:
 840          *  No
 841          *
 842          *******************************************************************************/
 843          void CapSense_DisableWidget(uint8 widget)
 844          {
 845   1          uint8 pos;
 846   1          uint8 enMask;
 847   1          uint8 rawIndex = CapSense_rawDataIndex[widget];
 848   1          uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 849   1         
 850   1          /* Disable all sensors of the widget */
 851   1          do
 852   1          {
 853   2              pos = (rawIndex >> 3u);
 854   2              enMask = 0x01u << (rawIndex & 0x07u);
 855   2              
 856   2              CapSense_SensorEnableMask[pos] &= ~enMask;
 857   2              rawIndex++;
 858   2          }
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 15  

 859   1          while(rawIndex < numberOfSensors);
 860   1          
 861   1      
 862   1      }
 863          #if(CapSense_TOTAL_CENTROIDS_COUNT)
 864              /*******************************************************************************
 865              * Function Name: CapSense_FindMaximum
 866              ********************************************************************************
 867              *
 868              * Summary:
 869              *  Finds index of maximum element within defined centroid. Checks 
 870              *  CapSense_SensorSignal[] within defined cenrtoid and 
 871              *  returns index of maximum element. The values below finger threshold are 
 872              *  ignored.
 873              *  The centrod defines by offset of first element and number of elements - count.
 874              *  The diplexed centroid requires at least consecutive two elements above
 875              *  FingerThreshold to find index of maximum element.
 876              * 
 877              * Parameters:
 878              *  offset:  Start index of cetroid in CapSense_SensorSignal[] array.
 879              *  count:   number of elements within centroid.
 880              *  fingerThreshold:  Finger threshould.
 881              *  diplex:   pointer to diplex table.
 882              * 
 883              * Return:
 884              *  Returns index of maximum element within defined centroid.
 885              *  If index of maximum element doesn't find the 0xFF returns.
 886              * 
 887              *******************************************************************************/
 888              #if (CapSense_IS_DIPLEX_SLIDER)
                      uint8 CapSense_FindMaximum(uint8 offset, uint8 count, uint8 fingerThreshold, const uint8 CYCODE *d
             -iplex)
                  #else 
 891                  uint8 CapSense_FindMaximum(uint8 offset, uint8 count, uint8 fingerThreshold)
 892              #endif
 893              {
 894   1              uint8 i;
 895   1              #if (CapSense_IS_DIPLEX_SLIDER)        
                          uint8 curPos = 0u;
                          /* No centroid at the Start */
                          uint8 curCntrdSize = 0u;
                          uint8 curCtrdStartPos = 0xFFu;
                          /* The biggset centroid is zero */
                          uint8 biggestCtrdSize = 0u;
                          uint8 biggestCtrdStartPos = 0u;
                      #endif
 904   1              uint8 maximum = 0xFFu;
 905   1              uint8 temp = 0u;
 906   1              uint8 *startOfSlider = &CapSense_SensorSignal[offset]; 
 907   1      
 908   1              #if (CapSense_IS_DIPLEX_SLIDER)        
                          if(diplex != 0u)
                          {
                              /* Initialize */
                              i = 0u;
                              
                              /* Make slider x2 as Diplexed */
                              count <<= 1u;
                              while(1u)
                              { 
                                  if (startOfSlider[curPos] > 0u)    /* Looking for centroids */
                                  {
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 16  

                                      if (curCtrdStartPos == 0xFFu)
                                      {
                                          /* Start of centroid */
                                          curCtrdStartPos = i;
                                          curCntrdSize++;
                                      }
                                      else
                                      {
                                          curCntrdSize++;
                                      }
                                  }
                                  else   /* Select the bigest and indicate zero start */
                                  {          
                                      if(curCntrdSize > 0)
                                      {
                                          /* We are in the end of current */
                                          if(curCntrdSize > biggestCtrdSize)
                                          {
                                              biggestCtrdSize = curCntrdSize;
                                              biggestCtrdStartPos = curCtrdStartPos;
                                          }
                                          
                                          curCntrdSize = 0u;
                                          curCtrdStartPos = 0xFFu;
                                      }
                                  }
                                  
                                  i++; 
                                  curPos = diplex[i];
                                  if(i == count)
                                  {
                                      break;
                                  }            
                              }
                                  
                                  /* Find the biggest centroid if two are the same size, last one wins
                                     We are in the end of current */
                              if (curCntrdSize >= biggestCtrdSize) 
                              {
                                  biggestCtrdSize = curCntrdSize;
                                  biggestCtrdStartPos = curCtrdStartPos;
                              }
                          }
                          else
                          {
                              /* Without diplexing */ 
                              biggestCtrdSize = count;
                          }
                                      
              
                          /* Check centroid size */
                          #if (CapSense_IS_NON_DIPLEX_SLIDER)
                              if((biggestCtrdSize >= 2u) || ((biggestCtrdSize == 1u) && (diplex == 0u)))
                          #else                    
                              if(biggestCtrdSize >= 2u)
                          #endif
                              {
                                  for (i = biggestCtrdStartPos; i < (biggestCtrdStartPos + biggestCtrdSize); i++)
                                  {
                                      #if (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER)                  
             -  
                                          if (diplex == 0u)
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 17  

                                          {
                                              curPos = i;
                                          }
                                          else
                                          {
                                              curPos = diplex[i];
                                          }                    
                                      #elif (CapSense_IS_DIPLEX_SLIDER)                    
                                          curPos = diplex[i];                    
                                      #endif
                                      /* Looking for the grater element within centroid */
                                      if(startOfSlider[curPos] > fingerThreshold)
                                      {
                                          if(startOfSlider[curPos] > temp)
                                          {
                                              maximum = i;
                                              temp = startOfSlider[curPos];
                                          }
                                      }
                                  }
                              } 
                      #else
1003   1                  for (i = 0u; i < count; i++)
1004   1                  {                      
1005   2                      /* Looking for the grater element within centroid */
1006   2                      if(startOfSlider[i] > fingerThreshold)
1007   2                      {
1008   3                          if(startOfSlider[i] > temp)
1009   3                          {
1010   4                              maximum = i;
1011   4                              temp = startOfSlider[i];
1012   4                          }
1013   3                      }
1014   2                  }    
1015   1              #endif
1016   1              return (maximum);
1017   1          }
1018              
1019              
1020              /*******************************************************************************
1021              * Function Name: CapSense_CalcCentroid
1022              ********************************************************************************
1023              *
1024              * Summary:
1025              *  Returns position value calculated accoring index of maximum element and API
1026              *  resolution.
1027              *
1028              * Parameters:
1029              *  type:  widget type.
1030              *  diplex:  pointer to diplex table.
1031              *  maximum:  Index of maximum element within centroid.
1032              *  offset:   Start index of cetroid in CapSense_SensorSignal[] array.
1033              *  count:    Number of elements within centroid.
1034              *  resolution:  multiplicator calculated according to centroid type and
1035              *  API resolution.
1036              *  noiseThreshold:  Noise threshould.
1037              * 
1038              * Return:
1039              *  Returns position value of the slider.
1040              * 
1041              *
1042              * Reentrant:
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 18  

1043              *  No.
1044              *
1045              *******************************************************************************/
1046              uint8 CapSense_CalcCentroid(uint8 maximum, uint8 offset, uint8 count, uint16 resolution, uint8 noiseTh
             -reshold)
1047              {
1048   1              #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT > 0u))        
             -        
1049   1                  uint8 posPrev;
1050   1                  uint8 posNext;
1051   1              #endif
1052   1                     
1053   1              #if (CapSense_IS_DIPLEX_SLIDER)                
                          uint8 pos;
                      #endif
1056   1      
1057   1              uint8 position;
1058   1              int32 numerator;
1059   1              int32 denominator;
1060   1              uint8 *startOfSlider = &CapSense_SensorSignal[offset];
1061   1                          
1062   1              #if (CapSense_ADD_SLIDER_TYPE)
                          if(type == CapSense_TYPE_RADIAL_SLIDER)
                          {
                      #endif
1066   1      
1067   1                  #if (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)                
                              /* Copy Signal for found centriod */
                              CapSense_centroid[CapSense_POS] = startOfSlider[maximum];
                               
                              /* Check borders for ROTARY Slider */
                              if (maximum == 0u)                   /* Start of centroid */
                              { 
                                  CapSense_centroid[CapSense_POS_PREV] = startOfSlider[count - 1u];
                                  CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[maximum + 1u];
                              }
                              else if (maximum == (count - 1u))    /* End of centroid */
                              {
                                  CapSense_centroid[CapSense_POS_PREV] = startOfSlider[maximum - 1u];
                                  CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[0u];
                              }
                              else                                /* Not first Not last */
                              {
                                  CapSense_centroid[CapSense_POS_PREV] = startOfSlider[maximum - 1u];
                                  CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[maximum + 1u];
                              }
                          #endif
1088   1      
1089   1              #if (CapSense_ADD_SLIDER_TYPE)
                          }
                          else
                          {
                      #endif
1094   1      
1095   1                  #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT > 0u))
1096   1                      #if (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER)                    
                                  /* Calculate next and previous near to maximum */
                                  if(diplex == 0u)
                                  {
                                      pos     = maximum;
                                      posPrev = maximum - 1u;
                                      posNext = maximum + 1u; 
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 19  

                                  }
                                  else
                                  {
                                      pos     = diplex[maximum];
                                      posPrev = diplex[maximum - 1u];
                                      posNext = diplex[maximum + 1u];
                                      count <<= 1u;
                                  }                    
                              #elif (CapSense_IS_DIPLEX_SLIDER)
                                  /* Calculate next and previous near to maximum */
                                  pos     = diplex[maximum];
                                  posPrev = diplex[maximum - 1u];
                                  posNext = diplex[maximum + 1u];
                                  count <<= 1u;                    
                              #else                    
1118   1                          /* Calculate next and previous near to maximum */
1119   1                          posPrev = maximum - 1u;
1120   1                          posNext = maximum + 1u; 
1121   1                      #endif
1122   1                              
1123   1                      /* Copy Signal for found centriod */
1124   1                      #if (CapSense_IS_DIPLEX_SLIDER)
                                  CapSense_centroid[CapSense_POS] = startOfSlider[pos];
                              #else
1127   1                          CapSense_centroid[CapSense_POS] = startOfSlider[maximum];
1128   1                      #endif
1129   1                          
1130   1                      /* Check borders for LINEAR Slider */
1131   1                      if (maximum == 0u)                   /* Start of centroid */
1132   1                      { 
1133   2                          CapSense_centroid[CapSense_POS_PREV] = 0u;
1134   2                          CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[posNext];
1135   2                      }
1136   1                      else if (maximum == ((count) - 1u)) /* End of centroid */
1137   1                      {
1138   2                          CapSense_centroid[CapSense_POS_PREV] = startOfSlider[posPrev];
1139   2                          CapSense_centroid[CapSense_POS_NEXT] = 0u;
1140   2                      }
1141   1                      else                                /* Not first Not last */
1142   1                      {
1143   2                          CapSense_centroid[CapSense_POS_PREV] = startOfSlider[posPrev];
1144   2                          CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[posNext];
1145   2                      }
1146   1                  #endif
1147   1      
1148   1              #if (CapSense_ADD_SLIDER_TYPE)
                          }
                      #endif
1151   1          
1152   1              /* Subtract noiseThreshold */
1153   1              if(CapSense_centroid[CapSense_POS_PREV] > noiseThreshold)
1154   1              {
1155   2                  CapSense_centroid[CapSense_POS_PREV] -= noiseThreshold;
1156   2              }
1157   1              else
1158   1              {
1159   2                  CapSense_centroid[CapSense_POS_PREV] = 0u;
1160   2              }
1161   1              
1162   1              /* Maximum always grater than fingerThreshold, so grate than noiseThreshold */
1163   1              CapSense_centroid[CapSense_POS] -= noiseThreshold;
1164   1              
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 20  

1165   1              /* Subtract noiseThreshold */
1166   1              if(CapSense_centroid[CapSense_POS_NEXT] > noiseThreshold)
1167   1              {
1168   2                  CapSense_centroid[CapSense_POS_NEXT] -= noiseThreshold;
1169   2              }
1170   1              else
1171   1              {
1172   2                  CapSense_centroid[CapSense_POS_NEXT] = 0u;
1173   2              }
1174   1              
1175   1              
1176   1              /* Si+1 - Si-1 */
1177   1              numerator = (int32) CapSense_centroid[CapSense_POS_NEXT] - 
1178   1                          (int32) CapSense_centroid[CapSense_POS_PREV];
1179   1              
1180   1              /* Si+1 + Si + Si-1 */
1181   1              denominator = (int32) CapSense_centroid[CapSense_POS_PREV] + 
1182   1                            (int32) CapSense_centroid[CapSense_POS] + 
1183   1                            (int32) CapSense_centroid[CapSense_POS_NEXT];
1184   1              
1185   1              /* (numerator/denominator) + maximum */
1186   1              denominator = (numerator << 8u)/denominator + ((uint16) maximum << 8u);
1187   1              
1188   1              #if(CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
                          /* Only required for RADIAL Slider */
                          if(denominator < 0)
                          {
                              denominator += ((uint16) count << 8u);
                          }
                      #endif
1195   1              
1196   1              denominator *= resolution;
1197   1              
1198   1              /* Round the relust and put it to uint8 */
1199   1              position = ((uint8) HI16(denominator + CapSense_CENTROID_ROUND_VALUE));
1200   1      
1201   1              return (position);
1202   1          }    
1203          #endif
1204          
1205          
1206          #if(CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u)
1207              /*******************************************************************************
1208              * Function Name: CapSense_GetCentroidPos
1209              ********************************************************************************
1210              *
1211              * Summary:
1212              *  Checks the CapSense_Signal[ ] array for a centroid within
1213              *  slider specified range. The centroid position is calculated to the resolution
1214              *  specified in the CapSense customizer. The position filters are applied to the
1215              *  result if enabled.
1216              *
1217              * Parameters:
1218              *  widget:  Widget number.
1219              *  For every linear slider widget there are defines in this format:
1220              *  #define CapSense_LS__"widget_name"            5
1221              * 
1222              * Return:
1223              *  Returns position value of the linear slider.
1224              *
1225              * Side Effects:
1226              *  If any sensor within the slider widget is active, the function returns values
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 21  

1227              *  from zero to the API resolution value set in the CapSense customizer. If no
1228              *  sensors are active, the function returns 0xFFFF. If an error occurs during
1229              *  execution of the centroid/diplexing algorithm, the function returns 0xFFFF.
1230              *  There are no checks of widget type argument provided to this function.
1231              *  The unproper widget type provided will cause unexpected position calculations.
1232              *
1233              * Note:
1234              *  If noise counts on the slider segments are greater than the noise
1235              *  threshold, this subroutine may generate a false centroid result. The noise
1236              *  threshold should be set carefully (high enough above the noise level) so
1237              *  that noise will not generate a false centroid.
1238              *
1239              * Reentrant:
1240              *  No.
1241              *
1242              *******************************************************************************/
1243              uint16 CapSense_GetCentroidPos(uint8 widget)
1244              {
1245   1              #if (CapSense_IS_DIPLEX_SLIDER)
                          const uint8 CYCODE *diplex;
                      #endif
1248   1                      
1249   1              #if (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
                          uint8 posIndex;
                          uint8 firstTimeIndex = CapSense_posFiltersData[widget];
                          uint8 posFiltersMask = CapSense_posFiltersMask[widget];  
              
                      #endif
1255   1              #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1256   1                   (0u != (CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
                          uint8 tempPos;
                      #endif
1259   1      
1260   1              uint8 maximum;
1261   1              uint16 position;
1262   1              uint8 offset = CapSense_rawDataIndex[widget];
1263   1              uint8 count = CapSense_numberOfSensors[widget];
1264   1                              
1265   1              #if (CapSense_IS_DIPLEX_SLIDER)
                          if(widget < CapSense_TOTAL_DIPLEXED_SLIDERS_COUNT)
                          {
                              maximum = CapSense_diplexTable[widget];
                              diplex = &CapSense_diplexTable[maximum];
                          }
                          else
                          {
                              diplex = 0u;
                          }
                      #endif
1276   1      
1277   1              /* Find Maximum within centroid */      
1278   1              #if (CapSense_IS_DIPLEX_SLIDER)        
                          maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], diplex);      
             -  
                      #else
1281   1                  maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
1282   1              #endif
1283   1      
1284   1              if (maximum != 0xFFu)
1285   1              {
1286   2                  /* Calculate centroid */
1287   2                  position = (uint16) CapSense_CalcCentroid(maximum, 
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 22  

1288   2                               offset, count, CapSense_centroidMult[widget], CapSense_noiseThreshold[widget]);
1289   2      
1290   2                  #if (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
                              /* Check if this linear slider has enabled filters */
                              if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
                              {
                                  /* Caluclate position to store filters data */
                                  posIndex  = firstTimeIndex + 1u;
                                  
                                  if (0u == CapSense_posFiltersData[firstTimeIndex])
                                  {
                                      /* Init filters */
                                      CapSense_posFiltersData[posIndex] = (uint8) position;
                                      #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) |
             -| \
                                           (0u != (CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
             -))
                                          if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER)) || 
                                               (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
                                          {
                                              CapSense_posFiltersData[posIndex + 1u] = (uint8) position;
                                          }
                                      #endif
                                      
                                      CapSense_posFiltersData[firstTimeIndex] = 1u;
                                  }
                                  else
                                  {
                                      /* Do filtering */
                                      #if (0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))   
             -                 
                                          if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
                                          {
                                              tempPos = (uint8) position;
                                              position = CapSense_MedianFilter(position, CapSense_posFiltersData[posInde
             -x], CapSense_posFiltersData[posIndex + 1u]);
                                              CapSense_posFiltersData[posIndex + 1u] = CapSense_posFiltersData[posIndex]
             -;
                                              CapSense_posFiltersData[posIndex] = tempPos;
                                          }
                                      #endif
              
                                      #if (0u != (CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
             -                        
                                          if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) 
                                          {
                                              tempPos = (uint8) position;
                                              position = CapSense_AveragingFilter(position, CapSense_posFiltersData[posI
             -ndex], CapSense_posFiltersData[posIndex + 1u]);
                                              CapSense_posFiltersData[posIndex + 1u] = CapSense_posFiltersData[posIndex]
             -;
                                              CapSense_posFiltersData[posIndex] = tempPos;
                                          }
                                      #endif
              
                                      #if (0u != (CapSense_IIR2_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) 
                                          if (0u != (posFiltersMask & CapSense_IIR2_FILTER)) 
                                          {
                                              position = CapSense_IIR2Filter(position, CapSense_posFiltersData[posIndex]
             -);
                                              CapSense_posFiltersData[posIndex] = (uint8) position;
                                          }
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 23  

                                      #endif
              
                                      #if (0u != (CapSense_IIR4_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
                                          {
                                              position = CapSense_IIR4Filter(position, CapSense_posFiltersData[posIndex]
             -);
                                              CapSense_posFiltersData[posIndex] = (uint8) position;
                                          }                                
                                      #endif
              
                                      #if (0u != (CapSense_JITTER_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))   
             -                     
                                          if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
                                          {
                                              position = CapSense_JitterFilter(position, CapSense_posFiltersData[posInde
             -x]);
                                              CapSense_posFiltersData[posIndex] = (uint8) position;
                                          }
                                      #endif
                                  }
                              }
                          #endif
1361   2      
1362   2              }
1363   1              else
1364   1              {
1365   2                  /* The maximum didn't find */
1366   2                  position = 0xFFFFu;
1367   2      
1368   2                  #if(0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
                              /* Reset the filters */
                              if(0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
                              {
                                  CapSense_posFiltersData[firstTimeIndex] = 0u;
                              }
                          #endif
1375   2              }
1376   1      
1377   1              
1378   1              return (position);
1379   1          }
1380          #endif
1381          
1382          
1383          #if(CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
                  /*******************************************************************************
                  * Function Name: CapSense_GetRadialCentroidPos
                  ********************************************************************************
                  *
                  * Summary:
                  *  Checks the CapSense_Signal[ ] array for a centroid within
                  *  slider specified range. The centroid position is calculated to the resolution
                  *  specified in the CapSense customizer. The position filters are applied to the
                  *  result if enabled.
                  *
                  * Parameters:
                  *  widget:  Widget number.
                  *  For every radial slider widget there are defines in this format:
                  *  #define CapSense_RS_"widget_name"            5
                  * 
                  * Return:
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 24  

                  *  Returns position value of the radial slider.
                  *
                  * Side Effects:
                  *  If any sensor within the slider widget is active, the function returns values
                  *  from zero to the API resolution value set in the CapSense customizer. If no
                  *  sensors are active, the function returns 0xFFFF.
                  *  There are no checks of widget type argument provided to this function.
                  *  The unproper widget type provided will cause unexpected position calculations.
                  *
                  * Note:
                  *  If noise counts on the slider segments are greater than the noise
                  *  threshold, this subroutine may generate a false centroid result. The noise
                  *  threshold should be set carefully (high enough above the noise level) so 
                  *  that noise will not generate a false centroid.
                  *
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                   uint16 CapSense_GetRadialCentroidPos(uint8 widget)
                  {
                      #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
                          uint8 posIndex;
                          uint8 firstTimeIndex = CapSense_posFiltersData[widget];
                          uint8 posFiltersMask = CapSense_posFiltersMask[widget]; 
              
                      #endif
                      #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
                           (0u != (CapSense_AVERAGING_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
                          uint8 tempPos;
                      #endif
              
                      uint8 maximum;
                      uint16 position;
                      uint8 offset = CapSense_rawDataIndex[widget];
                      uint8 count = CapSense_numberOfSensors[widget];
                      
                      /* Find Maximum within centroid */        
                      #if (CapSense_IS_DIPLEX_SLIDER)
                          maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], 0u);
                      #else
                          maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
                      #endif
                      
                      if (maximum != 0xFFu)
                      {
                          /* Calculate centroid */
                          position = (uint16) CapSense_CalcCentroid(maximum, 
                                       offset, count, CapSense_centroidMult[widget], CapSense_noiseThreshold[widget]);
              
                          #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
                              /* Check if this Radial slider has enabled filters */
                              if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
                              {
                                  /* Caluclate position to store filters data */
                                  posIndex  = firstTimeIndex + 1u;
                                  
                                  if (0u == CapSense_posFiltersData[firstTimeIndex])
                                  {
                                      /* Init filters */
                                      CapSense_posFiltersData[posIndex] = (uint8) position;
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 25  

                                      #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) |
             -| \
                                           (0u != (CapSense_AVERAGING_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
             -))
                                          if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))  || 
                                               (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
                                          {
                                              CapSense_posFiltersData[posIndex + 1u] = (uint8) position;
                                          }
                                      #endif
                                      
                                      CapSense_posFiltersData[firstTimeIndex] = 1u;
                                  }
                                  else
                                  {
                                      /* Do filtering */
                                      #if (0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
                                          {
                                              tempPos = (uint8) position;
                                              position = CapSense_MedianFilter(position,CapSense_posFiltersData[posIndex
             -], 
                                                CapSense_posFiltersData[posIndex + 1u]);
                                              CapSense_posFiltersData[posIndex + 1u] = CapSense_posFiltersData[posIndex]
             -;
                                              CapSense_posFiltersData[posIndex] = tempPos;
                                          }
                                      #endif
              
                                      #if (0u != (CapSense_AVERAGING_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER))
                                          {
                                              tempPos = (uint8) position;
                                              position = CapSense_AveragingFilter(position, CapSense_posFiltersData[posI
             -ndex], 
                                                CapSense_posFiltersData[posIndex + 1u]);
                                              CapSense_posFiltersData[posIndex + 1u] = CapSense_posFiltersData[posIndex]
             -;
                                              CapSense_posFiltersData[posIndex] = tempPos;
                                          }
                                      #endif
              
                                      #if (0u != (CapSense_IIR2_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_IIR2_FILTER))
                                          {
                                              position = CapSense_IIR2Filter(position, CapSense_posFiltersData[posIndex]
             -);
                                              CapSense_posFiltersData[posIndex] = (uint8) position;
                                          }
                                      #endif
              
                                      #if (0u != (CapSense_IIR4_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
                                          {
                                              position = CapSense_IIR4Filter(position, CapSense_posFiltersData[posIndex]
             -);
                                              CapSense_posFiltersData[posIndex] = (uint8) position;
                                          }
                                      #endif
              
                                      #if (0u != (CapSense_JITTER_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 26  

                                          {
                                              position = CapSense_JitterFilter(position, CapSense_posFiltersData[posInde
             -x]);
                                              CapSense_posFiltersData[posIndex] = (uint8) position;
                                          }
                                      #endif
                                  }
                              }
                          #endif
              
                      }
                      else
                      {
                          /* The maximum didn't find */
                          position = 0xFFFFu;
              
                          #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
                              /* Reset the filters */
                              if((posFiltersMask & CapSense_ANY_POS_FILTER) != 0u)
                              {
                                  CapSense_posFiltersData[firstTimeIndex] = 0u;
                              }
                          #endif
                      }
                      
                      return (position);
                  }
              #endif
1543          
1544          
1545          #if(CapSense_TOTAL_TOUCH_PADS_COUNT > 0u)
                  /*******************************************************************************
                  * Function Name: CapSense_GetTouchCentroidPos
                  ********************************************************************************
                  *
                  * Summary:
                  *  If a finger is present on touch pad, this function calculates the X and Y
                  *  position of the finger by calculating the centroids within touch pad specified
                  *  range. The X and Y positions are calculated to the API resolutions set in the
                  *  CapSense customizer. Returns a 1 if a finger is on the touchpad.
                  *  The position filter is applied to the result if enabled.
                  *  This function is available only if a touch pad is defined by the CapSense
                  *  customizer.
                  *
                  * Parameters:
                  *  widget:  Widget number. 
                  *  For every touchpad widget there are defines in this format:
                  *  #define CapSense_TP_"widget_name"            5
                  *
                  *  pos:     Pointer to the array of two uint16 elements, where result
                  *  result of calculation of X and Y position are stored.
                  *  pos[0u]  - position of X
                  *  pos[1u]  - position of Y
                  *
                  * Return:
                  *  Returns a 1 if a finger is on the touch pad, 0 - if not.
                  *
                  * Side Effects:
                  *   There are no checks of widget type argument provided to this function.
                  *   The unproper widget type provided will cause unexpected position
                  *   calculations.
                  *
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 27  

                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                  uint8 CapSense_GetTouchCentroidPos(uint8 widget, uint16* pos)
                  {
                      #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
                          uint8 posXIndex;
                          uint8 posYIndex;
                          uint8 firstTimeIndex = CapSense_posFiltersData[widget];
                          uint8 posFiltersMask = CapSense_posFiltersMask[widget];
                      #endif
                      #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
                           (0u != (CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
                          uint16 tempPos;
                      #endif
              
                      uint8 MaxX;
                      uint8 MaxY;
                      uint8 posX;
                      uint8 posY;
                      uint8 touch = 0u;
                      uint8 offset = CapSense_rawDataIndex[widget];
                      uint8 count = CapSense_numberOfSensors[widget];
                      
                      /* Find Maximum within X centroid */
                      #if (CapSense_IS_DIPLEX_SLIDER)
                          MaxX = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], 0u);
                      #else
                          MaxX = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
                      #endif
              
                      if (MaxX != 0xFFu)
                      {
                          offset = CapSense_rawDataIndex[widget + 1u];
                          count = CapSense_numberOfSensors[widget + 1u];
              
                          /* Find Maximum within Y centroid */
                          #if (CapSense_IS_DIPLEX_SLIDER)
                              MaxY = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget + 1u], 0u);
                          #else
                              MaxY = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget + 1u]);
                          #endif
              
                          if (MaxY != 0xFFu)
                          {
                              /* X and Y maximums are found = true touch */
                              touch = 1u;
                              
                              /* Calculate Y centroid */
                              posY = CapSense_CalcCentroid(MaxY, offset, count, 
                                          CapSense_centroidMult[widget + 1u], CapSense_noiseThreshold[widget + 1u]);
                              
                              /* Calculate X centroid */
                              offset = CapSense_rawDataIndex[widget];
                              count = CapSense_numberOfSensors[widget];
                              
                              posX = CapSense_CalcCentroid(MaxX, offset, count, 
                                          CapSense_centroidMult[widget],CapSense_noiseThreshold[widget]);
                  
                              #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
                                  /* Check if this TP has enabled filters */
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 28  

                                  if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
                                  {
                                      /* Caluclate position to store filters data */
                                      posXIndex  = firstTimeIndex + 1u;
                                      posYIndex  = CapSense_posFiltersData[widget + 1u];
                                      
                                      if (0u == CapSense_posFiltersData[firstTimeIndex])
                                      {
                                          /* Init filters */
                                          CapSense_posFiltersData[posXIndex] = posX;
                                          CapSense_posFiltersData[posYIndex] = posY;
                                          #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)) |
             -| \
                                               (0u != (CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)
             -))
                                              if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER)) || 
                                                   (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
                                              {
                                                  CapSense_posFiltersData[posXIndex + 1u] = posX;
                                                  CapSense_posFiltersData[posYIndex + 1u] = posY;
                                              }
                                          #endif
                                          
                                          CapSense_posFiltersData[firstTimeIndex] = 1u;
                                      }
                                      else
                                      {
                                          /* Do filtering */
                                          #if (0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                              if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
                                              {
                                                  tempPos = posX;
                                                  posX = (uint8) CapSense_MedianFilter(posX, CapSense_posFiltersData[pos
             -XIndex], 
                                                    CapSense_posFiltersData[posXIndex + 1u]);
                                                  CapSense_posFiltersData[posXIndex + 1u] = CapSense_posFiltersData[posX
             -Index];
                                                  CapSense_posFiltersData[posXIndex] = tempPos;
                                                  
                                                  tempPos = posY;
                                                  posY = (uint8) CapSense_MedianFilter(posY, CapSense_posFiltersData[pos
             -YIndex], 
                                                    CapSense_posFiltersData[posYIndex + 1u]);
                                                  CapSense_posFiltersData[posYIndex + 1u] = CapSense_posFiltersData[posY
             -Index];
                                                  CapSense_posFiltersData[posYIndex] = tempPos;
                                              }
                                              
                                          #endif
              
                                          #if (0u != (CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                              if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER))
                                              {
                                                  tempPos = posX;
                                                  posX = (uint8) CapSense_AveragingFilter(posX, CapSense_posFiltersData[
             -posXIndex], 
                                                    CapSense_posFiltersData[posXIndex + 1u]);
                                                  CapSense_posFiltersData[posXIndex + 1u] = CapSense_posFiltersData[posX
             -Index];
                                                  CapSense_posFiltersData[posXIndex] = tempPos;
                                                  
                                                  tempPos = posY;
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 29  

                                                  posY = (uint8) CapSense_AveragingFilter(posY, CapSense_posFiltersData[
             -posYIndex], 
                                                    CapSense_posFiltersData[posYIndex + 1u]);
                                                  CapSense_posFiltersData[posYIndex + 1u] = CapSense_posFiltersData[posY
             -Index];
                                                  CapSense_posFiltersData[posYIndex] = tempPos;
                                              }
                                              
                                          #endif
              
                                          #if (0u != (CapSense_IIR2_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                              if (0u != (posFiltersMask & CapSense_IIR2_FILTER))
                                              {
                                                  posX = (uint8) CapSense_IIR2Filter(posX, CapSense_posFiltersData[posXI
             -ndex]);
                                                  CapSense_posFiltersData[posXIndex] = posX;
                                                  
                                                  posY = (uint8) CapSense_IIR2Filter(posY, CapSense_posFiltersData[posYI
             -ndex]);
                                                  CapSense_posFiltersData[posYIndex] = posY;
                                              }
                                              
                                          #endif
              
                                          #if (0u != (CapSense_IIR4_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                              if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
                                              {
                                                  posX = (uint8) CapSense_IIR4Filter(posX, CapSense_posFiltersData[posXI
             -ndex]);
                                                  CapSense_posFiltersData[posXIndex] = posX;
                                                  
                                                  posY = (uint8) CapSense_IIR4Filter(posY, CapSense_posFiltersData[posYI
             -ndex]);
                                                  CapSense_posFiltersData[posYIndex] = posY;
                                              }
                                              
                                          #endif
              
                                          #if (0u != (CapSense_JITTER_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                              if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
                                                  {
                                                      posX = (uint8) CapSense_JitterFilter(posX, CapSense_posFiltersData
             -[posXIndex]);
                                                      CapSense_posFiltersData[posXIndex] = posX;
                                                      
                                                      posY = (uint8) CapSense_JitterFilter(posY, CapSense_posFiltersData
             -[posYIndex]);
                                                      CapSense_posFiltersData[posYIndex] = posY;
                                                  }
                                          #endif
                                      }
                                  }
                              #endif
              
                              /* Save positions */
                              pos[0u] = posX;
                              pos[1u] = posY;
                          }
                      }
              
                      #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
                          if(touch == 0u)
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 30  

                          {
                              /* Reset the filters */
                              if ((posFiltersMask & CapSense_ANY_POS_FILTER) != 0u)
                              {
                                  CapSense_posFiltersData[firstTimeIndex] = 0u;
                              }
                          }
                      #endif
                      
                      return (touch);
                  }
              #endif
1759          
1760          
1761          #if ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) || \
1762                (CapSense_POS_FILTERS_MASK & CapSense_MEDIAN_FILTER) )
                  /*******************************************************************************
                  * Function Name: CapSense_MedianFilter
                  ********************************************************************************
                  *
                  * Summary:
                  *  Median filter function. 
                  *  The median filter looks at the three most recent samples and reports the 
                  *  median value.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *  x3:  Before previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_MedianFilter(uint16 x1, uint16 x2, uint16 x3) \
                                                       
                  {
                      uint16 tmp;
                      
                      if (x1 > x2)
                      {
                          tmp = x2;
                          x2 = x1;
                          x1 = tmp;
                      }
                      
                      if (x2 > x3)
                      {
                          x2 = x3;
                      }
                      
                      return ((x1 > x2) ? x1 : x2);
                  }
              #endif /* End CapSense_RAW_FILTER_MASK && CapSense_POS_FILTERS_MASK */
1801          
1802          
1803          #if ( (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) || \
1804                (CapSense_POS_FILTERS_MASK & CapSense_AVERAGING_FILTER) )
                  /*******************************************************************************
                  * Function Name: CapSense_AveragingFilter
                  ********************************************************************************
                  *
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 31  

                  * Summary:
                  *  Averaging filter function.
                  *  The averaging filter looks at the three most recent samples of position and
                  *  reports the averaging value.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *  x3:  Before previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_AveragingFilter(uint16 x1, uint16 x2, uint16 x3) \
                                                          
                  {
                      uint32 tmp = ((uint32)x1 + (uint32)x2 + (uint32)x3) / 3u;
                      
                      return ((uint16) tmp);
                  }
              #endif /* End CapSense_RAW_FILTER_MASK && CapSense_POS_FILTERS_MASK */
1831          
1832          
1833          #if ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) || \
1834                (CapSense_POS_FILTERS_MASK & CapSense_IIR2_FILTER) )
                  /*******************************************************************************
                  * Function Name: CapSense_IIR2Filter
                  ********************************************************************************
                  *
                  * Summary:
                  *  IIR1/2 filter function. IIR1/2 = 1/2current + 1/2previous.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_IIR2Filter(uint16 x1, uint16 x2) \
                                                     
                  {
                      uint32 tmp;
                      
                      /* IIR = 1/2 Current Value+ 1/2 Previous Value */
                      tmp = (uint32)x1 + (uint32)x2;
                      tmp >>= 1u;
                  
                      return ((uint16) tmp);
                  }
              #endif /* End CapSense_RAW_FILTER_MASK && CapSense_POS_FILTERS_MASK */
1862          
1863          
1864          #if ( (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER) || \
1865                (CapSense_POS_FILTERS_MASK & CapSense_IIR4_FILTER) )
                  /*******************************************************************************
                  * Function Name: CapSense_IIR4Filter
                  ********************************************************************************
                  *
                  * Summary:
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 32  

                  *  IIR1/4 filter function. IIR1/4 = 1/4current + 3/4previous.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_IIR4Filter(uint16 x1, uint16 x2) \
                                                     
                  {
                      uint32 tmp;
                      
                      /* IIR = 1/4 Current Value + 3/4 Previous Value */
                      tmp = (uint32)x1 + (uint32)x2;
                      tmp += ((uint32)x2 << 1u);
                      tmp >>= 2u;
                      
                      return ((uint16) tmp);
                  }
              #endif /* End CapSense_RAW_FILTER_MASK && CapSense_POS_FILTERS_MASK */
1894          
1895          
1896          #if ( (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) || \
1897                (CapSense_POS_FILTERS_MASK & CapSense_JITTER_FILTER) )
                  /*******************************************************************************
                  * Function Name: uint16 CapSense_JitterFilter
                  ********************************************************************************
                  *
                  * Summary:
                  *  Jitter filter function.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_JitterFilter(uint16 x1, uint16 x2) \
                                                       
                  {
                      if (x1 > x2)
                      {
                          x1--;
                      }
                      else
                      {
                          if (x1 < x2)
                          {
                              x1++;
                          }
                      }
                  
                      return x1;
                  }
              #endif /* End CapSense_RAW_FILTER_MASK && CapSense_POS_FILTERS_MASK */
1931          
1932          
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 33  

1933          #if (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)
                  /*******************************************************************************
                  * Function Name: CapSense_IIR8Filter
                  ********************************************************************************
                  *
                  * Summary:
                  *  IIR1/8 filter function. IIR1/8 = 1/8current + 7/8previous.
                  *  Only applies for raw data.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_IIR8Filter(uint16 x1, uint16 x2) \
                                                     
                  {
                      uint32 tmp;
                      
                      /* IIR = 1/8 Current Value + 7/8 Previous Value */
                      tmp = (uint32)x1;
                      tmp += (((uint32)x2 << 3u) - ((uint32)x2));
                      tmp >>= 3u;
                  
                      return ((uint16) tmp);
                  }
              #endif /* End (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER) */
1963          
1964          
1965          #if (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER)
                  /*******************************************************************************
                  * Function Name: CapSense_IIR16Filter
                  ********************************************************************************
                  *
                  * Summary:
                  *  IIR1/16 filter function. IIR1/16 = 1/16current + 15/16previous.
                  *  Only applies for raw data.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_IIR16Filter(uint16 x1, uint16 x2) \
                                                      
                  {
                      uint32 tmp;
                      
                      /* IIR = 1/16 Current Value + 15/16 Previous Value */
                      tmp = (uint32)x1;
                      tmp += (((uint32)x2 << 4u) - ((uint32)x2));
                      tmp >>= 4u;
                      
                      return ((uint16) tmp);
                  }
              #endif /* End (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER) */
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 34  

1995          
1996          
1997          #if (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)
              
                  /*******************************************************************************
                  * Function Name: CapSense_GetMatrixButtonPos
                  ********************************************************************************
                  *
                  * Summary:
                  *  Function calculates and returns touch position (column and row) for matrix
                  *  button widget.
                  *
                  * Parameters:
                  *  widget:  widget number;
                  *  pos:     pointer to an array of two uint8, where touch postion will be 
                  *           stored:
                  *           pos[0] - column position;
                  *           pos[1] - raw position.
                  *
                  * Return:
                  *  Returns 1 if row and column sensors of matrix button are active, 0 - in other
                  *  cases.
                  *
                  * Reentrant:
                  *  No
                  *
                  *******************************************************************************/
                  uint8 CapSense_GetMatrixButtonPos(uint8 widget, uint8* pos)
                  {
                      uint8 i;
                      uint16 row_sig_max = 0u;
                      uint16 col_sig_max = 0u;
                      uint8 row_ind = 0u;
                      uint8 col_ind = 0u;
              
                      if (CapSense_CheckIsWidgetActive(widget))
                      {
                          /* Find row number with maximal signal value */
                          for(i = CapSense_rawDataIndex[widget]; i < CapSense_rawDataIndex[widget] + \
                               CapSense_numberOfSensors[widget]; i++) 
                          {          
                              if (CapSense_SensorSignal[i] > col_sig_max)
                              {
                                  col_ind = i;
                                  col_sig_max = CapSense_SensorSignal[i];
                              }
                          }
              
                          /* Find row number with maximal signal value */
                          for(i = CapSense_rawDataIndex[widget+1u]; i < CapSense_rawDataIndex[widget+1u] + \
                               CapSense_numberOfSensors[widget+1u]; i++) 
                          {          
                              if (CapSense_SensorSignal[i] > row_sig_max)
                              {
                                  row_ind = i;
                                  row_sig_max = CapSense_SensorSignal[i];
                              }
                          }
              
                          if(col_sig_max >= CapSense_fingerThreshold[widget] && \
                             row_sig_max >= CapSense_fingerThreshold[widget+1u])
                          {
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 35  

                              pos[0u] = col_ind - CapSense_rawDataIndex[widget];
                              pos[1u] = row_ind - CapSense_rawDataIndex[widget+1u];
                              return 1u;
                          }
                      }
                      return 0u;
                  }
              
              #endif /* End (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) */
2066          
2067          /* [] END OF FILE */
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 36  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CapSense_BaseInit (BEGIN)
                                           ; SOURCE LINE # 182
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 183
                                           ; SOURCE LINE # 186
0005 900000      R     MOV     DPTR,#sensor
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      E     MOV     DPTR,#CapSense_widgetNumber
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#widget
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
0015 900000      R     MOV     DPTR,#sensor
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 25E0              ADD     A,ACC
001D 2400        E     ADD     A,#LOW CapSense_SensorRaw
001F F582              MOV     DPL,A
0021 E4                CLR     A
0022 3400        E     ADDC    A,#HIGH CapSense_SensorRaw
0024 F583              MOV     DPH,A
0026 E0                MOVX    A,@DPTR
0027 FE                MOV     R6,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B 900000      R     MOV     DPTR,#sensor
002E E0                MOVX    A,@DPTR
002F FD                MOV     R5,A
0030 ED                MOV     A,R5
0031 25E0              ADD     A,ACC
0033 2400        R     ADD     A,#LOW CapSense_SensorBaseline
0035 F582              MOV     DPL,A
0037 E4                CLR     A
0038 3400        R     ADDC    A,#HIGH CapSense_SensorBaseline
003A F583              MOV     DPH,A
003C EE                MOV     A,R6
003D F0                MOVX    @DPTR,A
003E A3                INC     DPTR
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
0041 900000      R     MOV     DPTR,#sensor
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 7400        R     MOV     A,#LOW CapSense_SensorBaselineLow
0048 2F                ADD     A,R7
0049 F582              MOV     DPL,A
004B E4                CLR     A
004C 3400        R     ADDC    A,#HIGH CapSense_SensorBaselineLow
004E F583              MOV     DPH,A
0050 E4                CLR     A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 37  

0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
0052 900000      R     MOV     DPTR,#sensor
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 7400        R     MOV     A,#LOW CapSense_SensorSignal
0059 2F                ADD     A,R7
005A F582              MOV     DPL,A
005C E4                CLR     A
005D 3400        R     ADDC    A,#HIGH CapSense_SensorSignal
005F F583              MOV     DPH,A
0061 E4                CLR     A
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
0063 900000      R     MOV     DPTR,#widget
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
0068 EF                MOV     A,R7
0069 D3                SETB    C
006A 9400              SUBB    A,#00H
006C 4022              JC      ?C0002
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
006E 900000      R     MOV     DPTR,#widget
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
0073 7400        R     MOV     A,#LOW CapSense_debounce
0075 2F                ADD     A,R7
0076 F582              MOV     DPL,A
0078 E4                CLR     A
0079 3400        R     ADDC    A,#HIGH CapSense_debounce
007B F583              MOV     DPH,A
007D E0                MOVX    A,@DPTR
007E FF                MOV     R7,A
007F 900000      R     MOV     DPTR,#widget
0082 E0                MOVX    A,@DPTR
0083 FE                MOV     R6,A
0084 7400        R     MOV     A,#LOW CapSense_debounceCounter+0FFFFH
0086 2E                ADD     A,R6
0087 F582              MOV     DPL,A
0089 E4                CLR     A
008A 3400        R     ADDC    A,#HIGH CapSense_debounceCounter+0FFFFH
008C F583              MOV     DPH,A
008E EF                MOV     A,R7
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 232
0090         ?C0002:
0090 22                RET     
             ; FUNCTION _CapSense_BaseInit (END)

             ; FUNCTION _CapSense_InitializeSensorBaseline (BEGIN)
                                           ; SOURCE LINE # 256
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 259
0005 900000      R     MOV     DPTR,#sensor
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 120000      E     LCALL   _CapSense_ScanSensor
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 38  

000D         ?C0003:
                                           ; SOURCE LINE # 260
000D 120000      E     LCALL   CapSense_IsBusy
0010 EF                MOV     A,R7
0011 70FA              JNZ     ?C0003
0013         ?C0004:
                                           ; SOURCE LINE # 264
0013 900000      R     MOV     DPTR,#sensor
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 120000      R     LCALL   _CapSense_BaseInit
                                           ; SOURCE LINE # 281
001B 22                RET     
             ; FUNCTION _CapSense_InitializeSensorBaseline (END)

             ; FUNCTION CapSense_InitializeAllBaselines (BEGIN)
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
                                           ; SOURCE LINE # 309
0000 900000      R     MOV     DPTR,#i
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005         ?C0006:
0005 900000      R     MOV     DPTR,#i
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 9407              SUBB    A,#07H
000E 5010              JNC     ?C0009
                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 311
0010 900000      R     MOV     DPTR,#i
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 120000      R     LCALL   _CapSense_InitializeSensorBaseline
                                           ; SOURCE LINE # 312
0018 900000      R     MOV     DPTR,#i
001B E0                MOVX    A,@DPTR
001C 04                INC     A
001D F0                MOVX    @DPTR,A
001E 80E5              SJMP    ?C0006
                                           ; SOURCE LINE # 313
0020         ?C0009:
0020 22                RET     
             ; FUNCTION CapSense_InitializeAllBaselines (END)

             ; FUNCTION CapSense_InitializeEnabledBaselines (BEGIN)
                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 337
                                           ; SOURCE LINE # 342
0000 120000      E     LCALL   CapSense_ScanEnabledWidgets
0003         ?C0010:
                                           ; SOURCE LINE # 343
0003 120000      E     LCALL   CapSense_IsBusy
0006 EF                MOV     A,R7
0007 70FA              JNZ     ?C0010
0009         ?C0011:
                                           ; SOURCE LINE # 345
0009 900000      R     MOV     DPTR,#i
000C E4                CLR     A
000D F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 39  

000E         ?C0012:
000E 900000      R     MOV     DPTR,#i
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 C3                CLR     C
0015 9407              SUBB    A,#07H
0017 506D              JNC     ?C0016
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 347
0019 900000      R     MOV     DPTR,#i
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E EF                MOV     A,R7
001F 13                RRC     A
0020 13                RRC     A
0021 13                RRC     A
0022 541F              ANL     A,#01FH
0024 FF                MOV     R7,A
0025 900000      R     MOV     DPTR,#pos
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 348
002A 900000      R     MOV     DPTR,#i
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 5407              ANL     A,#07H
0032 FF                MOV     R7,A
0033 7401              MOV     A,#01H
0035 A807              MOV     R0,AR7
0037 08                INC     R0
0038 8002              SJMP    ?C0083
003A         ?C0082:
003A C3                CLR     C
003B 33                RLC     A
003C         ?C0083:
003C D8FC              DJNZ    R0,?C0082
003E FF                MOV     R7,A
003F 900000      R     MOV     DPTR,#enMask
0042 EF                MOV     A,R7
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 351
0044 900000      R     MOV     DPTR,#pos
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 7400        E     MOV     A,#LOW CapSense_SensorEnableMask
004B 2F                ADD     A,R7
004C F582              MOV     DPL,A
004E E4                CLR     A
004F 3400        E     ADDC    A,#HIGH CapSense_SensorEnableMask
0051 F583              MOV     DPH,A
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 900000      R     MOV     DPTR,#enMask
0058 E0                MOVX    A,@DPTR
0059 FE                MOV     R6,A
005A EF                MOV     A,R7
005B 5E                ANL     A,R6
005C FF                MOV     R7,A
005D EF                MOV     A,R7
005E 7016              JNZ     ?C0015
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 40  

                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
0060 900000      R     MOV     DPTR,#i
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 EF                MOV     A,R7
0066 25E0              ADD     A,ACC
0068 2400        E     ADD     A,#LOW CapSense_SensorRaw
006A F582              MOV     DPL,A
006C E4                CLR     A
006D 3400        E     ADDC    A,#HIGH CapSense_SensorRaw
006F F583              MOV     DPH,A
0071 E4                CLR     A
0072 F0                MOVX    @DPTR,A
0073 A3                INC     DPTR
0074 E4                CLR     A
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 354
0076         ?C0015:
                                           ; SOURCE LINE # 357
0076 900000      R     MOV     DPTR,#i
0079 E0                MOVX    A,@DPTR
007A FF                MOV     R7,A
007B 120000      R     LCALL   _CapSense_BaseInit
                                           ; SOURCE LINE # 358
007E 900000      R     MOV     DPTR,#i
0081 E0                MOVX    A,@DPTR
0082 04                INC     A
0083 F0                MOVX    @DPTR,A
0084 8088              SJMP    ?C0012
                                           ; SOURCE LINE # 359
0086         ?C0016:
0086 22                RET     
             ; FUNCTION CapSense_InitializeEnabledBaselines (END)

             ; FUNCTION _CapSense_UpdateSensorBaseline (BEGIN)
                                           ; SOURCE LINE # 399
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 400
                                           ; SOURCE LINE # 404
0005 900000      R     MOV     DPTR,#sensor
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      E     MOV     DPTR,#CapSense_widgetNumber
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#widget
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 405
0015 900000      R     MOV     DPTR,#widget
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A 7400        R     MOV     A,#LOW CapSense_noiseThreshold
001C 2F                ADD     A,R7
001D F582              MOV     DPL,A
001F E4                CLR     A
0020 3400        R     ADDC    A,#HIGH CapSense_noiseThreshold
0022 F583              MOV     DPH,A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 41  

0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 900000      R     MOV     DPTR,#noiseThreshold
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 413
002B 900000      R     MOV     DPTR,#sensor
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 25E0              ADD     A,ACC
0033 2400        E     ADD     A,#LOW CapSense_SensorRaw
0035 F582              MOV     DPL,A
0037 E4                CLR     A
0038 3400        E     ADDC    A,#HIGH CapSense_SensorRaw
003A F583              MOV     DPH,A
003C E0                MOVX    A,@DPTR
003D FE                MOV     R6,A
003E A3                INC     DPTR
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 900000      R     MOV     DPTR,#filteredRawData
0044 EE                MOV     A,R6
0045 F0                MOVX    @DPTR,A
0046 A3                INC     DPTR
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 454
0049 900000      R     MOV     DPTR,#sensor
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 120000      E     LCALL   _CapSense_CalculateThresholds
                                           ; SOURCE LINE # 460
0051 900000      R     MOV     DPTR,#sensor
0054 E0                MOVX    A,@DPTR
0055 FF                MOV     R7,A
0056 EF                MOV     A,R7
0057 25E0              ADD     A,ACC
0059 2400        R     ADD     A,#LOW CapSense_SensorBaseline
005B F582              MOV     DPL,A
005D E4                CLR     A
005E 3400        R     ADDC    A,#HIGH CapSense_SensorBaseline
0060 F583              MOV     DPH,A
0062 E0                MOVX    A,@DPTR
0063 FE                MOV     R6,A
0064 A3                INC     DPTR
0065 E0                MOVX    A,@DPTR
0066 FF                MOV     R7,A
0067 900000      R     MOV     DPTR,#filteredRawData
006A E0                MOVX    A,@DPTR
006B FC                MOV     R4,A
006C A3                INC     DPTR
006D E0                MOVX    A,@DPTR
006E FD                MOV     R5,A
006F C3                CLR     C
0070 ED                MOV     A,R5
0071 9F                SUBB    A,R7
0072 EC                MOV     A,R4
0073 9E                SUBB    A,R6
0074 4035              JC      ?C0017
                                           ; SOURCE LINE # 461
                                           ; SOURCE LINE # 462
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 42  

0076 900000      R     MOV     DPTR,#sensor
0079 E0                MOVX    A,@DPTR
007A FF                MOV     R7,A
007B EF                MOV     A,R7
007C 25E0              ADD     A,ACC
007E 2400        R     ADD     A,#LOW CapSense_SensorBaseline
0080 F582              MOV     DPL,A
0082 E4                CLR     A
0083 3400        R     ADDC    A,#HIGH CapSense_SensorBaseline
0085 F583              MOV     DPH,A
0087 E0                MOVX    A,@DPTR
0088 FE                MOV     R6,A
0089 A3                INC     DPTR
008A E0                MOVX    A,@DPTR
008B FF                MOV     R7,A
008C 900000      R     MOV     DPTR,#filteredRawData
008F E0                MOVX    A,@DPTR
0090 FC                MOV     R4,A
0091 A3                INC     DPTR
0092 E0                MOVX    A,@DPTR
0093 FD                MOV     R5,A
0094 C3                CLR     C
0095 ED                MOV     A,R5
0096 9F                SUBB    A,R7
0097 FF                MOV     R7,A
0098 EC                MOV     A,R4
0099 9E                SUBB    A,R6
009A FE                MOV     R6,A
009B 900000      R     MOV     DPTR,#tempRaw
009E EE                MOV     A,R6
009F F0                MOVX    @DPTR,A
00A0 A3                INC     DPTR
00A1 EF                MOV     A,R7
00A2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 463
00A3 900000      R     MOV     DPTR,#widget
00A6 7401              MOV     A,#01H
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 464
00A9 8032              SJMP    ?C0018
00AB         ?C0017:
                                           ; SOURCE LINE # 466
                                           ; SOURCE LINE # 467
00AB 900000      R     MOV     DPTR,#sensor
00AE E0                MOVX    A,@DPTR
00AF FF                MOV     R7,A
00B0 EF                MOV     A,R7
00B1 25E0              ADD     A,ACC
00B3 2400        R     ADD     A,#LOW CapSense_SensorBaseline
00B5 F582              MOV     DPL,A
00B7 E4                CLR     A
00B8 3400        R     ADDC    A,#HIGH CapSense_SensorBaseline
00BA F583              MOV     DPH,A
00BC E0                MOVX    A,@DPTR
00BD FE                MOV     R6,A
00BE A3                INC     DPTR
00BF E0                MOVX    A,@DPTR
00C0 FF                MOV     R7,A
00C1 900000      R     MOV     DPTR,#filteredRawData
00C4 E0                MOVX    A,@DPTR
00C5 FC                MOV     R4,A
00C6 A3                INC     DPTR
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 43  

00C7 E0                MOVX    A,@DPTR
00C8 FD                MOV     R5,A
00C9 C3                CLR     C
00CA EF                MOV     A,R7
00CB 9D                SUBB    A,R5
00CC FF                MOV     R7,A
00CD EE                MOV     A,R6
00CE 9C                SUBB    A,R4
00CF FE                MOV     R6,A
00D0 900000      R     MOV     DPTR,#tempRaw
00D3 EE                MOV     A,R6
00D4 F0                MOVX    @DPTR,A
00D5 A3                INC     DPTR
00D6 EF                MOV     A,R7
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 468
00D8 900000      R     MOV     DPTR,#widget
00DB E4                CLR     A
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 469
00DD         ?C0018:
                                           ; SOURCE LINE # 471
00DD 900000      R     MOV     DPTR,#widget
00E0 E0                MOVX    A,@DPTR
00E1 FF                MOV     R7,A
00E2 EF                MOV     A,R7
00E3 7059              JNZ     ?C0019
00E5 900000      R     MOV     DPTR,#tempRaw
00E8 E0                MOVX    A,@DPTR
00E9 FE                MOV     R6,A
00EA A3                INC     DPTR
00EB E0                MOVX    A,@DPTR
00EC FF                MOV     R7,A
00ED D3                SETB    C
00EE EF                MOV     A,R7
00EF 9414              SUBB    A,#014H
00F1 EE                MOV     A,R6
00F2 9400              SUBB    A,#00H
00F4 4048              JC      ?C0019
                                           ; SOURCE LINE # 472
                                           ; SOURCE LINE # 473
00F6 900000      R     MOV     DPTR,#sensor
00F9 E0                MOVX    A,@DPTR
00FA FF                MOV     R7,A
00FB 7400        R     MOV     A,#LOW CapSense_LowBaselineResetCnt
00FD 2F                ADD     A,R7
00FE F582              MOV     DPL,A
0100 E4                CLR     A
0101 3400        R     ADDC    A,#HIGH CapSense_LowBaselineResetCnt
0103 F583              MOV     DPH,A
0105 E0                MOVX    A,@DPTR
0106 FF                MOV     R7,A
0107 EF                MOV     A,R7
0108 C3                CLR     C
0109 9405              SUBB    A,#05H
010B 401C              JC      ?C0020
                                           ; SOURCE LINE # 474
                                           ; SOURCE LINE # 475
010D 900000      R     MOV     DPTR,#sensor
0110 E0                MOVX    A,@DPTR
0111 FF                MOV     R7,A
0112 120000      R     LCALL   _CapSense_BaseInit
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 44  

                                           ; SOURCE LINE # 476
0115 900000      R     MOV     DPTR,#sensor
0118 E0                MOVX    A,@DPTR
0119 FF                MOV     R7,A
011A 7400        R     MOV     A,#LOW CapSense_LowBaselineResetCnt
011C 2F                ADD     A,R7
011D F582              MOV     DPL,A
011F E4                CLR     A
0120 3400        R     ADDC    A,#HIGH CapSense_LowBaselineResetCnt
0122 F583              MOV     DPH,A
0124 E4                CLR     A
0125 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 477
0126 020000      R     LJMP    ?C0022
0129         ?C0020:
                                           ; SOURCE LINE # 479
                                           ; SOURCE LINE # 480
0129 900000      R     MOV     DPTR,#sensor
012C E0                MOVX    A,@DPTR
012D FF                MOV     R7,A
012E 7400        R     MOV     A,#LOW CapSense_LowBaselineResetCnt
0130 2F                ADD     A,R7
0131 F582              MOV     DPL,A
0133 E4                CLR     A
0134 3400        R     ADDC    A,#HIGH CapSense_LowBaselineResetCnt
0136 F583              MOV     DPH,A
0138 E0                MOVX    A,@DPTR
0139 04                INC     A
013A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 482
013B 020000      R     LJMP    ?C0022
013E         ?C0019:
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 488
013E 900000      R     MOV     DPTR,#noiseThreshold
0141 E0                MOVX    A,@DPTR
0142 FF                MOV     R7,A
0143 7E00              MOV     R6,#00H
0145 900000      R     MOV     DPTR,#tempRaw
0148 E0                MOVX    A,@DPTR
0149 FC                MOV     R4,A
014A A3                INC     DPTR
014B E0                MOVX    A,@DPTR
014C FD                MOV     R5,A
014D D3                SETB    C
014E ED                MOV     A,R5
014F 9F                SUBB    A,R7
0150 EC                MOV     A,R4
0151 9E                SUBB    A,R6
0152 401F              JC      ?C0024
0154 900000      R     MOV     DPTR,#tempRaw
0157 E0                MOVX    A,@DPTR
0158 FE                MOV     R6,A
0159 A3                INC     DPTR
015A E0                MOVX    A,@DPTR
015B FF                MOV     R7,A
015C C3                CLR     C
015D EF                MOV     A,R7
015E 9414              SUBB    A,#014H
0160 EE                MOV     A,R6
0161 9400              SUBB    A,#00H
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 45  

0163 4003              JC      $ + 5H
0165 020000      R     LJMP    ?C0022
0168 900000      R     MOV     DPTR,#widget
016B E0                MOVX    A,@DPTR
016C FF                MOV     R7,A
016D EF                MOV     A,R7
016E 6003              JZ      $ + 5H
0170 020000      R     LJMP    ?C0022
0173         ?C0024:
                                           ; SOURCE LINE # 490
                                           ; SOURCE LINE # 493
0173 900000      R     MOV     DPTR,#sensor
0176 E0                MOVX    A,@DPTR
0177 FF                MOV     R7,A
0178 EF                MOV     A,R7
0179 25E0              ADD     A,ACC
017B 2400        R     ADD     A,#LOW CapSense_SensorBaseline
017D F582              MOV     DPL,A
017F E4                CLR     A
0180 3400        R     ADDC    A,#HIGH CapSense_SensorBaseline
0182 F583              MOV     DPH,A
0184 E0                MOVX    A,@DPTR
0185 FE                MOV     R6,A
0186 A3                INC     DPTR
0187 E0                MOVX    A,@DPTR
0188 FF                MOV     R7,A
0189 E4                CLR     A
018A FC                MOV     R4,A
018B FD                MOV     R5,A
018C 7808              MOV     R0,#08H
018E 120000      E     LCALL   ?C?LSHL
0191 900000      R     MOV     DPTR,#calc
0194 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 494
0197 900000      R     MOV     DPTR,#calc
019A 120000      E     LCALL   ?C?LLDXDATA0
019D 900000      R     MOV     DPTR,#sensor
01A0 E0                MOVX    A,@DPTR
01A1 FF                MOV     R7,A
01A2 7400        R     MOV     A,#LOW CapSense_SensorBaselineLow
01A4 2F                ADD     A,R7
01A5 F582              MOV     DPL,A
01A7 E4                CLR     A
01A8 3400        R     ADDC    A,#HIGH CapSense_SensorBaselineLow
01AA F583              MOV     DPH,A
01AC E0                MOVX    A,@DPTR
01AD FF                MOV     R7,A
01AE E4                CLR     A
01AF FC                MOV     R4,A
01B0 FD                MOV     R5,A
01B1 FE                MOV     R6,A
01B2 120000      E     LCALL   ?C?LOR
01B5 900000      R     MOV     DPTR,#calc
01B8 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 497
01BB 900000      R     MOV     DPTR,#calc
01BE 120000      E     LCALL   ?C?LLDXDATA0
01C1 900000      R     MOV     DPTR,#filteredRawData
01C4 E0                MOVX    A,@DPTR
01C5 FE                MOV     R6,A
01C6 A3                INC     DPTR
01C7 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 46  

01C8 FF                MOV     R7,A
01C9 E4                CLR     A
01CA FC                MOV     R4,A
01CB FD                MOV     R5,A
01CC 120000      E     LCALL   ?C?LADD
01CF 900000      R     MOV     DPTR,#calc
01D2 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 500
01D5 900000      R     MOV     DPTR,#calc
01D8 120000      E     LCALL   ?C?LLDXDATA
01DB C004              PUSH    AR4
01DD C005              PUSH    AR5
01DF C006              PUSH    AR6
01E1 C007              PUSH    AR7
01E3 900000      R     MOV     DPTR,#sensor
01E6 E0                MOVX    A,@DPTR
01E7 FF                MOV     R7,A
01E8 EF                MOV     A,R7
01E9 25E0              ADD     A,ACC
01EB 2400        R     ADD     A,#LOW CapSense_SensorBaseline
01ED F582              MOV     DPL,A
01EF E4                CLR     A
01F0 3400        R     ADDC    A,#HIGH CapSense_SensorBaseline
01F2 F583              MOV     DPH,A
01F4 E0                MOVX    A,@DPTR
01F5 FE                MOV     R6,A
01F6 A3                INC     DPTR
01F7 E0                MOVX    A,@DPTR
01F8 FF                MOV     R7,A
01F9 AB07              MOV     R3,AR7
01FB AA06              MOV     R2,AR6
01FD E4                CLR     A
01FE F9                MOV     R1,A
01FF F8                MOV     R0,A
0200 D007              POP     AR7
0202 D006              POP     AR6
0204 D005              POP     AR5
0206 D004              POP     AR4
0208 120000      E     LCALL   ?C?LSUB
020B 900000      R     MOV     DPTR,#calc
020E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 503
0211 900000      R     MOV     DPTR,#calc
0214 120000      E     LCALL   ?C?LLDXDATA
0217 7808              MOV     R0,#08H
0219 120000      E     LCALL   ?C?ULSHR
021C 900000      R     MOV     DPTR,#sensor
021F E0                MOVX    A,@DPTR
0220 FD                MOV     R5,A
0221 ED                MOV     A,R5
0222 25E0              ADD     A,ACC
0224 2400        R     ADD     A,#LOW CapSense_SensorBaseline
0226 F582              MOV     DPL,A
0228 E4                CLR     A
0229 3400        R     ADDC    A,#HIGH CapSense_SensorBaseline
022B F583              MOV     DPH,A
022D EE                MOV     A,R6
022E F0                MOVX    @DPTR,A
022F A3                INC     DPTR
0230 EF                MOV     A,R7
0231 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 504
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 47  

0232 900000      R     MOV     DPTR,#calc
0235 120000      E     LCALL   ?C?LLDXDATA
0238 900000      R     MOV     DPTR,#sensor
023B E0                MOVX    A,@DPTR
023C FE                MOV     R6,A
023D 7400        R     MOV     A,#LOW CapSense_SensorBaselineLow
023F 2E                ADD     A,R6
0240 F582              MOV     DPL,A
0242 E4                CLR     A
0243 3400        R     ADDC    A,#HIGH CapSense_SensorBaselineLow
0245 F583              MOV     DPH,A
0247 EF                MOV     A,R7
0248 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 506
0249 900000      R     MOV     DPTR,#sensor
024C E0                MOVX    A,@DPTR
024D FF                MOV     R7,A
024E 7400        R     MOV     A,#LOW CapSense_LowBaselineResetCnt
0250 2F                ADD     A,R7
0251 F582              MOV     DPL,A
0253 E4                CLR     A
0254 3400        R     ADDC    A,#HIGH CapSense_LowBaselineResetCnt
0256 F583              MOV     DPH,A
0258 E4                CLR     A
0259 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 508
                                           ; SOURCE LINE # 510
025A         ?C0022:
                                           ; SOURCE LINE # 513
025A 900000      R     MOV     DPTR,#noiseThreshold
025D E0                MOVX    A,@DPTR
025E FF                MOV     R7,A
025F 7E00              MOV     R6,#00H
0261 900000      R     MOV     DPTR,#tempRaw
0264 E0                MOVX    A,@DPTR
0265 FC                MOV     R4,A
0266 A3                INC     DPTR
0267 E0                MOVX    A,@DPTR
0268 FD                MOV     R5,A
0269 D3                SETB    C
026A ED                MOV     A,R5
026B 9F                SUBB    A,R7
026C EC                MOV     A,R4
026D 9E                SUBB    A,R6
026E 4046              JC      ?C0025
0270 900000      R     MOV     DPTR,#widget
0273 E0                MOVX    A,@DPTR
0274 FF                MOV     R7,A
0275 EF                MOV     A,R7
0276 603E              JZ      ?C0025
                                           ; SOURCE LINE # 514
                                           ; SOURCE LINE # 517
0278 900000      R     MOV     DPTR,#tempRaw
027B E0                MOVX    A,@DPTR
027C FE                MOV     R6,A
027D A3                INC     DPTR
027E E0                MOVX    A,@DPTR
027F FF                MOV     R7,A
0280 D3                SETB    C
0281 EF                MOV     A,R7
0282 94FF              SUBB    A,#0FFH
0284 EE                MOV     A,R6
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 48  

0285 9400              SUBB    A,#00H
0287 4013              JC      ?C0026
                                           ; SOURCE LINE # 518
                                           ; SOURCE LINE # 519
0289 900000      R     MOV     DPTR,#sensor
028C E0                MOVX    A,@DPTR
028D FF                MOV     R7,A
028E 7400        R     MOV     A,#LOW CapSense_SensorSignal
0290 2F                ADD     A,R7
0291 F582              MOV     DPL,A
0293 E4                CLR     A
0294 3400        R     ADDC    A,#HIGH CapSense_SensorSignal
0296 F583              MOV     DPH,A
0298 74FF              MOV     A,#0FFH
029A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 520
029B 22                RET     
029C         ?C0026:
                                           ; SOURCE LINE # 522
                                           ; SOURCE LINE # 523
029C 900000      R     MOV     DPTR,#tempRaw
029F E0                MOVX    A,@DPTR
02A0 FE                MOV     R6,A
02A1 A3                INC     DPTR
02A2 E0                MOVX    A,@DPTR
02A3 FF                MOV     R7,A
02A4 900000      R     MOV     DPTR,#sensor
02A7 E0                MOVX    A,@DPTR
02A8 FE                MOV     R6,A
02A9 7400        R     MOV     A,#LOW CapSense_SensorSignal
02AB 2E                ADD     A,R6
02AC F582              MOV     DPL,A
02AE E4                CLR     A
02AF 3400        R     ADDC    A,#HIGH CapSense_SensorSignal
02B1 F583              MOV     DPH,A
02B3 EF                MOV     A,R7
02B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 524
                                           ; SOURCE LINE # 528
02B5 22                RET     
02B6         ?C0025:
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 532
02B6 900000      R     MOV     DPTR,#sensor
02B9 E0                MOVX    A,@DPTR
02BA FF                MOV     R7,A
02BB 7400        R     MOV     A,#LOW CapSense_SensorSignal
02BD 2F                ADD     A,R7
02BE F582              MOV     DPL,A
02C0 E4                CLR     A
02C1 3400        R     ADDC    A,#HIGH CapSense_SensorSignal
02C3 F583              MOV     DPH,A
02C5 E4                CLR     A
02C6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 539
02C7         ?C0029:
02C7 22                RET     
             ; FUNCTION _CapSense_UpdateSensorBaseline (END)

             ; FUNCTION CapSense_UpdateEnabledBaselines (BEGIN)
                                           ; SOURCE LINE # 571
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 49  

                                           ; SOURCE LINE # 572
                                           ; SOURCE LINE # 577
0000 900000      R     MOV     DPTR,#i
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005         ?C0030:
0005 900000      R     MOV     DPTR,#i
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 9407              SUBB    A,#07H
000E 5057              JNC     ?C0034
                                           ; SOURCE LINE # 578
                                           ; SOURCE LINE # 579
0010 900000      R     MOV     DPTR,#i
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 13                RRC     A
0017 13                RRC     A
0018 13                RRC     A
0019 541F              ANL     A,#01FH
001B FF                MOV     R7,A
001C 900000      R     MOV     DPTR,#pos
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 580
0021 900000      R     MOV     DPTR,#i
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 5407              ANL     A,#07H
0029 FF                MOV     R7,A
002A 7401              MOV     A,#01H
002C A807              MOV     R0,AR7
002E 08                INC     R0
002F 8002              SJMP    ?C0085
0031         ?C0084:
0031 C3                CLR     C
0032 33                RLC     A
0033         ?C0085:
0033 D8FC              DJNZ    R0,?C0084
0035 FF                MOV     R7,A
0036 900000      R     MOV     DPTR,#enMask
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 581
003B 900000      R     MOV     DPTR,#pos
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 7400        E     MOV     A,#LOW CapSense_SensorEnableMask
0042 2F                ADD     A,R7
0043 F582              MOV     DPL,A
0045 E4                CLR     A
0046 3400        E     ADDC    A,#HIGH CapSense_SensorEnableMask
0048 F583              MOV     DPH,A
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C 900000      R     MOV     DPTR,#enMask
004F E0                MOVX    A,@DPTR
0050 FE                MOV     R6,A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 50  

0051 EF                MOV     A,R7
0052 5E                ANL     A,R6
0053 FF                MOV     R7,A
0054 EF                MOV     A,R7
0055 6008              JZ      ?C0032
                                           ; SOURCE LINE # 582
                                           ; SOURCE LINE # 583
0057 900000      R     MOV     DPTR,#i
005A E0                MOVX    A,@DPTR
005B FF                MOV     R7,A
005C 120000      R     LCALL   _CapSense_UpdateSensorBaseline
                                           ; SOURCE LINE # 584
                                           ; SOURCE LINE # 585
005F         ?C0032:
005F 900000      R     MOV     DPTR,#i
0062 E0                MOVX    A,@DPTR
0063 04                INC     A
0064 F0                MOVX    @DPTR,A
0065 809E              SJMP    ?C0030
                                           ; SOURCE LINE # 586
0067         ?C0034:
0067 22                RET     
             ; FUNCTION CapSense_UpdateEnabledBaselines (END)

             ; FUNCTION _CapSense_CheckIsSensorActive (BEGIN)
                                           ; SOURCE LINE # 628
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 629
                                           ; SOURCE LINE # 632
0005 900000      R     MOV     DPTR,#sensor
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 13                RRC     A
000C 13                RRC     A
000D 13                RRC     A
000E 541F              ANL     A,#01FH
0010 FF                MOV     R7,A
0011 900000      R     MOV     DPTR,#pos
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 633
0016 900000      R     MOV     DPTR,#sensor
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 5407              ANL     A,#07H
001E FF                MOV     R7,A
001F 7401              MOV     A,#01H
0021 A807              MOV     R0,AR7
0023 08                INC     R0
0024 8002              SJMP    ?C0087
0026         ?C0086:
0026 C3                CLR     C
0027 33                RLC     A
0028         ?C0087:
0028 D8FC              DJNZ    R0,?C0086
002A FF                MOV     R7,A
002B 900000      R     MOV     DPTR,#onMask
002E EF                MOV     A,R7
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 51  

002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 635
0030 900000      R     MOV     DPTR,#sensor
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 900000      E     MOV     DPTR,#CapSense_widgetNumber
0039 93                MOVC    A,@A+DPTR
003A FF                MOV     R7,A
003B 900000      R     MOV     DPTR,#widget
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 636
0040 900000      R     MOV     DPTR,#widget
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 7400        R     MOV     A,#LOW CapSense_fingerThreshold
0047 2F                ADD     A,R7
0048 F582              MOV     DPL,A
004A E4                CLR     A
004B 3400        R     ADDC    A,#HIGH CapSense_fingerThreshold
004D F583              MOV     DPH,A
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 900000      R     MOV     DPTR,#fingerThreshold
0054 EF                MOV     A,R7
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 637
0056 900000      R     MOV     DPTR,#widget
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B 7400        R     MOV     A,#LOW CapSense_hysteresis
005D 2F                ADD     A,R7
005E F582              MOV     DPL,A
0060 E4                CLR     A
0061 3400        R     ADDC    A,#HIGH CapSense_hysteresis
0063 F583              MOV     DPH,A
0065 E0                MOVX    A,@DPTR
0066 FF                MOV     R7,A
0067 900000      R     MOV     DPTR,#hysteresis
006A EF                MOV     A,R7
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 638
006C 900000      R     MOV     DPTR,#widget
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 7400        R     MOV     A,#LOW CapSense_debounce
0073 2F                ADD     A,R7
0074 F582              MOV     DPL,A
0076 E4                CLR     A
0077 3400        R     ADDC    A,#HIGH CapSense_debounce
0079 F583              MOV     DPH,A
007B E0                MOVX    A,@DPTR
007C FF                MOV     R7,A
007D 900000      R     MOV     DPTR,#debounce
0080 EF                MOV     A,R7
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 640
0082 900000      R     MOV     DPTR,#widget
0085 E0                MOVX    A,@DPTR
0086 FF                MOV     R7,A
0087 EF                MOV     A,R7
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 52  

0088 C3                CLR     C
0089 9401              SUBB    A,#01H
008B 501A              JNC     ?C0035
                                           ; SOURCE LINE # 641
                                           ; SOURCE LINE # 642
008D 900000      R     MOV     DPTR,#debounceIndex
0090 7402              MOV     A,#02H
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 643
0093 900000      R     MOV     DPTR,#debounceIndex
0096 E0                MOVX    A,@DPTR
0097 FF                MOV     R7,A
0098 7400        R     MOV     A,#LOW CapSense_debounceCounter
009A 2F                ADD     A,R7
009B F582              MOV     DPL,A
009D E4                CLR     A
009E 3400        R     ADDC    A,#HIGH CapSense_debounceCounter
00A0 F583              MOV     DPH,A
00A2 7401              MOV     A,#01H
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 644
00A5 800D              SJMP    ?C0036
00A7         ?C0035:
                                           ; SOURCE LINE # 646
                                           ; SOURCE LINE # 647
00A7 900000      R     MOV     DPTR,#widget
00AA E0                MOVX    A,@DPTR
00AB FF                MOV     R7,A
00AC EF                MOV     A,R7
00AD 14                DEC     A
00AE FF                MOV     R7,A
00AF 900000      R     MOV     DPTR,#debounceIndex
00B2 EF                MOV     A,R7
00B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 648
00B4         ?C0036:
                                           ; SOURCE LINE # 652
00B4 900000      R     MOV     DPTR,#pos
00B7 E0                MOVX    A,@DPTR
00B8 FF                MOV     R7,A
00B9 7400        R     MOV     A,#LOW CapSense_SensorOnMask
00BB 2F                ADD     A,R7
00BC F582              MOV     DPL,A
00BE E4                CLR     A
00BF 3400        R     ADDC    A,#HIGH CapSense_SensorOnMask
00C1 F583              MOV     DPH,A
00C3 E0                MOVX    A,@DPTR
00C4 FF                MOV     R7,A
00C5 900000      R     MOV     DPTR,#onMask
00C8 E0                MOVX    A,@DPTR
00C9 FE                MOV     R6,A
00CA EF                MOV     A,R7
00CB 5E                ANL     A,R6
00CC FF                MOV     R7,A
00CD EF                MOV     A,R7
00CE 6065              JZ      ?C0037
                                           ; SOURCE LINE # 653
                                           ; SOURCE LINE # 655
00D0 900000      R     MOV     DPTR,#hysteresis
00D3 E0                MOVX    A,@DPTR
00D4 FF                MOV     R7,A
00D5 900000      R     MOV     DPTR,#fingerThreshold
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 53  

00D8 E0                MOVX    A,@DPTR
00D9 FE                MOV     R6,A
00DA C3                CLR     C
00DB EE                MOV     A,R6
00DC 9F                SUBB    A,R7
00DD FF                MOV     R7,A
00DE 900000      R     MOV     DPTR,#sensor
00E1 E0                MOVX    A,@DPTR
00E2 FE                MOV     R6,A
00E3 7400        R     MOV     A,#LOW CapSense_SensorSignal
00E5 2E                ADD     A,R6
00E6 F582              MOV     DPL,A
00E8 E4                CLR     A
00E9 3400        R     ADDC    A,#HIGH CapSense_SensorSignal
00EB F583              MOV     DPH,A
00ED E0                MOVX    A,@DPTR
00EE FE                MOV     R6,A
00EF EE                MOV     A,R6
00F0 C3                CLR     C
00F1 9F                SUBB    A,R7
00F2 4003              JC      $ + 5H
00F4 020000      R     LJMP    ?C0039
                                           ; SOURCE LINE # 656
                                           ; SOURCE LINE # 657
00F7 900000      R     MOV     DPTR,#pos
00FA E0                MOVX    A,@DPTR
00FB FF                MOV     R7,A
00FC 7400        R     MOV     A,#LOW CapSense_SensorOnMask
00FE 2F                ADD     A,R7
00FF F582              MOV     DPL,A
0101 E4                CLR     A
0102 3400        R     ADDC    A,#HIGH CapSense_SensorOnMask
0104 F583              MOV     DPH,A
0106 C083              PUSH    DPH
0108 C082              PUSH    DPL
010A E0                MOVX    A,@DPTR
010B FF                MOV     R7,A
010C 900000      R     MOV     DPTR,#onMask
010F E0                MOVX    A,@DPTR
0110 FE                MOV     R6,A
0111 EE                MOV     A,R6
0112 F4                CPL     A
0113 FE                MOV     R6,A
0114 EF                MOV     A,R7
0115 5E                ANL     A,R6
0116 FF                MOV     R7,A
0117 D082              POP     DPL
0119 D083              POP     DPH
011B EF                MOV     A,R7
011C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 658
011D 900000      R     MOV     DPTR,#debounce
0120 E0                MOVX    A,@DPTR
0121 FF                MOV     R7,A
0122 900000      R     MOV     DPTR,#debounceIndex
0125 E0                MOVX    A,@DPTR
0126 FE                MOV     R6,A
0127 7400        R     MOV     A,#LOW CapSense_debounceCounter
0129 2E                ADD     A,R6
012A F582              MOV     DPL,A
012C E4                CLR     A
012D 3400        R     ADDC    A,#HIGH CapSense_debounceCounter
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 54  

012F F583              MOV     DPH,A
0131 EF                MOV     A,R7
0132 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 659
                                           ; SOURCE LINE # 660
0133 8077              SJMP    ?C0039
0135         ?C0037:
                                           ; SOURCE LINE # 662
                                           ; SOURCE LINE # 664
0135 900000      R     MOV     DPTR,#hysteresis
0138 E0                MOVX    A,@DPTR
0139 FF                MOV     R7,A
013A 900000      R     MOV     DPTR,#fingerThreshold
013D E0                MOVX    A,@DPTR
013E FE                MOV     R6,A
013F EE                MOV     A,R6
0140 2F                ADD     A,R7
0141 FF                MOV     R7,A
0142 900000      R     MOV     DPTR,#sensor
0145 E0                MOVX    A,@DPTR
0146 FE                MOV     R6,A
0147 7400        R     MOV     A,#LOW CapSense_SensorSignal
0149 2E                ADD     A,R6
014A F582              MOV     DPL,A
014C E4                CLR     A
014D 3400        R     ADDC    A,#HIGH CapSense_SensorSignal
014F F583              MOV     DPH,A
0151 E0                MOVX    A,@DPTR
0152 FE                MOV     R6,A
0153 EE                MOV     A,R6
0154 D3                SETB    C
0155 9F                SUBB    A,R7
0156 403E              JC      ?C0040
                                           ; SOURCE LINE # 665
                                           ; SOURCE LINE # 667
0158 900000      R     MOV     DPTR,#debounceIndex
015B E0                MOVX    A,@DPTR
015C FF                MOV     R7,A
015D 7400        R     MOV     A,#LOW CapSense_debounceCounter
015F 2F                ADD     A,R7
0160 F582              MOV     DPL,A
0162 E4                CLR     A
0163 3400        R     ADDC    A,#HIGH CapSense_debounceCounter
0165 F583              MOV     DPH,A
0167 E0                MOVX    A,@DPTR
0168 FF                MOV     R7,A
0169 14                DEC     A
016A F0                MOVX    @DPTR,A
016B EF                MOV     A,R7
016C D3                SETB    C
016D 9401              SUBB    A,#01H
016F 503B              JNC     ?C0039
                                           ; SOURCE LINE # 668
                                           ; SOURCE LINE # 669
0171 900000      R     MOV     DPTR,#pos
0174 E0                MOVX    A,@DPTR
0175 FF                MOV     R7,A
0176 7400        R     MOV     A,#LOW CapSense_SensorOnMask
0178 2F                ADD     A,R7
0179 F582              MOV     DPL,A
017B E4                CLR     A
017C 3400        R     ADDC    A,#HIGH CapSense_SensorOnMask
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 55  

017E F583              MOV     DPH,A
0180 C083              PUSH    DPH
0182 C082              PUSH    DPL
0184 E0                MOVX    A,@DPTR
0185 FF                MOV     R7,A
0186 900000      R     MOV     DPTR,#onMask
0189 E0                MOVX    A,@DPTR
018A FE                MOV     R6,A
018B EF                MOV     A,R7
018C 4E                ORL     A,R6
018D FF                MOV     R7,A
018E D082              POP     DPL
0190 D083              POP     DPH
0192 EF                MOV     A,R7
0193 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 670
                                           ; SOURCE LINE # 671
0194 8016              SJMP    ?C0039
0196         ?C0040:
                                           ; SOURCE LINE # 673
                                           ; SOURCE LINE # 675
0196 900000      R     MOV     DPTR,#debounce
0199 E0                MOVX    A,@DPTR
019A FF                MOV     R7,A
019B 900000      R     MOV     DPTR,#debounceIndex
019E E0                MOVX    A,@DPTR
019F FE                MOV     R6,A
01A0 7400        R     MOV     A,#LOW CapSense_debounceCounter
01A2 2E                ADD     A,R6
01A3 F582              MOV     DPL,A
01A5 E4                CLR     A
01A6 3400        R     ADDC    A,#HIGH CapSense_debounceCounter
01A8 F583              MOV     DPH,A
01AA EF                MOV     A,R7
01AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 676
                                           ; SOURCE LINE # 677
01AC         ?C0039:
                                           ; SOURCE LINE # 679
01AC 900000      R     MOV     DPTR,#pos
01AF E0                MOVX    A,@DPTR
01B0 FF                MOV     R7,A
01B1 7400        R     MOV     A,#LOW CapSense_SensorOnMask
01B3 2F                ADD     A,R7
01B4 F582              MOV     DPL,A
01B6 E4                CLR     A
01B7 3400        R     ADDC    A,#HIGH CapSense_SensorOnMask
01B9 F583              MOV     DPH,A
01BB E0                MOVX    A,@DPTR
01BC FF                MOV     R7,A
01BD 900000      R     MOV     DPTR,#onMask
01C0 E0                MOVX    A,@DPTR
01C1 FE                MOV     R6,A
01C2 EF                MOV     A,R7
01C3 5E                ANL     A,R6
01C4 FF                MOV     R7,A
01C5 EF                MOV     A,R7
01C6 6004              JZ      ?C0043
01C8 7F01              MOV     R7,#01H
01CA 8002              SJMP    ?C0044
01CC         ?C0043:
01CC 7F00              MOV     R7,#00H
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 56  

01CE         ?C0044:
                                           ; SOURCE LINE # 680
01CE         ?C0045:
01CE 22                RET     
             ; FUNCTION _CapSense_CheckIsSensorActive (END)

             ; FUNCTION _CapSense_CheckIsWidgetActive (BEGIN)
                                           ; SOURCE LINE # 706
0000 900000      R     MOV     DPTR,#widget
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 707
                                           ; SOURCE LINE # 708
0005 900000      R     MOV     DPTR,#widget
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      R     MOV     DPTR,#CapSense_rawDataIndex
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#rawIndex
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 709
0015 900000      R     MOV     DPTR,#widget
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 900000      R     MOV     DPTR,#CapSense_numberOfSensors
001E 93                MOVC    A,@A+DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#rawIndex
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 EF                MOV     A,R7
0026 2E                ADD     A,R6
0027 FF                MOV     R7,A
0028 900000      R     MOV     DPTR,#numberOfSensors
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 710
002D 900000      R     MOV     DPTR,#state
0030 E4                CLR     A
0031 F0                MOVX    @DPTR,A
0032         ?C0048:
                                           ; SOURCE LINE # 714
                                           ; SOURCE LINE # 715
0032 900000      R     MOV     DPTR,#rawIndex
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 120000      R     LCALL   _CapSense_CheckIsSensorActive
003A EF                MOV     A,R7
003B 6006              JZ      ?C0049
                                           ; SOURCE LINE # 716
                                           ; SOURCE LINE # 717
003D 900000      R     MOV     DPTR,#state
0040 7401              MOV     A,#01H
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 718
0043         ?C0049:
                                           ; SOURCE LINE # 719
0043 900000      R     MOV     DPTR,#rawIndex
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 57  

0046 E0                MOVX    A,@DPTR
0047 04                INC     A
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 720
                                           ; SOURCE LINE # 721
0049 900000      R     MOV     DPTR,#numberOfSensors
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 900000      R     MOV     DPTR,#rawIndex
0051 E0                MOVX    A,@DPTR
0052 FE                MOV     R6,A
0053 EE                MOV     A,R6
0054 C3                CLR     C
0055 9F                SUBB    A,R7
0056 40DA              JC      ?C0048
                                           ; SOURCE LINE # 725
0058 900000      R     MOV     DPTR,#state
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
                                           ; SOURCE LINE # 726
005D         ?C0050:
005D 22                RET     
             ; FUNCTION _CapSense_CheckIsWidgetActive (END)

             ; FUNCTION CapSense_CheckIsAnyWidgetActive (BEGIN)
                                           ; SOURCE LINE # 749
                                           ; SOURCE LINE # 750
                                           ; SOURCE LINE # 752
0000 900000      R     MOV     DPTR,#state
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 754
0005 900000      R     MOV     DPTR,#i
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
000A         ?C0051:
000A 900000      R     MOV     DPTR,#i
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 C3                CLR     C
0011 9403              SUBB    A,#03H
0013 5019              JNC     ?C0052
                                           ; SOURCE LINE # 755
                                           ; SOURCE LINE # 756
0015 900000      R     MOV     DPTR,#i
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A 120000      R     LCALL   _CapSense_CheckIsWidgetActive
001D EF                MOV     A,R7
001E 6006              JZ      ?C0053
                                           ; SOURCE LINE # 757
                                           ; SOURCE LINE # 758
0020 900000      R     MOV     DPTR,#state
0023 7401              MOV     A,#01H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 759
                                           ; SOURCE LINE # 760
0026         ?C0053:
0026 900000      R     MOV     DPTR,#i
0029 E0                MOVX    A,@DPTR
002A 04                INC     A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 58  

002B F0                MOVX    @DPTR,A
002C 80DC              SJMP    ?C0051
002E         ?C0052:
                                           ; SOURCE LINE # 763
002E 900000      R     MOV     DPTR,#state
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
                                           ; SOURCE LINE # 764
0033         ?C0055:
0033 22                RET     
             ; FUNCTION CapSense_CheckIsAnyWidgetActive (END)

             ; FUNCTION _CapSense_EnableWidget (BEGIN)
                                           ; SOURCE LINE # 794
0000 900000      R     MOV     DPTR,#widget
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 795
                                           ; SOURCE LINE # 798
0005 900000      R     MOV     DPTR,#widget
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      R     MOV     DPTR,#CapSense_rawDataIndex
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#rawIndex
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 799
0015 900000      R     MOV     DPTR,#widget
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 900000      R     MOV     DPTR,#CapSense_numberOfSensors
001E 93                MOVC    A,@A+DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#rawIndex
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 EF                MOV     A,R7
0026 2E                ADD     A,R6
0027 FF                MOV     R7,A
0028 900000      R     MOV     DPTR,#numberOfSensors
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
002D         ?C0058:
                                           ; SOURCE LINE # 803
                                           ; SOURCE LINE # 804
002D 900000      R     MOV     DPTR,#rawIndex
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 13                RRC     A
0034 13                RRC     A
0035 13                RRC     A
0036 541F              ANL     A,#01FH
0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#pos
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 805
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 59  

003E 900000      R     MOV     DPTR,#rawIndex
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 EF                MOV     A,R7
0044 5407              ANL     A,#07H
0046 FF                MOV     R7,A
0047 7401              MOV     A,#01H
0049 A807              MOV     R0,AR7
004B 08                INC     R0
004C 8002              SJMP    ?C0089
004E         ?C0088:
004E C3                CLR     C
004F 33                RLC     A
0050         ?C0089:
0050 D8FC              DJNZ    R0,?C0088
0052 FF                MOV     R7,A
0053 900000      R     MOV     DPTR,#enMask
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 807
0058 900000      R     MOV     DPTR,#pos
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
005D 7400        E     MOV     A,#LOW CapSense_SensorEnableMask
005F 2F                ADD     A,R7
0060 F582              MOV     DPL,A
0062 E4                CLR     A
0063 3400        E     ADDC    A,#HIGH CapSense_SensorEnableMask
0065 F583              MOV     DPH,A
0067 C083              PUSH    DPH
0069 C082              PUSH    DPL
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D 900000      R     MOV     DPTR,#enMask
0070 E0                MOVX    A,@DPTR
0071 FE                MOV     R6,A
0072 EF                MOV     A,R7
0073 4E                ORL     A,R6
0074 FF                MOV     R7,A
0075 D082              POP     DPL
0077 D083              POP     DPH
0079 EF                MOV     A,R7
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 808
007B 900000      R     MOV     DPTR,#rawIndex
007E E0                MOVX    A,@DPTR
007F 04                INC     A
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 809
                                           ; SOURCE LINE # 810
0081 900000      R     MOV     DPTR,#numberOfSensors
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 900000      R     MOV     DPTR,#rawIndex
0089 E0                MOVX    A,@DPTR
008A FE                MOV     R6,A
008B EE                MOV     A,R6
008C C3                CLR     C
008D 9F                SUBB    A,R7
008E 409D              JC      ?C0058
                                           ; SOURCE LINE # 813
0090 22                RET     
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 60  

             ; FUNCTION _CapSense_EnableWidget (END)

             ; FUNCTION _CapSense_DisableWidget (BEGIN)
                                           ; SOURCE LINE # 843
0000 900000      R     MOV     DPTR,#widget
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 844
                                           ; SOURCE LINE # 847
0005 900000      R     MOV     DPTR,#widget
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      R     MOV     DPTR,#CapSense_rawDataIndex
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#rawIndex
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 848
0015 900000      R     MOV     DPTR,#widget
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 900000      R     MOV     DPTR,#CapSense_numberOfSensors
001E 93                MOVC    A,@A+DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#rawIndex
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 EF                MOV     A,R7
0026 2E                ADD     A,R6
0027 FF                MOV     R7,A
0028 900000      R     MOV     DPTR,#numberOfSensors
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
002D         ?C0062:
                                           ; SOURCE LINE # 852
                                           ; SOURCE LINE # 853
002D 900000      R     MOV     DPTR,#rawIndex
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 13                RRC     A
0034 13                RRC     A
0035 13                RRC     A
0036 541F              ANL     A,#01FH
0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#pos
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 854
003E 900000      R     MOV     DPTR,#rawIndex
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 EF                MOV     A,R7
0044 5407              ANL     A,#07H
0046 FF                MOV     R7,A
0047 7401              MOV     A,#01H
0049 A807              MOV     R0,AR7
004B 08                INC     R0
004C 8002              SJMP    ?C0091
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 61  

004E         ?C0090:
004E C3                CLR     C
004F 33                RLC     A
0050         ?C0091:
0050 D8FC              DJNZ    R0,?C0090
0052 FF                MOV     R7,A
0053 900000      R     MOV     DPTR,#enMask
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 856
0058 900000      R     MOV     DPTR,#pos
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
005D 7400        E     MOV     A,#LOW CapSense_SensorEnableMask
005F 2F                ADD     A,R7
0060 F582              MOV     DPL,A
0062 E4                CLR     A
0063 3400        E     ADDC    A,#HIGH CapSense_SensorEnableMask
0065 F583              MOV     DPH,A
0067 C083              PUSH    DPH
0069 C082              PUSH    DPL
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D 900000      R     MOV     DPTR,#enMask
0070 E0                MOVX    A,@DPTR
0071 FE                MOV     R6,A
0072 EE                MOV     A,R6
0073 F4                CPL     A
0074 FE                MOV     R6,A
0075 EF                MOV     A,R7
0076 5E                ANL     A,R6
0077 FF                MOV     R7,A
0078 D082              POP     DPL
007A D083              POP     DPH
007C EF                MOV     A,R7
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 857
007E 900000      R     MOV     DPTR,#rawIndex
0081 E0                MOVX    A,@DPTR
0082 04                INC     A
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 858
                                           ; SOURCE LINE # 859
0084 900000      R     MOV     DPTR,#numberOfSensors
0087 E0                MOVX    A,@DPTR
0088 FF                MOV     R7,A
0089 900000      R     MOV     DPTR,#rawIndex
008C E0                MOVX    A,@DPTR
008D FE                MOV     R6,A
008E EE                MOV     A,R6
008F C3                CLR     C
0090 9F                SUBB    A,R7
0091 409A              JC      ?C0062
                                           ; SOURCE LINE # 862
0093 22                RET     
             ; FUNCTION _CapSense_DisableWidget (END)

             ; FUNCTION _CapSense_FindMaximum (BEGIN)
                                           ; SOURCE LINE # 891
0000 900000      R     MOV     DPTR,#offset
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 62  

0005 900000      R     MOV     DPTR,#count
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
000A 900000      R     MOV     DPTR,#fingerThreshold
000D EB                MOV     A,R3
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 893
                                           ; SOURCE LINE # 904
000F 900000      R     MOV     DPTR,#maximum
0012 74FF              MOV     A,#0FFH
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 905
0015 900000      R     MOV     DPTR,#temp
0018 E4                CLR     A
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 906
001A 900000      R     MOV     DPTR,#offset
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F 7400        R     MOV     A,#LOW CapSense_SensorSignal
0021 2F                ADD     A,R7
0022 F9                MOV     R1,A
0023 E4                CLR     A
0024 3400        R     ADDC    A,#HIGH CapSense_SensorSignal
0026 FA                MOV     R2,A
0027 7B01              MOV     R3,#01H
0029 900000      R     MOV     DPTR,#startOfSlider
002C 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 1003
002F 900000      R     MOV     DPTR,#i
0032 E4                CLR     A
0033 F0                MOVX    @DPTR,A
0034         ?C0064:
0034 900000      R     MOV     DPTR,#count
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#i
003C E0                MOVX    A,@DPTR
003D FE                MOV     R6,A
003E EE                MOV     A,R6
003F C3                CLR     C
0040 9F                SUBB    A,R7
0041 506A              JNC     ?C0065
                                           ; SOURCE LINE # 1004
                                           ; SOURCE LINE # 1006
0043 900000      R     MOV     DPTR,#startOfSlider
0046 120000      E     LCALL   ?C?PLDXDATA
0049 900000      R     MOV     DPTR,#i
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E E9                MOV     A,R1
004F 2F                ADD     A,R7
0050 F9                MOV     R1,A
0051 E4                CLR     A
0052 3A                ADDC    A,R2
0053 FA                MOV     R2,A
0054 120000      E     LCALL   ?C?CLDPTR
0057 FF                MOV     R7,A
0058 900000      R     MOV     DPTR,#fingerThreshold
005B E0                MOVX    A,@DPTR
005C FE                MOV     R6,A
005D EF                MOV     A,R7
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 63  

005E D3                SETB    C
005F 9E                SUBB    A,R6
0060 4043              JC      ?C0066
                                           ; SOURCE LINE # 1007
                                           ; SOURCE LINE # 1008
0062 900000      R     MOV     DPTR,#startOfSlider
0065 120000      E     LCALL   ?C?PLDXDATA
0068 900000      R     MOV     DPTR,#i
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D E9                MOV     A,R1
006E 2F                ADD     A,R7
006F F9                MOV     R1,A
0070 E4                CLR     A
0071 3A                ADDC    A,R2
0072 FA                MOV     R2,A
0073 120000      E     LCALL   ?C?CLDPTR
0076 FF                MOV     R7,A
0077 900000      R     MOV     DPTR,#temp
007A E0                MOVX    A,@DPTR
007B FE                MOV     R6,A
007C EF                MOV     A,R7
007D D3                SETB    C
007E 9E                SUBB    A,R6
007F 4024              JC      ?C0066
                                           ; SOURCE LINE # 1009
                                           ; SOURCE LINE # 1010
0081 900000      R     MOV     DPTR,#i
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 900000      R     MOV     DPTR,#maximum
0089 EF                MOV     A,R7
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1011
008B 900000      R     MOV     DPTR,#startOfSlider
008E 120000      E     LCALL   ?C?PLDXDATA
0091 900000      R     MOV     DPTR,#i
0094 E0                MOVX    A,@DPTR
0095 FF                MOV     R7,A
0096 E9                MOV     A,R1
0097 2F                ADD     A,R7
0098 F9                MOV     R1,A
0099 E4                CLR     A
009A 3A                ADDC    A,R2
009B FA                MOV     R2,A
009C 120000      E     LCALL   ?C?CLDPTR
009F FF                MOV     R7,A
00A0 900000      R     MOV     DPTR,#temp
00A3 EF                MOV     A,R7
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1012
                                           ; SOURCE LINE # 1013
                                           ; SOURCE LINE # 1014
00A5         ?C0066:
00A5 900000      R     MOV     DPTR,#i
00A8 E0                MOVX    A,@DPTR
00A9 04                INC     A
00AA F0                MOVX    @DPTR,A
00AB 8087              SJMP    ?C0064
00AD         ?C0065:
                                           ; SOURCE LINE # 1016
00AD 900000      R     MOV     DPTR,#maximum
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 64  

00B0 E0                MOVX    A,@DPTR
00B1 FF                MOV     R7,A
                                           ; SOURCE LINE # 1017
00B2         ?C0069:
00B2 22                RET     
             ; FUNCTION _CapSense_FindMaximum (END)

             ; FUNCTION _CapSense_CalcCentroid (BEGIN)
                                           ; SOURCE LINE # 1046
0000 900000      R     MOV     DPTR,#maximum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#offset
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
000A 900000      R     MOV     DPTR,#count
000D EB                MOV     A,R3
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1047
                                           ; SOURCE LINE # 1060
000F 900000      R     MOV     DPTR,#offset
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 7400        R     MOV     A,#LOW CapSense_SensorSignal
0016 2F                ADD     A,R7
0017 F9                MOV     R1,A
0018 E4                CLR     A
0019 3400        R     ADDC    A,#HIGH CapSense_SensorSignal
001B FA                MOV     R2,A
001C 7B01              MOV     R3,#01H
001E 900000      R     MOV     DPTR,#startOfSlider
0021 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 1119
0024 900000      R     MOV     DPTR,#maximum
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 EF                MOV     A,R7
002A 14                DEC     A
002B FF                MOV     R7,A
002C 900000      R     MOV     DPTR,#posPrev
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1120
0031 900000      R     MOV     DPTR,#maximum
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 EF                MOV     A,R7
0037 04                INC     A
0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#posNext
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1127
003E 900000      R     MOV     DPTR,#startOfSlider
0041 120000      E     LCALL   ?C?PLDXDATA
0044 900000      R     MOV     DPTR,#maximum
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 E9                MOV     A,R1
004A 2F                ADD     A,R7
004B F9                MOV     R1,A
004C E4                CLR     A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 65  

004D 3A                ADDC    A,R2
004E FA                MOV     R2,A
004F 120000      E     LCALL   ?C?CLDPTR
0052 FF                MOV     R7,A
0053 900000      R     MOV     DPTR,#CapSense_centroid+01H
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1131
0058 900000      R     MOV     DPTR,#maximum
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
005D EF                MOV     A,R7
005E 7021              JNZ     ?C0070
                                           ; SOURCE LINE # 1132
                                           ; SOURCE LINE # 1133
0060 900000      R     MOV     DPTR,#CapSense_centroid
0063 E4                CLR     A
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1134
0065 900000      R     MOV     DPTR,#startOfSlider
0068 120000      E     LCALL   ?C?PLDXDATA
006B 900000      R     MOV     DPTR,#posNext
006E E0                MOVX    A,@DPTR
006F FF                MOV     R7,A
0070 E9                MOV     A,R1
0071 2F                ADD     A,R7
0072 F9                MOV     R1,A
0073 E4                CLR     A
0074 3A                ADDC    A,R2
0075 FA                MOV     R2,A
0076 120000      E     LCALL   ?C?CLDPTR
0079 FF                MOV     R7,A
007A 900000      R     MOV     DPTR,#CapSense_centroid+02H
007D EF                MOV     A,R7
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1135
007F 8073              SJMP    ?C0071
0081         ?C0070:
                                           ; SOURCE LINE # 1136
0081 900000      R     MOV     DPTR,#count
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 7E00              MOV     R6,#00H
0088 EF                MOV     A,R7
0089 24FF              ADD     A,#0FFH
008B FF                MOV     R7,A
008C EE                MOV     A,R6
008D 34FF              ADDC    A,#0FFH
008F FE                MOV     R6,A
0090 900000      R     MOV     DPTR,#maximum
0093 E0                MOVX    A,@DPTR
0094 FD                MOV     R5,A
0095 7C00              MOV     R4,#00H
0097 EF                MOV     A,R7
0098 B50525            CJNE    A,AR5,?C0072
009B EE                MOV     A,R6
009C B50421            CJNE    A,AR4,?C0072
                                           ; SOURCE LINE # 1137
                                           ; SOURCE LINE # 1138
009F 900000      R     MOV     DPTR,#startOfSlider
00A2 120000      E     LCALL   ?C?PLDXDATA
00A5 900000      R     MOV     DPTR,#posPrev
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 66  

00A8 E0                MOVX    A,@DPTR
00A9 FF                MOV     R7,A
00AA E9                MOV     A,R1
00AB 2F                ADD     A,R7
00AC F9                MOV     R1,A
00AD E4                CLR     A
00AE 3A                ADDC    A,R2
00AF FA                MOV     R2,A
00B0 120000      E     LCALL   ?C?CLDPTR
00B3 FF                MOV     R7,A
00B4 900000      R     MOV     DPTR,#CapSense_centroid
00B7 EF                MOV     A,R7
00B8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1139
00B9 900000      R     MOV     DPTR,#CapSense_centroid+02H
00BC E4                CLR     A
00BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1140
00BE 8034              SJMP    ?C0071
00C0         ?C0072:
                                           ; SOURCE LINE # 1142
                                           ; SOURCE LINE # 1143
00C0 900000      R     MOV     DPTR,#startOfSlider
00C3 120000      E     LCALL   ?C?PLDXDATA
00C6 900000      R     MOV     DPTR,#posPrev
00C9 E0                MOVX    A,@DPTR
00CA FF                MOV     R7,A
00CB E9                MOV     A,R1
00CC 2F                ADD     A,R7
00CD F9                MOV     R1,A
00CE E4                CLR     A
00CF 3A                ADDC    A,R2
00D0 FA                MOV     R2,A
00D1 120000      E     LCALL   ?C?CLDPTR
00D4 FF                MOV     R7,A
00D5 900000      R     MOV     DPTR,#CapSense_centroid
00D8 EF                MOV     A,R7
00D9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1144
00DA 900000      R     MOV     DPTR,#startOfSlider
00DD 120000      E     LCALL   ?C?PLDXDATA
00E0 900000      R     MOV     DPTR,#posNext
00E3 E0                MOVX    A,@DPTR
00E4 FF                MOV     R7,A
00E5 E9                MOV     A,R1
00E6 2F                ADD     A,R7
00E7 F9                MOV     R1,A
00E8 E4                CLR     A
00E9 3A                ADDC    A,R2
00EA FA                MOV     R2,A
00EB 120000      E     LCALL   ?C?CLDPTR
00EE FF                MOV     R7,A
00EF 900000      R     MOV     DPTR,#CapSense_centroid+02H
00F2 EF                MOV     A,R7
00F3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1145
00F4         ?C0071:
                                           ; SOURCE LINE # 1153
00F4 900000      R     MOV     DPTR,#noiseThreshold
00F7 E0                MOVX    A,@DPTR
00F8 FF                MOV     R7,A
00F9 900000      R     MOV     DPTR,#CapSense_centroid
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 67  

00FC E0                MOVX    A,@DPTR
00FD FE                MOV     R6,A
00FE EE                MOV     A,R6
00FF D3                SETB    C
0100 9F                SUBB    A,R7
0101 4015              JC      ?C0074
                                           ; SOURCE LINE # 1154
                                           ; SOURCE LINE # 1155
0103 900000      R     MOV     DPTR,#CapSense_centroid
0106 E0                MOVX    A,@DPTR
0107 FF                MOV     R7,A
0108 900000      R     MOV     DPTR,#noiseThreshold
010B E0                MOVX    A,@DPTR
010C FE                MOV     R6,A
010D C3                CLR     C
010E EF                MOV     A,R7
010F 9E                SUBB    A,R6
0110 FF                MOV     R7,A
0111 900000      R     MOV     DPTR,#CapSense_centroid
0114 EF                MOV     A,R7
0115 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1156
0116 8005              SJMP    ?C0075
0118         ?C0074:
                                           ; SOURCE LINE # 1158
                                           ; SOURCE LINE # 1159
0118 900000      R     MOV     DPTR,#CapSense_centroid
011B E4                CLR     A
011C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1160
011D         ?C0075:
                                           ; SOURCE LINE # 1163
011D 900000      R     MOV     DPTR,#CapSense_centroid+01H
0120 E0                MOVX    A,@DPTR
0121 FF                MOV     R7,A
0122 900000      R     MOV     DPTR,#noiseThreshold
0125 E0                MOVX    A,@DPTR
0126 FE                MOV     R6,A
0127 C3                CLR     C
0128 EF                MOV     A,R7
0129 9E                SUBB    A,R6
012A FF                MOV     R7,A
012B 900000      R     MOV     DPTR,#CapSense_centroid+01H
012E EF                MOV     A,R7
012F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1166
0130 900000      R     MOV     DPTR,#noiseThreshold
0133 E0                MOVX    A,@DPTR
0134 FF                MOV     R7,A
0135 900000      R     MOV     DPTR,#CapSense_centroid+02H
0138 E0                MOVX    A,@DPTR
0139 FE                MOV     R6,A
013A EE                MOV     A,R6
013B D3                SETB    C
013C 9F                SUBB    A,R7
013D 4015              JC      ?C0076
                                           ; SOURCE LINE # 1167
                                           ; SOURCE LINE # 1168
013F 900000      R     MOV     DPTR,#CapSense_centroid+02H
0142 E0                MOVX    A,@DPTR
0143 FF                MOV     R7,A
0144 900000      R     MOV     DPTR,#noiseThreshold
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 68  

0147 E0                MOVX    A,@DPTR
0148 FE                MOV     R6,A
0149 C3                CLR     C
014A EF                MOV     A,R7
014B 9E                SUBB    A,R6
014C FF                MOV     R7,A
014D 900000      R     MOV     DPTR,#CapSense_centroid+02H
0150 EF                MOV     A,R7
0151 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1169
0152 8005              SJMP    ?C0077
0154         ?C0076:
                                           ; SOURCE LINE # 1171
                                           ; SOURCE LINE # 1172
0154 900000      R     MOV     DPTR,#CapSense_centroid+02H
0157 E4                CLR     A
0158 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1173
0159         ?C0077:
                                           ; SOURCE LINE # 1178
0159 900000      R     MOV     DPTR,#CapSense_centroid
015C E0                MOVX    A,@DPTR
015D FF                MOV     R7,A
015E AB07              MOV     R3,AR7
0160 E4                CLR     A
0161 FA                MOV     R2,A
0162 F9                MOV     R1,A
0163 F8                MOV     R0,A
0164 900000      R     MOV     DPTR,#CapSense_centroid+02H
0167 E0                MOVX    A,@DPTR
0168 FF                MOV     R7,A
0169 E4                CLR     A
016A FC                MOV     R4,A
016B FD                MOV     R5,A
016C FE                MOV     R6,A
016D 120000      E     LCALL   ?C?LSUB
0170 900000      R     MOV     DPTR,#numerator
0173 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1183
0176 900000      R     MOV     DPTR,#CapSense_centroid+01H
0179 E0                MOVX    A,@DPTR
017A FF                MOV     R7,A
017B AB07              MOV     R3,AR7
017D E4                CLR     A
017E FA                MOV     R2,A
017F F9                MOV     R1,A
0180 F8                MOV     R0,A
0181 900000      R     MOV     DPTR,#CapSense_centroid
0184 E0                MOVX    A,@DPTR
0185 FF                MOV     R7,A
0186 E4                CLR     A
0187 FC                MOV     R4,A
0188 FD                MOV     R5,A
0189 FE                MOV     R6,A
018A 120000      E     LCALL   ?C?LADD
018D A804              MOV     R0,AR4
018F A905              MOV     R1,AR5
0191 AA06              MOV     R2,AR6
0193 AB07              MOV     R3,AR7
0195 900000      R     MOV     DPTR,#CapSense_centroid+02H
0198 E0                MOVX    A,@DPTR
0199 FF                MOV     R7,A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 69  

019A E4                CLR     A
019B FC                MOV     R4,A
019C FD                MOV     R5,A
019D FE                MOV     R6,A
019E 120000      E     LCALL   ?C?LADD
01A1 900000      R     MOV     DPTR,#denominator
01A4 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1186
01A7 900000      R     MOV     DPTR,#numerator
01AA 120000      E     LCALL   ?C?LLDXDATA
01AD 7808              MOV     R0,#08H
01AF 120000      E     LCALL   ?C?LSHL
01B2 900000      R     MOV     DPTR,#denominator
01B5 120000      E     LCALL   ?C?LLDXDATA0
01B8 120000      E     LCALL   ?C?SLDIV
01BB C004              PUSH    AR4
01BD C005              PUSH    AR5
01BF C006              PUSH    AR6
01C1 C007              PUSH    AR7
01C3 900000      R     MOV     DPTR,#maximum
01C6 E0                MOVX    A,@DPTR
01C7 FF                MOV     R7,A
01C8 7E00              MOV     R6,#00H
01CA EF                MOV     A,R7
01CB 7F00              MOV     R7,#00H
01CD FE                MOV     R6,A
01CE AB07              MOV     R3,AR7
01D0 AA06              MOV     R2,AR6
01D2 E4                CLR     A
01D3 F9                MOV     R1,A
01D4 F8                MOV     R0,A
01D5 D007              POP     AR7
01D7 D006              POP     AR6
01D9 D005              POP     AR5
01DB D004              POP     AR4
01DD 120000      E     LCALL   ?C?LADD
01E0 900000      R     MOV     DPTR,#denominator
01E3 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1196
01E6 900000      R     MOV     DPTR,#denominator
01E9 120000      E     LCALL   ?C?LLDXDATA0
01EC 900000      R     MOV     DPTR,#resolution
01EF E0                MOVX    A,@DPTR
01F0 FE                MOV     R6,A
01F1 A3                INC     DPTR
01F2 E0                MOVX    A,@DPTR
01F3 FF                MOV     R7,A
01F4 E4                CLR     A
01F5 FC                MOV     R4,A
01F6 FD                MOV     R5,A
01F7 120000      E     LCALL   ?C?LMUL
01FA 900000      R     MOV     DPTR,#denominator
01FD 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1199
0200 900000      R     MOV     DPTR,#denominator
0203 120000      E     LCALL   ?C?LLDXDATA
0206 EF                MOV     A,R7
0207 2400              ADD     A,#00H
0209 FF                MOV     R7,A
020A EE                MOV     A,R6
020B 347F              ADDC    A,#07FH
020D FE                MOV     R6,A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 70  

020E ED                MOV     A,R5
020F 3400              ADDC    A,#00H
0211 FD                MOV     R5,A
0212 EC                MOV     A,R4
0213 3400              ADDC    A,#00H
0215 FC                MOV     R4,A
0216 7810              MOV     R0,#010H
0218 120000      E     LCALL   ?C?ULSHR
021B 900000      R     MOV     DPTR,#position
021E EF                MOV     A,R7
021F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1201
0220 900000      R     MOV     DPTR,#position
0223 E0                MOVX    A,@DPTR
0224 FF                MOV     R7,A
                                           ; SOURCE LINE # 1202
0225         ?C0078:
0225 22                RET     
             ; FUNCTION _CapSense_CalcCentroid (END)

             ; FUNCTION _CapSense_GetCentroidPos (BEGIN)
                                           ; SOURCE LINE # 1243
0000 900000      R     MOV     DPTR,#widget
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1244
                                           ; SOURCE LINE # 1262
0005 900000      R     MOV     DPTR,#widget
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      R     MOV     DPTR,#CapSense_rawDataIndex
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#offset
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1263
0015 900000      R     MOV     DPTR,#widget
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 900000      R     MOV     DPTR,#CapSense_numberOfSensors
001E 93                MOVC    A,@A+DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#count
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1281
0025 900000      R     MOV     DPTR,#offset
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A 900000      R     MOV     DPTR,#count
002D E0                MOVX    A,@DPTR
002E FD                MOV     R5,A
002F 900000      R     MOV     DPTR,#widget
0032 E0                MOVX    A,@DPTR
0033 FE                MOV     R6,A
0034 7400        R     MOV     A,#LOW CapSense_fingerThreshold
0036 2E                ADD     A,R6
0037 F582              MOV     DPL,A
0039 E4                CLR     A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 71  

003A 3400        R     ADDC    A,#HIGH CapSense_fingerThreshold
003C F583              MOV     DPH,A
003E E0                MOVX    A,@DPTR
003F FB                MOV     R3,A
0040 120000      R     LCALL   _CapSense_FindMaximum
0043 900000      R     MOV     DPTR,#maximum
0046 EF                MOV     A,R7
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1284
0048 900000      R     MOV     DPTR,#maximum
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D EF                MOV     A,R7
004E 64FF              XRL     A,#0FFH
0050 6054              JZ      ?C0079
                                           ; SOURCE LINE # 1285
                                           ; SOURCE LINE # 1287
0052 900000      R     MOV     DPTR,#widget
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 EF                MOV     A,R7
0058 25E0              ADD     A,ACC
005A 2400        R     ADD     A,#LOW CapSense_centroidMult
005C F582              MOV     DPL,A
005E E4                CLR     A
005F 3400        R     ADDC    A,#HIGH CapSense_centroidMult
0061 F583              MOV     DPH,A
0063 E4                CLR     A
0064 93                MOVC    A,@A+DPTR
0065 FE                MOV     R6,A
0066 7401              MOV     A,#01H
0068 93                MOVC    A,@A+DPTR
0069 FF                MOV     R7,A
006A 900000      R     MOV     DPTR,#?_CapSense_CalcCentroid?BYTE+03H
006D EE                MOV     A,R6
006E F0                MOVX    @DPTR,A
006F A3                INC     DPTR
0070 EF                MOV     A,R7
0071 F0                MOVX    @DPTR,A
0072 900000      R     MOV     DPTR,#maximum
0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
0077 900000      R     MOV     DPTR,#offset
007A E0                MOVX    A,@DPTR
007B FD                MOV     R5,A
007C 900000      R     MOV     DPTR,#count
007F E0                MOVX    A,@DPTR
0080 FB                MOV     R3,A
0081 900000      R     MOV     DPTR,#widget
0084 E0                MOVX    A,@DPTR
0085 FE                MOV     R6,A
0086 7400        R     MOV     A,#LOW CapSense_noiseThreshold
0088 2E                ADD     A,R6
0089 F582              MOV     DPL,A
008B E4                CLR     A
008C 3400        R     ADDC    A,#HIGH CapSense_noiseThreshold
008E F583              MOV     DPH,A
0090 E0                MOVX    A,@DPTR
0091 FE                MOV     R6,A
0092 900000      R     MOV     DPTR,#?_CapSense_CalcCentroid?BYTE+05H
0095 EE                MOV     A,R6
0096 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         08/27/2015 14:50:40 PAGE 72  

0097 120000      R     LCALL   _CapSense_CalcCentroid
009A 7E00              MOV     R6,#00H
009C 900000      R     MOV     DPTR,#position
009F EE                MOV     A,R6
00A0 F0                MOVX    @DPTR,A
00A1 A3                INC     DPTR
00A2 EF                MOV     A,R7
00A3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1362
00A4 800A              SJMP    ?C0080
00A6         ?C0079:
                                           ; SOURCE LINE # 1364
                                           ; SOURCE LINE # 1366
00A6 900000      R     MOV     DPTR,#position
00A9 74FF              MOV     A,#0FFH
00AB F0                MOVX    @DPTR,A
00AC A3                INC     DPTR
00AD 74FF              MOV     A,#0FFH
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1375
00B0         ?C0080:
                                           ; SOURCE LINE # 1378
00B0 900000      R     MOV     DPTR,#position
00B3 E0                MOVX    A,@DPTR
00B4 FE                MOV     R6,A
00B5 A3                INC     DPTR
00B6 E0                MOVX    A,@DPTR
00B7 FF                MOV     R7,A
                                           ; SOURCE LINE # 1379
00B8         ?C0081:
00B8 22                RET     
             ; FUNCTION _CapSense_GetCentroidPos (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2973    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =     54      80
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
