C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CAPSENSE
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\CapSense.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.0\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\CapSense.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\CapSense.lst) CD DB N
                    -OIP OT(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\CapSense.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CapSense.c
   3          * Version 3.10
   4          *
   5          * Description:
   6          *  This file provides the source code of scanning APIs for the CapSense CSD 
   7          *  component.
   8          *
   9          * Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2011, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "CapSense.h"
  19          
  20          /* Rb init function */
  21          #if (CapSense_CURRENT_SOURCE == CapSense_EXTERNAL_RB)
                  void CapSense_InitRb(void);
              #endif /* End CapSense_CURRENT_SOURCE */ 
  24          
  25          #if (CapSense_IS_COMPLEX_SCANSLOTS)
                  void CapSense_EnableScanSlot(uint8 slot) ;
                  void CapSense_DisableScanSlot(uint8 slot) ;
                  
              #else
  30              #define CapSense_EnableScanSlot(slot)   CapSense_EnableSensor(slot)
  31              #define CapSense_DisableScanSlot(slot)  CapSense_DisableSensor(slot)
  32          
  33          #endif  /* End CapSense_IS_COMPLEX_SCANSLOTS */
  34          
  35          /* Helper functions - do nto part of public interface*/
  36          
  37          /* Find next sensor for One Channel design */
  38          #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
  39              uint8 CapSense_FindNextSensor(uint8 snsIndex) ;
  40          #endif  /* End CapSense_DESIGN_TYPE */
  41          
  42          /* Find next pair for Two Channels design */
  43           #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                  uint8 CapSense_FindNextPair(uint8 snsIndex) ;
              #endif  /* End CapSense_DESIGN_TYPE */
  46          
  47          /* Start and Compete the scan */
  48          void CapSense_PreScan(uint8 sensor) ;
  49          #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
  50              void CapSense_PostScan(uint8 sensor);
  51          #else
                  void CapSense_PostScanCh0(uint8 sensor);
                  void CapSense_PostScanCh1(uint8 sensor);
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 2   

              #endif  /* End CapSense_DESIGN_TYPE */
  55          
  56          /* Idac functions definitions */
  57          #if (CapSense_CURRENT_SOURCE)
  58              void CapSense_SetIdacRange(uint8 range) ;
  59              void CapSense_IdacCH0_Init(void) ;
  60              void CapSense_IdacCH0_Enable(void) ;
  61              void CapSense_IdacCH0_SetRange(uint8 range) ;
  62              void CapSense_IdacCH0_DacTrim(void) ;
  63              void CapSense_IdacCH0_SetValue(uint8 value) ;
  64              void CapSense_IdacCH0_Stop(void) ;
  65              
  66              #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                      void CapSense_IdacCH1_Init(void) ;
                      void CapSense_IdacCH1_Enable(void) ;
                      void CapSense_IdacCH1_SetRange(uint8 range) ;
                      void CapSense_IdacCH1_DacTrim(void) ;
                      void CapSense_IdacCH1_SetValue(uint8 value) ;
                      void CapSense_IdacCH1_Stop(void) ;
                  #endif /* End CapSense_CURRENT_SOURCE */ 
  74              
  75          #endif  /* End CapSense_DESIGN_TYPE */
  76          
  77          #if (CapSense_PRESCALER_OPTIONS)
  78              void CapSense_SetPrescaler(uint8 prescaler) ;
  79          #endif  /* End CapSense_PRESCALER_OPTIONS */
  80          void CapSense_SetScanSpeed(uint8 scanspeed) ;
  81          
  82          /* SmartSense functions */
  83          #if (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING)
  84              extern void CapSense_AutoTune(void);
  85              uint8 CapSense_lowLevelTuningDone = 0u;
  86          #endif /* End (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING) */
  87          
  88          uint8 CapSense_initVar = 0u;
  89                      
  90          /* Global software variables */
  91          volatile uint8 CapSense_csv = 0u;            /* CapSense CSD status, control variable */
  92          volatile uint8 CapSense_sensorIndex = 0u;    /* Index of scannig sensor */
  93          
  94          #if (CapSense_CURRENT_SOURCE == CapSense_EXTERNAL_RB)
                  uint8  CapSense_RbCh0_cur = CapSense_RBLEED1;
                  #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                      uint8  CapSense_RbCh1_cur = (CapSense_RBLEED1 + CapSense_TOTAL_RB_NUMBER__CH0);
                  #endif /* End (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)*/ 
              #else
 100              #if (CY_PSOC3_ES2 || CY_PSOC5_ES1)
 101                  uint8 CapSense_idac_cfg_restore = 0u;
 102                  uint8 CapSense_idac_ch0_cr0reg = 0u;
 103                  #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                          uint8 CapSense_idac_ch1_cr0reg = 0u;
                      #endif /* End (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)*/ 
 106              #endif /* End (CY_PSOC3_ES2 || CY_PSOC5_ES1) */
 107          #endif /* (CapSense_CURRENT_SOURCE == CapSense_EXTERNAL_RB) */ 
 108                  
 109          /* Global array of Raw Counts */
 110          uint16 CapSense_SensorRaw[CapSense_TOTAL_SENSOR_COUNT] = {0u};
 111          
 112          uint8 CapSense_SensorEnableMask[(((CapSense_TOTAL_SENSOR_COUNT - 1u) / 8u) + 1u)] = {
 113          0x3u, };
 114          
 115          uint8 CYXDATA * const CYCODE CapSense_pcTable[] = {
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 3   

 116              (uint8 CYXDATA *)CapSense_PortCH0__Button0__BTN__PC, 
 117              (uint8 CYXDATA *)CapSense_PortCH0__Button1__BTN__PC, 
 118          };
 119          
 120          const uint8 CYCODE CapSense_portTable[] = {
 121              CapSense_PortCH0__Button0__BTN__PORT, 
 122              CapSense_PortCH0__Button1__BTN__PORT, 
 123          };
 124          
 125          const uint8 CYCODE CapSense_maskTable[] = {
 126              CapSense_PortCH0__Button0__BTN__MASK,
 127              CapSense_PortCH0__Button1__BTN__MASK,
 128          };
 129          
 130          uint8 CYXDATA * const CYCODE CapSense_csTable[] = {
 131              (uint8 CYXDATA *)CYREG_PRT0_CAPS_SEL, (uint8 CYXDATA *)CYREG_PRT1_CAPS_SEL, (uint8 CYXDATA *)CYREG_PRT
             -2_CAPS_SEL,
 132              (uint8 CYXDATA *)CYREG_PRT3_CAPS_SEL, (uint8 CYXDATA *)CYREG_PRT4_CAPS_SEL, (uint8 CYXDATA *)CYREG_PRT
             -5_CAPS_SEL,
 133              (uint8 CYXDATA *)CYREG_PRT6_CAPS_SEL, (uint8 CYXDATA *)CYREG_PRT15_CAPS_SEL,
 134          };
 135          
 136          uint8 CapSense_idacSettings[] = {
 137              200u,200u,
 138          };
 139          
 140          uint8 CapSense_widgetResolution[] = {
 141              CapSense_PWM_RESOLUTION_10_BITS,
 142              CapSense_PWM_RESOLUTION_10_BITS,
 143          };
 144          
 145          uint8 CapSense_AnalogSwitchDivider[CapSense_TOTAL_SCANSLOT_COUNT];
 146          const uint8 CYCODE CapSense_widgetNumber[] = {
 147              0u, /* Button0__BTN */
 148              1u, /* Button1__BTN */
 149              
 150          };
 151          
 152          
 153          
 154          /*******************************************************************************
 155          * Function Name: CapSense_Init
 156          ********************************************************************************
 157          *
 158          * Summary:
 159          *  Inits default CapSense configuration provided with customizer that defines 
 160          *  mode of component operations and resets all sensors to an inactive state.
 161          *
 162          * Parameters:
 163          *  None
 164          *
 165          * Return:
 166          *  None
 167          *
 168          *******************************************************************************/
 169          void CapSense_Init(void) 
 170          {
 171   1          #if ( (CapSense_PRS_OPTIONS) || \
 172   1                (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_UDB) || \
 173   1                ( (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) && \
 174   1                  (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_UDB)) )
 175   1              
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 4   

 176   1              uint8 enableInterrupts;
 177   1          #endif /* End ( (CapSense_PRS_OPTIONS) || \
 178   1                          (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_UDB) || \
 179   1                          ( (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) && \
 180   1                            (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_UDB)) ) */
 181   1          
 182   1          /* Clear all sensors */
 183   1          CapSense_ClearSensors();
 184   1      
 185   1          /* Set Prescaler */
 186   1          #if (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_UDB)
 187   1              /* Do nothing = config without prescaler */
 188   1          #elif (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_FF)
                      CapSense_PRESCALER_CONTROL_REG   = (CapSense_PRESCALER_CTRL_ENABLE |
                                                              CapSense_PRESCALER_CTRL_MODE_CMP);
                                                             
                      CapSense_PRESCALER_CONTROL2_REG |= CapSense_PRESCALER_CTRL_CMP_LESS_EQ;
              /*         
                      CY_SET_REG16(CapSense_PRESCALER_PERIOD_PTR, (uint16) CapSense_PRESCALER_VALUE);
                      CY_SET_REG16(CapSense_PRESCALER_COMPARE_PTR, (uint16) (CapSense_PRESCALER_VALUE >> 0x01u));
              */        
                  #else
                      /* Do nothing = config without prescaler */
                  #endif  /* End (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_UDB) */
 200   1      
 201   1          /* Set PRS */
 202   1          #if (CapSense_PRS_OPTIONS)
 203   1              CapSense_SetAnalogSwitchesSource(CapSense_ANALOG_SWITCHES_SRC_PRS);
 204   1          #endif
 205   1      
 206   1          #if (CapSense_PRS_OPTIONS == CapSense_PRS_8BITS)
                      /* Aux control set FIFO as REG */
                      enableInterrupts = CyEnterCriticalSection();
                      CapSense_AUX_CONTROL_A_REG |= CapSense_AUXCTRL_FIFO_SINGLE_REG;
                      CyExitCriticalSection(enableInterrupts);
                      
                      /* Write polynomial */
                      CapSense_POLYNOM_REG   = CapSense_PRS8_DEFAULT_POLYNOM;
                      /* Write FIFO with seed */
                      CapSense_SEED_COPY_REG = CapSense_MEASURE_FULL_RANGE_LOW;
                      
                  #elif (CapSense_PRS_OPTIONS == CapSense_PRS_16BITS)
 218   1              /* Aux control set FIFO as REG */ 
 219   1              enableInterrupts = CyEnterCriticalSection();  
 220   1              CapSense_AUX_CONTROL_A_REG |= CapSense_AUXCTRL_FIFO_SINGLE_REG;
 221   1              CapSense_AUX_CONTROL_B_REG |= CapSense_AUXCTRL_FIFO_SINGLE_REG;
 222   1              CyExitCriticalSection(enableInterrupts);
 223   1              
 224   1              /* Write polynomial */
 225   1              CY_SET_REG16(CapSense_POLYNOM_PTR, CapSense_PRS16_DEFAULT_POLYNOM);
 226   1              /* Write FIFO with seed */
 227   1              CY_SET_REG16(CapSense_SEED_COPY_PTR, CapSense_MEASURE_FULL_RANGE);
 228   1                      
 229   1          #elif (CapSense_PRS_OPTIONS == CapSense_PRS_16BITS_4X)
                      /* Aux control set FIFO as REG */
                      enableInterrupts = CyEnterCriticalSection();
                      CapSense_AUX_CONTROL_A_REG  |= CapSense_AUXCTRL_FIFO_SINGLE_REG;
                      CyExitCriticalSection(enableInterrupts);
                      
                      /* Write polynomial */
                      CapSense_POLYNOM_A__D1_REG   = HI8(CapSense_PRS16_DEFAULT_POLYNOM);
                      CapSense_POLYNOM_A__D0_REG   = LO8(CapSense_PRS16_DEFAULT_POLYNOM);
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 5   

                      /* Write FIFO with seed */
                      CapSense_SEED_COPY_A__F1_REG = CapSense_MEASURE_FULL_RANGE_LOW;
                      CapSense_SEED_COPY_A__F0_REG = CapSense_MEASURE_FULL_RANGE_LOW; 
                      
                  #else
                      /* Do nothing = config without PRS */
                  #endif  /* End (CapSense_PRS_OPTIONS == CapSense_PRS_8BITS) */ 
 245   1          
 246   1          /* Set ScanSpeed */
 247   1          CapSense_SCANSPEED_PERIOD_REG = CapSense_SCANSPEED_VALUE;
 248   1          
 249   1          /* Set the Measure */
 250   1          #if (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF)
                      /* Window PWM */
                      CapSense_PWM_CH0_CONTROL_REG      = CapSense_MEASURE_CTRL_ENABLE;
                      CapSense_PWM_CH0_CONTROL2_REG    |= CapSense_MEASURE_CTRL_PULSEWIDTH;
                      CY_SET_REG16(CapSense_PWM_CH0_COUNTER_PTR, CapSense_MEASURE_FULL_RANGE);
                      
                      /* Raw Counter */
                      CapSense_RAW_CH0_CONTROL_REG      = CapSense_MEASURE_CTRL_ENABLE;
                      CapSense_RAW_CH0_CONTROL2_REG    |= CapSense_MEASURE_CTRL_PULSEWIDTH;
                      CY_SET_REG16(CapSense_RAW_CH0_PERIOD_PTR, CapSense_MEASURE_FULL_RANGE);
                  
                  #else
 262   1              /*Window PWM and Raw Counter AUX set */
 263   1              enableInterrupts = CyEnterCriticalSection();
 264   1              CapSense_PWM_CH0_AUX_CONTROL_REG |= CapSense_AUXCTRL_FIFO_SINGLE_REG;
 265   1              CapSense_RAW_CH0_AUX_CONTROL_REG |= CapSense_AUXCTRL_FIFO_SINGLE_REG;
 266   1              CyExitCriticalSection(enableInterrupts);
 267   1              
 268   1              /* Window PWM */
 269   1              CapSense_PWM_CH0_ADD_VALUE_REG    = CapSense_MEASURE_FULL_RANGE_LOW;
 270   1              CapSense_PWM_CH0_PERIOD_LO_REG    = CapSense_MEASURE_FULL_RANGE_LOW;
 271   1              CapSense_PWM_CH0_COUNTER_LO_REG   = CapSense_MEASURE_FULL_RANGE_LOW;
 272   1              
 273   1              /* Raw Counter */
 274   1              CapSense_RAW_CH0_ADD_VALUE_REG    = CapSense_MEASURE_FULL_RANGE_LOW;
 275   1              CapSense_RAW_CH0_PERIOD_HI_REG    = CapSense_MEASURE_FULL_RANGE_LOW;
 276   1              CapSense_RAW_CH0_PERIOD_LO_REG    = CapSense_MEASURE_FULL_RANGE_LOW;
 277   1              
 278   1          #endif  /* (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF) */ 
 279   1          
 280   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                      #if (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_FF)
                          /* Window PWM */
                          CapSense_PWM_CH1_CONTROL_REG      = CapSense_MEASURE_CTRL_ENABLE;
                          CapSense_PWM_CH1_CONTROL2_REG    |= CapSense_MEASURE_CTRL_PULSEWIDTH;
                          CY_SET_REG16(CapSense_PWM_CH1_COUNTER_PTR, CapSense_MEASURE_FULL_RANGE);
                          
                          /* Raw Counter */
                          CapSense_RAW_CH1_CONTROL_REG      = CapSense_MEASURE_CTRL_ENABLE;
                          CapSense_RAW_CH1_CONTROL2_REG    |= CapSense_MEASURE_CTRL_PULSEWIDTH;
                          CY_SET_REG16(CapSense_RAW_CH1_PERIOD_PTR, CapSense_MEASURE_FULL_RANGE);
                         
                      #else
                          /*Window PWM and Raw Counter AUX set */
                          enableInterrupts = CyEnterCriticalSection();
                          CapSense_PWM_CH1_AUX_CONTROL_REG |= CapSense_AUXCTRL_FIFO_SINGLE_REG;
                          CapSense_RAW_CH1_AUX_CONTROL_REG |= CapSense_AUXCTRL_FIFO_SINGLE_REG;
                          CyExitCriticalSection(enableInterrupts);
                          
                          /* Window PWM */
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 6   

                          CapSense_PWM_CH1_ADD_VALUE_REG    = CapSense_MEASURE_FULL_RANGE_LOW;
                          CapSense_PWM_CH1_PERIOD_LO_REG    = CapSense_MEASURE_FULL_RANGE_LOW;
                          CapSense_PWM_CH1_COUNTER_LO_REG   = CapSense_MEASURE_FULL_RANGE_LOW;
                          
                          /* Raw Counter */
                          
                          CapSense_RAW_CH1_ADD_VALUE_REG    = CapSense_MEASURE_FULL_RANGE_LOW;
                          CapSense_RAW_CH1_PERIOD_HI_REG    = CapSense_MEASURE_FULL_RANGE_LOW;
                          CapSense_RAW_CH1_PERIOD_LO_REG    = CapSense_MEASURE_FULL_RANGE_LOW;
                          
                      #endif  /* End (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_FF) */
                  
                  #endif  /* End (CapSense_DESIGN_TYPE == TWO_CHANNELS_DESIGN)*/
 313   1          
 314   1          /* Setup ISR */
 315   1          CyIntDisable(CapSense_IsrCH0_ISR_NUMBER);
 316   1          CyIntSetVector(CapSense_IsrCH0_ISR_NUMBER, CapSense_IsrCH0_ISR);
 317   1          CyIntSetPriority(CapSense_IsrCH0_ISR_NUMBER, CapSense_IsrCH0_ISR_PRIORITY);
 318   1          
 319   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                      CyIntDisable(CapSense_IsrCH1_ISR_NUMBER);
                      CyIntSetVector(CapSense_IsrCH1_ISR_NUMBER, CapSense_IsrCH1_ISR);
                      CyIntSetPriority(CapSense_IsrCH1_ISR_NUMBER, CapSense_IsrCH1_ISR_PRIORITY);
                  #endif  /* End CapSense_DESIGN_TYPE */
 324   1          
 325   1          /* Setup AMux Bus: Connect Cmod, Cmp, Idac */
 326   1          CapSense_AMuxCH0_Init();
 327   1          CapSense_AMuxCH0_Connect(CapSense_AMuxCH0_CMOD_CHANNEL);
 328   1          CapSense_AMuxCH0_Connect(CapSense_AMuxCH0_CMP_VP_CHANNEL);
 329   1          #if (CapSense_CURRENT_SOURCE)
 330   1              CapSense_AMuxCH0_Connect(CapSense_AMuxCH0_IDAC_CHANNEL);
 331   1          #endif  /* End CapSense_CURRENT_SOURCE */
 332   1          
 333   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) 
                      CapSense_AMuxCH1_Init();
                      CapSense_AMuxCH1_Connect(CapSense_AMuxCH1_CMOD_CHANNEL);
                      CapSense_AMuxCH1_Connect(CapSense_AMuxCH1_CMP_VP_CHANNEL);
                      #if (CapSense_CURRENT_SOURCE)
                          CapSense_AMuxCH1_Connect(CapSense_AMuxCH1_IDAC_CHANNEL);
                      #endif  /* End CapSense_CURRENT_SOURCE */
                  #endif  /* End CapSense_DESIGN_TYPE */
 341   1          
 342   1          /* Int Rb */
 343   1          #if (CapSense_CURRENT_SOURCE == CapSense_EXTERNAL_RB)
                      CapSense_InitRb();
                  #endif /* End (CapSense_CURRENT_SOURCE == CapSense_EXTERNAL_RB) */
 346   1          
 347   1          /* Enable window generation */
 348   1          CapSense_CONTROL_REG |= CapSense_CTRL_WINDOW_EN__CH0;
 349   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                      CapSense_CONTROL_REG |= CapSense_CTRL_WINDOW_EN__CH1;
                  #endif  /* End CapSense_DESIGN_TYPE */
 352   1          
 353   1          /* Initialize Cmp and Idac */
 354   1          CapSense_CompCH0_Init();
 355   1          #if (CapSense_CURRENT_SOURCE)
 356   1              CapSense_IdacCH0_Init();
 357   1          #endif  /* End CapSense_CURRENT_SOURCE */
 358   1          
 359   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) 
                      CapSense_CompCH1_Init();
                      #if (CapSense_CURRENT_SOURCE)
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 7   

                          CapSense_IdacCH1_Init();
                      #endif  /* End CapSense_CURRENT_SOURCE */
                  #endif  /* End CapSense_DESIGN_TYPE */
 365   1          
 366   1          /* Initialize Vref if as VDAC */
 367   1          #if (CapSense_VREF_OPTIONS == CapSense_VREF_VDAC)
                      CapSense_VdacRefCH0_Init();
                      #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                          CapSense_VdacRefCH1_Init();
                      #endif  /* End CapSense_DESIGN_TYPE */
                  #endif  /* End CapSense_VREF_OPTIONS */
 373   1      }
 374          
 375          
 376          /*******************************************************************************
 377          * Function Name: CapSense_Enable
 378          ********************************************************************************
 379          *
 380          * Summary:
 381          *  Enables active mode power template bits for number of component used within 
 382          *  CapSense.
 383          *
 384          * Parameters:
 385          *  None
 386          *
 387          * Return:
 388          *  None
 389          *
 390          *******************************************************************************/
 391          void CapSense_Enable(void) 
 392          {
 393   1          uint8 enableInterrupts;
 394   1          
 395   1          enableInterrupts = CyEnterCriticalSection();
 396   1          
 397   1          /* Enable Prescaler */
 398   1          #if (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_UDB)
 399   1              /* Do nothing  for UDB */
 400   1          #elif (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_FF)
                      CapSense_PRESCALER_ACT_PWRMGR_REG  |= CapSense_PRESCALER_ACT_PWR_EN;
                      CapSense_PRESCALER_STBY_PWRMGR_REG |= CapSense_PRESCALER_STBY_PWR_EN;
                      
                  #else
                      /* Do nothing = config without prescaler */
                  #endif  /* End (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_UDB) */
 407   1          
 408   1          /* Enable ScanSpeed */
 409   1          CapSense_SCANSPEED_AUX_CONTROL_REG |= CapSense_SCANSPEED_CTRL_ENABLE;
 410   1          
 411   1          /* Enable Measure CH0 */
 412   1          #if (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF)
                      /* Window PWM */
                      CapSense_PWM_CH0_ACT_PWRMGR_REG  |= CapSense_PWM_CH0_ACT_PWR_EN;
                      CapSense_PWM_CH0_STBY_PWRMGR_REG |= CapSense_PWM_CH0_STBY_PWR_EN;
                      
                      /* Raw Counter */
                      CapSense_RAW_CH0_ACT_PWRMGR_REG  |= CapSense_RAW_CH0_ACT_PWR_EN;
                      CapSense_RAW_CH0_STBY_PWRMGR_REG |= CapSense_RAW_CH0_STBY_PWR_EN;
                      
                  #else
 422   1              /* Window PWM -  Do nothing */
 423   1              /* Raw Counter - Do nothing */
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 8   

 424   1              
 425   1          #endif  /* (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF) */ 
 426   1          
 427   1          /* Enable Measure CH1*/
 428   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                      #if (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_FF)
                          /* Window PWM */
                          CapSense_PWM_CH1_ACT_PWRMGR_REG  |= CapSense_PWM_CH1_ACT_PWR_EN;
                          CapSense_PWM_CH1_STBY_PWRMGR_REG |= CapSense_PWM_CH1_STBY_PWR_EN;
                          
                          /* Raw Counter */
                          CapSense_RAW_CH1_ACT_PWRMGR_REG  |= CapSense_RAW_CH1_ACT_PWR_EN;
                          CapSense_RAW_CH1_STBY_PWRMGR_REG |= CapSense_RAW_CH1_STBY_PWR_EN;
                         
                      #else
                      /* Window PWM -  Do nothing */
                      /* Raw Counter - Do nothing */
                      
                      #endif  /* End (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_FF) */
                  
                  #endif  /* End (CapSense_DESIGN_TYPE == TWO_CHANNELS_DESIGN)*/
 445   1          
 446   1          /* Enable the Clock */
 447   1          #if (CapSense_CLOCK_SOURCE == CapSense_INTERNAL_CLOCK)
 448   1             CapSense_IntClock_Enable();
 449   1          #endif  /* End CapSense_CLOCK_SOURCE */
 450   1          
 451   1          /* Setup Cmp and Idac */
 452   1          CapSense_CompCH0_Enable();
 453   1          #if (CapSense_CURRENT_SOURCE)
 454   1              CapSense_IdacCH0_Enable();
 455   1          #endif  /* End CapSense_CURRENT_SOURCE */
 456   1          
 457   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) 
                      CapSense_CompCH1_Enable();
                      #if (CapSense_CURRENT_SOURCE)
                          CapSense_IdacCH1_Enable();
                      #endif  /* End CapSense_CURRENT_SOURCE */
                  #endif  /* End CapSense_DESIGN_TYPE */
 463   1          
 464   1          /* Enable Vref */
 465   1          #if (CapSense_VREF_OPTIONS == CapSense_VREF_VDAC)
                      CapSense_VdacRefCH0_Enable();
                      CapSense_VdacRefCH0_SetValue(CapSense_VdacRefCH0_DEFAULT_DATA);
                      #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                          CapSense_VdacRefCH1_Enable();
                          CapSense_VdacRefCH1_SetValue(CapSense_VdacRefCH1_DEFAULT_DATA);
                      #endif  /* End (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) */
                  #else
 473   1              /* Enable CapSense Buf */
 474   1              CapSense_BufCH0_STBY_PWRMGR_REG |= CapSense_BufCH0_STBY_PWR_EN;
 475   1              CapSense_BufCH0_ACT_PWRMGR_REG  |= CapSense_BufCH0_ACT_PWR_EN;
 476   1              
 477   1              #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                          CapSense_BufCH1_STBY_PWRMGR_REG |= CapSense_BufCH1_STBY_PWR_EN;
                          CapSense_BufCH1_ACT_PWRMGR_REG  |= CapSense_BufCH1_ACT_PWR_EN;
                      #endif  /* End (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) */
 481   1          #endif  /* End (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS) */
 482   1          
 483   1          /* Set reference on AMux Bus */
 484   1          #if (CapSense_VREF_OPTIONS == CapSense_VREF_VDAC)
                      /* Connect Vdac to AMux Bus */
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 9   

                      CapSense_AMuxCH0_Connect(CapSense_AMuxCH0_VREF_CHANNEL);
                      #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                          CapSense_AMuxCH1_Connect(CapSense_AMuxCH1_VREF_CHANNEL);
                      #endif  /* End (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) */
                      
                  #else
 492   1              /* Enable CapSense Buf */
 493   1              CapSense_BufCH0_CAPS_CFG0_REG |= CapSense_CSBUF_ENABLE;
 494   1              
 495   1              #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                          CapSense_BufCH1_CAPS_CFG0_REG |= CapSense_CSBUF_ENABLE;
                      #endif  /* End (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) */
 498   1          #endif  /* End (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS)*/
 499   1          
 500   1          CyExitCriticalSection(enableInterrupts);
 501   1          
 502   1          /* Enable interrupt */
 503   1          CyIntEnable(CapSense_IsrCH0_ISR_NUMBER);
 504   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) 
                      CyIntEnable(CapSense_IsrCH1_ISR_NUMBER);
                  #endif  /* End CapSense_DESIGN_TYPE */
 507   1          
 508   1          /* Set CapSense Enable state */
 509   1          CapSense_CONTROL_REG |= CapSense_CTRL_CAPSENSE_EN;
 510   1      }
 511          
 512          
 513          /*******************************************************************************
 514          * Function Name: CapSense_Start
 515          ********************************************************************************
 516          *
 517          * Summary:
 518          *  Initializes registers and starts the CSD method of CapSense component. Reset 
 519          *  all sensors to an inactive state. Enables interrupts for sensors scanning.
 520          *  When Auto Tuning (SmartSense) mode is selected the tuning procedure is 
 521          *  applied for all sensors.
 522          *
 523          * Parameters:
 524          *  None
 525          *
 526          * Return:
 527          *  None
 528          *
 529          * Global Variables:
 530          *  CapSense_initVar - used to check initial configuration, modified on 
 531          *  first function call.
 532          *  CapSense_lowLevelTuningDone - used to notify the Tuner GUI that 
 533          *  tuning of scanning parameters are done.
 534          *
 535          * Reentrant:
 536          *  No
 537          *
 538          *******************************************************************************/
 539          void CapSense_Start(void)
 540          {
 541   1          if (CapSense_initVar == 0u)
 542   1          {
 543   2              CapSense_Init();
 544   2              CapSense_initVar = 1u;
 545   2          }
 546   1          CapSense_Enable();
 547   1          
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 10  

 548   1          /* AutoTunning start */
 549   1          #if (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING)
 550   1              /* AutoTune by sensor or pair of sensor basis */
 551   1              CapSense_AutoTune();
 552   1              CapSense_lowLevelTuningDone = 1u;
 553   1          #endif /* End (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING) */
 554   1      }
 555          
 556          
 557          /*******************************************************************************
 558          * Function Name: CapSense_Stop
 559          ********************************************************************************
 560          *
 561          * Summary:
 562          *  Stops the sensors scanner, disables internal interrupts, and resets all 
 563          *  sensors to an inactive state. Disables Active mode power template bits for 
 564          *  number of component used within CapSense.
 565          *
 566          * Parameters:
 567          *  None
 568          *
 569          * Return:
 570          *  None
 571          *
 572          * Side Effects:
 573          *  This function should be called after scans will be completed.
 574          *
 575          *******************************************************************************/
 576          void CapSense_Stop(void) 
 577          {
 578   1          /* Stop Capsensing */
 579   1          CapSense_CONTROL_REG &= ~CapSense_CTRL_START;
 580   1          
 581   1          /* Disable interrupt */
 582   1          CyIntDisable(CapSense_IsrCH0_ISR_NUMBER);
 583   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) 
                      CyIntDisable(CapSense_IsrCH1_ISR_NUMBER);
                  #endif  /* End CapSense_DESIGN_TYPE */
 586   1          
 587   1          /* Clear all sensors */
 588   1          CapSense_ClearSensors();
 589   1          
 590   1          /* Disable Prescaler */
 591   1          #if (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_UDB)
 592   1              /* Do nothing  for UDB */
 593   1          #elif (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_FF)        
                      CapSense_PRESCALER_ACT_PWRMGR_REG  &= ~CapSense_PRESCALER_ACT_PWR_EN;
                      CapSense_PRESCALER_STBY_PWRMGR_REG &= ~CapSense_PRESCALER_STBY_PWR_EN;
                      
                  #else
                      /* Do nothing = config without prescaler */
                  #endif  /* End (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_UDB) */
 600   1          
 601   1          /* Disable ScanSpeed */
 602   1          CapSense_SCANSPEED_AUX_CONTROL_REG &= ~CapSense_SCANSPEED_CTRL_ENABLE;
 603   1          
 604   1          /* Disable Measure CH0 */
 605   1          #if (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF)
                      /* Window PWM */
                      CapSense_PWM_CH0_ACT_PWRMGR_REG  &= ~CapSense_PWM_CH0_ACT_PWR_EN;
                      CapSense_PWM_CH0_STBY_PWRMGR_REG &= ~CapSense_PWM_CH0_STBY_PWR_EN;
              
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 11  

                      /* Raw Counter */
                      CapSense_RAW_CH0_ACT_PWRMGR_REG  &= ~CapSense_RAW_CH0_ACT_PWR_EN;
                      CapSense_RAW_CH0_STBY_PWRMGR_REG &= ~CapSense_RAW_CH0_STBY_PWR_EN;
              
                  #else
 615   1              /* Window PWM -  Do nothing */
 616   1              /* Raw Counter - Do nothing */
 617   1              
 618   1          #endif  /* (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF) */ 
 619   1          
 620   1          /* Disable Measure CH1 */
 621   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                      #if (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_FF)
                          /* Window PWM */
                          CapSense_PWM_CH1_ACT_PWRMGR_REG  &= ~CapSense_PWM_CH1_ACT_PWR_EN;
                          CapSense_PWM_CH1_STBY_PWRMGR_REG &= ~CapSense_PWM_CH1_STBY_PWR_EN;
                  
                          /* Raw Counter */
                          CapSense_RAW_CH1_ACT_PWRMGR_REG  &= ~CapSense_RAW_CH1_ACT_PWR_EN;
                          CapSense_RAW_CH1_STBY_PWRMGR_REG &= ~CapSense_RAW_CH1_STBY_PWR_EN;
                         
                      #else
                      /* Window PWM -  Do nothing */
                      /* Raw Counter - Do nothing */
                      
                      #endif  /* End (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_FF) */
                  
                  #endif  /* End (CapSense_DESIGN_TYPE == TWO_CHANNELS_DESIGN)*/
 638   1          
 639   1          /* Disable the Clock */
 640   1          #if (CapSense_CLOCK_SOURCE == CapSense_INTERNAL_CLOCK)
 641   1             CapSense_IntClock_Stop();
 642   1          #endif  /* End CapSense_CLOCK_SOURCE */
 643   1          
 644   1          /* Disable power from Cmp and Idac */
 645   1          CapSense_CompCH0_Stop();
 646   1          #if (CapSense_CURRENT_SOURCE)
 647   1              CapSense_IdacCH0_Stop();
 648   1          #endif  /* End CapSense_CURRENT_SOURCE */
 649   1          
 650   1          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) 
                      CapSense_CompCH1_Stop();
                      #if (CapSense_CURRENT_SOURCE)
                          CapSense_IdacCH1_Stop();
                      #endif  /* End CapSense_CURRENT_SOURCE */
                  #endif  /* End CapSense_DESIGN_TYPE */    
 656   1          
 657   1          /* Disable Vref if as VDAC */
 658   1          #if (CapSense_VREF_OPTIONS == CapSense_VREF_VDAC)
                      CapSense_VdacRefCH0_Stop();
                      #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                          CapSense_VdacRefCH1_Stop();
                      #endif  /* End CapSense_DESIGN_TYPE */
                  #endif  /* End CapSense_VREF_OPTIONS */
 664   1      
 665   1          #if (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS)
                      /* The Idac turn off before */
                  #else
 668   1              /* Enable CapSense Buf */
 669   1              CapSense_BufCH0_CAPS_CFG0_REG &= ~CapSense_CSBUF_ENABLE;
 670   1              CapSense_BufCH0_ACT_PWRMGR_REG &= ~CapSense_BufCH0_ACT_PWR_EN;
 671   1              CapSense_BufCH0_STBY_PWRMGR_REG &= ~CapSense_BufCH0_STBY_PWR_EN;
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 12  

 672   1              
 673   1              #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                          CapSense_BufCH1_CAPS_CFG0_REG &= ~CapSense_CSBUF_ENABLE;
                          CapSense_BufCH1_ACT_PWRMGR_REG &= ~CapSense_BufCH1_ACT_PWR_EN;
                          CapSense_BufCH1_STBY_PWRMGR_REG &= ~CapSense_BufCH1_STBY_PWR_EN;
                      #endif  /* End (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) */
 678   1          #endif  /* End (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS) */
 679   1          
 680   1          /* Set CapSense Disable state */
 681   1          CapSense_CONTROL_REG &= ~CapSense_CTRL_CAPSENSE_EN;
 682   1      }
 683          
 684          
 685          #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
 686              /*******************************************************************************
 687              * Function Name: CapSense_FindNextSensor
 688              ********************************************************************************
 689              *
 690              * Summary:
 691              *  Finds next sensor to scan. 
 692              *
 693              * Parameters:
 694              *  snsIndex:  Current index of sensor.
 695              *
 696              * Return:
 697              *  Returns the next sensor index to scan.
 698              *
 699              * Global Variables:
 700              *  CapSense_SensorEnableMask[ ] - used to store bit masks of enabled 
 701              *  sensors.
 702              *  CapSense_SensorEnableMask[0] contains the masked bits for sensors 0
 703              *  through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 704              *  CapSense_SensorEnableMask[1] contains the masked bits for sensors 
 705              *  8 through 15 (if needed), and so on.
 706              *    0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 707              *    1 - sensor scans by CapSense_ScanEnabledWidgets().
 708              *
 709              * Note: 
 710              *  This function has effect on current scanning scanning and should not
 711              *  be used outisde of component.
 712              *
 713              *******************************************************************************/
 714              uint8 CapSense_FindNextSensor(uint8 snsIndex) 
 715              {
 716   1              uint8 pos;
 717   1              uint8 enMask;
 718   1              
 719   1              /* Check if sensor enabled */
 720   1              do
 721   1              {
 722   2                  /* Proceed with the next sensor */
 723   2                  snsIndex++;
 724   2                  if(snsIndex == CapSense_TOTAL_SENSOR_COUNT)
 725   2                  {
 726   3                      break;
 727   3                  }
 728   2                  pos = (snsIndex >> 3u);
 729   2                  enMask = 0x01u << (snsIndex & 0x07u);
 730   2              }    
 731   1              while((CapSense_SensorEnableMask[pos] & enMask) == 0u);
 732   1              
 733   1              return snsIndex;
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 13  

 734   1          }
 735           #endif  /* End CapSense_DESIGN_TYPE */
 736           
 737           
 738          #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                  /*******************************************************************************
                  * Function Name: CapSense_FindNextPair
                  ********************************************************************************
                  *
                  * Summary:
                  *  Finds next pair or sensor to scan. Sets condition bits to skip scanning.
                  *  
                  * Parameters:
                  *  snsIndex:  Current index pair of sensors.
                  *
                  * Return:
                  *  Returns the next pair of sensors index to scan.
                  *
                  * Global Variables:
                  *  CapSense_SensorEnableMask[ ] - used to store bit masks of enabled 
                  *  sensors.
                  *  CapSense_SensorEnableMask[0] contains the masked bits for sensors 0
                  *  through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
                  *  CapSense_SensorEnableMask[1] contains the masked bits for sensors 
                  *  8 through 15 (if needed), and so on.
                  *    0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
                  *    1 - sensor scans by CapSense_ScanEnabledWidgets().
                  *
                  * Note: 
                  *  This function has effect on control signals set for scanning and should not
                  *  be used outisde of component.
                  *
                  *******************************************************************************/
                  uint8 CapSense_FindNextPair(uint8 snsIndex) 
                  {
                      uint8 posCh;
                      uint8 enMaskCh;
                      uint8 indexCh0 = snsIndex;
                      uint8 indexCh1 = snsIndex + CapSense_TOTAL_SENSOR_COUNT__CH0;
                      
                      /* Find enabled sensor on channel 0 */
                      do
                      {
                          /* Procced the scanning */
                          indexCh0++;
                          if (indexCh0 >= CapSense_TOTAL_SENSOR_COUNT__CH0)
                          {
                              /* Lets hadle now all from CH1 */
                              indexCh0 = CapSense_END_OF_SCAN__CH0;
                              break;
                          }
                          
                          posCh = (indexCh0 >> 3u);
                          enMaskCh = 0x01u << (indexCh0 & 0x07u);
                      }
                      while((CapSense_SensorEnableMask[posCh] & enMaskCh) == 0u);
                      
                      /* Find enabled sensor on channel 1 */
                      do
                      {
                          /* Procced the scanning */
                          indexCh1++;        
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 14  

                          if (indexCh1 >= CapSense_TOTAL_SENSOR_COUNT)
                          {
                              /* Lets hadle now all from CH0 */
                              indexCh1 = CapSense_END_OF_SCAN__CH1;
                              break;
                          }
                          
                          posCh = (indexCh1 >> 3u);
                          enMaskCh = 0x01u << (indexCh1 & 0x07u);
                      } 
                      while((CapSense_SensorEnableMask[posCh] & enMaskCh) == 0u);
                      
                      indexCh1 -= CapSense_TOTAL_SENSOR_COUNT__CH0;
                      
                      /* Find the pair to scan */
                      if(indexCh0 == indexCh1)
                      {
                          /* Scans TWO Channels */
                          snsIndex = indexCh0;
                          
                          CapSense_CONTROL_REG |= CapSense_CTRL_WINDOW_EN__CH0;
                          CapSense_CONTROL_REG |= CapSense_CTRL_WINDOW_EN__CH1;
                      }
                      else if(indexCh0 < indexCh1)
                      {
                         /* Scans Channel ONE only */
                         snsIndex = indexCh0;
                         
                         CapSense_CONTROL_REG |= CapSense_CTRL_WINDOW_EN__CH0;
                         CapSense_CONTROL_REG &= ~CapSense_CTRL_WINDOW_EN__CH1;
                      }
                      else
                      {
                          /* Scans Channel TWO only */
                          snsIndex = indexCh1;
                          
                          CapSense_CONTROL_REG |= CapSense_CTRL_WINDOW_EN__CH1;
                          CapSense_CONTROL_REG &= ~CapSense_CTRL_WINDOW_EN__CH0;
                      }
                      
                      return snsIndex;
                  }
              #endif  /* End CapSense_DESIGN_TYPE */
 839          
 840          
 841          /*******************************************************************************
 842          * Function Name: CapSense_SetScanSlotSettings
 843          ********************************************************************************
 844          *
 845          * Summary:
 846          *  Sets the scan settings of the selected scan slot (sensor or pair of sensors). 
 847          *  The scan settings incorporate IDAC value (for IDAC configurations) for every 
 848          *  sensor and resolution. The resolution is the same for all sensors within 
 849          *  widget.
 850          *
 851          * Parameters:
 852          *  slot:  Scan slot number (sensor or pair of sensors).
 853          *
 854          * Return:
 855          *  None
 856          *
 857          * Global Variables:
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 15  

 858          *  CapSense_idacSettings[] - used to store idac value for every sensor.
 859          *  CapSense_widgetResolution[] - used to store scan resolution of every 
 860          *  widget.
 861          *
 862          *******************************************************************************/
 863          void CapSense_SetScanSlotSettings(uint8 slot) 
 864          {
 865   1          uint8 widget;
 866   1          
 867   1          #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
 868   1              /* Define widget sensor belongs to */
 869   1              widget = CapSense_widgetNumber[slot];
 870   1              
 871   1              /* Set Idac Value */
 872   1              #if (CapSense_CURRENT_SOURCE)
 873   1                  CapSense_IdacCH0_SetValue(CapSense_idacSettings[slot]);
 874   1              #endif  /* End CapSense_CURRENT_SOURCE */
 875   1              
 876   1              /* Window PWM */
 877   1              #if (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF)
                          CY_SET_REG16(CapSense_PWM_CH0_PERIOD_PTR,
                              ((uint16) CapSense_widgetResolution[widget] << 8u) | CapSense_MEASURE_FULL_RANGE_LOW);
                      #else
 881   1                  CapSense_PWM_CH0_PERIOD_HI_REG = CapSense_widgetResolution[widget];
 882   1              #endif  /* End (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF) */ 
 883   1      
 884   1              #if ( (CapSense_MULTIPLE_PRESCALER_ENABLED) || \
 885   1                    (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING) )
 886   1                  CapSense_SetPrescaler(CapSense_AnalogSwitchDivider[slot]);
 887   1              #elif (CapSense_PRESCALER_OPTIONS)
                          CapSense_SetPrescaler(CapSense_AnalogSwitchDivider);
                      #endif /* ((CapSense_MULTIPLE_PRESCALER_ENABLED) || \
                                 (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING)) */
 891   1      
 892   1          #else
                      if(slot < CapSense_TOTAL_SENSOR_COUNT__CH0)
                      {
                          /* Define widget sensor belongs to */
                          widget = CapSense_widgetNumber[slot];
                          
                          /* Set Idac Value */
                          #if (CapSense_CURRENT_SOURCE)
                              CapSense_IdacCH0_SetValue(CapSense_idacSettings[slot]);
                          #endif  /* End CapSense_CURRENT_SOURCE */
                          
                          /* Set Pwm Resolution */
                          #if (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF)
                              CY_SET_REG16(CapSense_PWM_CH0_PERIOD_PTR,
                                ((uint16) CapSense_widgetResolution[widget] << 8u) | CapSense_MEASURE_FULL_RANGE_LOW);
                          #else
                              CapSense_PWM_CH0_PERIOD_HI_REG = CapSense_widgetResolution[widget];
                          #endif  /* End (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF)*/ 
                      }
                      
                      if(slot < CapSense_TOTAL_SENSOR_COUNT__CH1)
                      {
                          widget = CapSense_widgetNumber[slot+CapSense_TOTAL_SENSOR_COUNT__CH0];
                      
                          /* Set Idac Value */
                          #if (CapSense_CURRENT_SOURCE)
                              CapSense_IdacCH1_SetValue(CapSense_idacSettings[slot+CapSense_TOTAL_SENSOR_COUNT__CH0]);
                          #endif  /* End CapSense_CURRENT_SOURCE */
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 16  

                          
                          /* Set Pwm Resolution */
                          #if (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_FF)
                              CY_SET_REG16(CapSense_PWM_CH1_PERIOD_PTR,
                                ((uint16) CapSense_widgetResolution[widget] << 8u) | CapSense_MEASURE_FULL_RANGE_LOW);
                          #else
                              CapSense_PWM_CH1_PERIOD_HI_REG = CapSense_widgetResolution[widget];
                          #endif  /* End (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_FF)*/ 
                      }
              
                      #if ( (CapSense_MULTIPLE_PRESCALER_ENABLED) || \
                            (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING) )
                          CapSense_SetPrescaler(CapSense_AnalogSwitchDivider[slot]);
                      #elif (CapSense_PRESCALER_OPTIONS)
                          CapSense_SetPrescaler(CapSense_AnalogSwitchDivider);
                      #endif /* ((CapSense_MULTIPLE_PRESCALER_ENABLED) || \
                                 (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING)) */
              
                  #endif  /* End CapSense_DESIGN_TYPE */
 939   1      }
 940          
 941          
 942          /*******************************************************************************
 943          * Function Name: CapSense_ScanSensor
 944          ********************************************************************************
 945          *
 946          * Summary:
 947          *  Sets scan settings and starts scanning a sensor or pair of combined sensors
 948          *  on each channel. If two channels are configured, two sensors may be scanned 
 949          *  at the same time. After scanning is complete the isr copies the measured 
 950          *  sensor raw data to the global array. Use of the isr ensures this function 
 951          *  is non-blocking. Each sensor has a unique number within the sensor array. 
 952          *  This number is assigned by the CapSense customizer in sequence.
 953          *
 954          * Parameters:
 955          *  sensor:  Sensor number.
 956          *
 957          * Return:
 958          *  None
 959          *
 960          * Global Variables:
 961          *  CapSense_csv - used to provide status and mode of scanning process. 
 962          *  Sets busy status(scan in progress) and mode of scan as single scan.
 963          *  For two channel design the additional bits are set to define if scan a 
 964          *  pair of sensors or single one.
 965          *  CapSense_sensorIndex - used to store sensor scanning sensor number.
 966          *  Sets to provided sensor argument.
 967          *
 968          * Reentrant:
 969          *  No
 970          *
 971          *******************************************************************************/
 972          void CapSense_ScanSensor(uint8 sensor)
 973          {
 974   1          /* Clears status/control variable and set sensorIndex */
 975   1          CapSense_csv = 0u;
 976   1          CapSense_sensorIndex = sensor;
 977   1          
 978   1          #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
 979   1              /* Start of sensor scan */
 980   1              CapSense_csv = (CapSense_SW_STS_BUSY | CapSense_SW_CTRL_SINGLE_SCAN);
 981   1              CapSense_PreScan(sensor);
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 17  

 982   1              
 983   1          #else
                      /* CH0: check end of scan conditions */
                      if(sensor < CapSense_TOTAL_SENSOR_COUNT__CH0)
                      {
                          CapSense_CONTROL_REG |= CapSense_CTRL_WINDOW_EN__CH0;
                      }
                      else
                      {
                          CapSense_CONTROL_REG &= ~CapSense_CTRL_WINDOW_EN__CH0;
                      }
                      
                      /* CH1: check end of scan conditions */
                      if(sensor < CapSense_TOTAL_SENSOR_COUNT__CH1)
                      {
                          CapSense_CONTROL_REG |= CapSense_CTRL_WINDOW_EN__CH1;
                      }
                      else
                      {
                          CapSense_CONTROL_REG &= ~CapSense_CTRL_WINDOW_EN__CH1;
                      }
                      
                      /* Start sensor scan */
                      if( ((CapSense_CONTROL_REG & CapSense_CTRL_WINDOW_EN__CH0) != 0u) || 
                          ((CapSense_CONTROL_REG & CapSense_CTRL_WINDOW_EN__CH1) != 0u) )
                      {
                      
                          CapSense_csv |= (CapSense_SW_STS_BUSY | CapSense_SW_CTRL_SINGLE_SCAN);
                          CapSense_PreScan(sensor);
                      }
                      
                  #endif  /* End CapSense_DESIGN_TYPE */
1014   1      }
1015          
1016          
1017          /*******************************************************************************
1018          * Function Name: CapSense_ScanEnableWidgets
1019          ********************************************************************************
1020          *
1021          * Summary:
1022          *  Scans all of the enabled widgets. Starts scanning a sensor or pair of sensors 
1023          *  within enabled widget. The isr proceeding scanning next sensor or pair till 
1024          *  all enabled widgets will be scanned. Use of the isr ensures this function is 
1025          *  non-blocking. All widgets are enabled by default except proximity widgets. 
1026          *  Proximity widgets must be manually enabled as their long scan time is 
1027          *  incompatible with fast response desired of other widget types.
1028          *
1029          * Parameters:
1030          *  None
1031          *
1032          * Return:
1033          *  None
1034          *
1035          * Global Variables:
1036          *  CapSense_csv - used to provide status and mode of scanning process. 
1037          *  Sets busy status(scan in progress) and clears single scan mode.
1038          *  For two channel design the additional bits are set to define if scan a 
1039          *  pair of sensors or single one. 
1040          *  CapSense_sensorIndex - used to store sensor scanning sensor number.
1041          *  Sets to 0xFF and provided to function CapSense_FindNextSensor or
1042          *  CapSense_FindNextPair, these functions starts with sensor index
1043          *  increment and overflow of uint8 gives desired index 0.
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 18  

1044          *
1045          * Reentrant:
1046          *  No
1047          *
1048          *******************************************************************************/
1049          void CapSense_ScanEnabledWidgets(void)
1050          {
1051   1          /* Clears status/control variable and set sensorIndex */
1052   1          CapSense_csv = 0u;
1053   1          CapSense_sensorIndex = 0xFFu;
1054   1          
1055   1          #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
1056   1              /* Find next sensor */
1057   1              CapSense_sensorIndex = CapSense_FindNextSensor(CapSense_sensorIndex);
1058   1      
1059   1              /* Check end of scan condition */
1060   1              if(CapSense_sensorIndex < CapSense_TOTAL_SENSOR_COUNT)
1061   1              {
1062   2                  CapSense_csv |= CapSense_SW_STS_BUSY;
1063   2                  CapSense_PreScan(CapSense_sensorIndex);
1064   2              }
1065   1              
1066   1          #else
                      /* Find next sensor and set proper control register */
                      CapSense_sensorIndex = CapSense_FindNextPair(CapSense_sensorIndex);
                      
                      /* Start sensor scan */
                      if((CapSense_sensorIndex < CapSense_TOTAL_SENSOR_COUNT__CH0) || 
                         (CapSense_sensorIndex < CapSense_TOTAL_SENSOR_COUNT__CH1))
                      {
                          CapSense_csv |= CapSense_SW_STS_BUSY;
                          CapSense_PreScan(CapSense_sensorIndex);
                      }
                      
                  #endif  /* End CapSense_DESIGN_TYPE */
1079   1      }
1080          
1081          
1082          /*******************************************************************************
1083          * Function Name: CapSense_IsBusy
1084          ********************************************************************************
1085          *
1086          * Summary:
1087          *  Returns the state of CapSense component. The 1 means that scanning in 
1088          *  progress and 0 means that scanning is complete.
1089          *
1090          * Parameters:
1091          *  None
1092          *
1093          * Return:
1094          *  Returns the state of scanning. 1 - scanning in progress, 0 - scanning 
1095          *  completed.
1096          *
1097          * Global Variables:
1098          *  CapSense_csv - used to provide status and mode of scanning process. 
1099          *  Checks the busy status.
1100          *
1101          *******************************************************************************/
1102          uint8 CapSense_IsBusy(void) 
1103          {
1104   1          return ((CapSense_csv & CapSense_SW_STS_BUSY) == 
1105   1                   CapSense_SW_STS_BUSY) ? 1u : 0u;
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 19  

1106   1      }
1107          
1108          
1109          /*******************************************************************************
1110          * Function Name: CapSense_ReadSensorRaw
1111          ********************************************************************************
1112          *
1113          * Summary:
1114          *  Returns scan sensor raw data from the CapSense_SensorRaw[] array. 
1115          *  Each scan sensor has a unique number within the sensor array. This number 
1116          *  is assigned by the CapSense customizer in sequence.
1117          *
1118          * Parameters:
1119          *  sensor:  Sensor number.
1120          *
1121          * Return:
1122          *  Returns current raw data value for defined sensor number.
1123          *
1124          * Global Variables:
1125          *  CapSense_SensorRaw[] - used to store sensors raw data.
1126          *
1127          *******************************************************************************/
1128          uint16 CapSense_ReadSensorRaw(uint8 sensor) 
1129          {
1130   1          return CapSense_SensorRaw[sensor];
1131   1      }
1132          
1133          
1134          /*******************************************************************************
1135          * Function Name: CapSense_ClearSensors
1136          ********************************************************************************
1137          *
1138          * Summary:
1139          *  Resets all sensors to the non-sampling state by sequentially disconnecting
1140          *  all sensors from Analog MUX Bus and putting them to inactive state.
1141          *
1142          * Parameters:
1143          *  None
1144          *
1145          * Return:
1146          *  None
1147          *
1148          *******************************************************************************/
1149          void CapSense_ClearSensors(void) 
1150          {
1151   1          uint8 i;
1152   1         
1153   1          for (i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
1154   1          {
1155   2              CapSense_DisableScanSlot(i);
1156   2          }
1157   1      }
1158          
1159          
1160          #if (CapSense_IS_COMPLEX_SCANSLOTS)
                  /*******************************************************************************
                  * Function Name: CapSense_EnableScanSlot
                  ********************************************************************************
                  *
                  * Summary:
                  *  Configures the selected slot to measure during the next measurement 
                  *  cycle. The corresponding pin/pins are set to Analog High-Z mode and 
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 20  

                  *  connected to the Analog Mux Bus. This also enables the comparator function.
                  *
                  * Parameters:
                  *  slot:  Slot number.
                  *
                  * Return:
                  *  None
                  *
                  * Global Constants:
                  *  CapSense_portTable[]  - used to store the port number that pin 
                  *  belongs to for every sensor.
                  *  CapSense_maskTable[]  - used to store the pin within the port for 
                  *  every sensor.
                  *  CapSense_indexTable[] - used to store indexes of complex sensors.
                  *  The offset and position in this array are stored in port and mask table for 
                  *  complex sensors.
                  *  The bit 7 (msb) is used to define the sensor type: single or complex.
                  *
                  *******************************************************************************/
                  void CapSense_EnableScanSlot(uint8 slot) 
                  {
                      uint8 j;
                      uint8 snsNumber;
                      const uint8 CYCODE *index;
                      /* Read the sensor type: single or complex */
                      uint8 snsType = CapSense_portTable[slot];
                      
                      /* Check if sensor is complex */
                      if ((snsType & CapSense_COMPLEX_SS_FLAG) == 0u)
                      {
                          /* Enable sensor (signle) */
                          CapSense_EnableSensor(slot);
                      }
                      else
                      {
                          /* Enable complex sensor */
                          snsType &= ~CapSense_COMPLEX_SS_FLAG;
                          index = &CapSense_indexTable[snsType];
                          snsNumber = CapSense_maskTable[slot];
                                      
                          for (j=0; j < snsNumber; j++)
                          {
                              CapSense_EnableSensor(index[j]);
                          }
                      } 
                  }
                  
                  
                  /*******************************************************************************
                  * Function Name: CapSense_DisableScanSlot
                  ********************************************************************************
                  *
                  * Summary:
                  *  Disables the selected slot. The corresponding pin/pis is/are disconnected 
                  *  from the Analog Mux Bus and connected to GND, High_Z or Shield electrode.
                  *
                  * Parameters:
                  *  slot:  Slot number.
                  *
                  * Return:
                  *  None
                  *
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 21  

                  * Global Variables:
                  *  CapSense_portTable[]  - used to store the port number that pin 
                  *  belongs to for every sensor.
                  *  CapSense_maskTable[]  - used to store the pin within the port for 
                  *  every sensor.
                  *  CapSense_indexTable[] - used to store indexes of complex sensors.
                  *  The offset and position in this array are stored in port and mask table for 
                  *  complex sensors.
                  *  The 7bit(msb) is used to define the sensor type: single or complex.
                  *
                  *******************************************************************************/
                  void CapSense_DisableScanSlot(uint8 slot) 
                  {
                      uint8 j;
                      uint8 snsNumber;
                      const uint8 CYCODE *index;
                      /* Read the sensor type: single or complex */
                      uint8 snsType = CapSense_portTable[slot];
                      
                      /* Check if sensor is complex */
                      if ((snsType & CapSense_COMPLEX_SS_FLAG) == 0u)
                      {
                          /* Disable sensor (signle) */
                          CapSense_DisableSensor(slot);
                      }
                      else
                      {
                          /* Disable complex sensor */
                          snsType &= ~CapSense_COMPLEX_SS_FLAG;
                          index = &CapSense_indexTable[snsType];
                          snsNumber = CapSense_maskTable[slot];
                                      
                          for (j=0; j < snsNumber; j++)
                          {
                              CapSense_DisableSensor(index[j]);
                          }
                      } 
                  }
              #endif  /* End CapSense_IS_COMPLEX_SCANSLOTS */
1269          
1270          
1271          /*******************************************************************************
1272          * Function Name: CapSense_EnableSensor
1273          ********************************************************************************
1274          *
1275          * Summary:
1276          *  Configures the selected sensor to measure during the next measurement cycle.
1277          *  The corresponding pins are set to Analog High-Z mode and connected to the
1278          *  Analog Mux Bus. This also enables the comparator function.
1279          *
1280          * Parameters:
1281          *  sensor:  Sensor number.
1282          *
1283          * Return:
1284          *  None
1285          *
1286          * Global Variables:
1287          *  CapSense_portTable[] - used to store the port number that pin 
1288          *  belongs to for every sensor.
1289          *  CapSense_maskTable[] - used to store the pin within the port for 
1290          *  every sensor.
1291          *  CapSense_csTable[]   - used to store the pointers to CAPS_SEL 
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 22  

1292          *  registers for every port.
1293          *  CapSense_pcTable[]   - used to store the pointers to PC pin 
1294          *  register for every sensor.
1295          *  CapSense_amuxIndex[] - used to store corrected AMUX index when 
1296          *  complex sensors are defeined.
1297          *
1298          *******************************************************************************/
1299          void CapSense_EnableSensor(uint8 sensor) 
1300          {
1301   1          uint8 port = CapSense_portTable[sensor];
1302   1          uint8 mask = CapSense_maskTable[sensor];
1303   1          
1304   1          #if ((CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) && \
1305   1               (CapSense_IS_COMPLEX_SCANSLOTS))
                      uint8 amuxCh = CapSense_amuxIndex[sensor];
                  #endif  /* End ((CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) && \
                                 (CapSense_IS_COMPLEX_SCANSLOTS)) */
1309   1          
1310   1          /* Make sensor High-Z */
1311   1          *CapSense_pcTable[sensor] = CapSense_PRT_PC_HIGHZ;
1312   1          
1313   1          /* Connect to DSI output */
1314   1              if(port == 15u)
1315   1              {
1316   2                      port = 7u;
1317   2              }
1318   1          *CapSense_csTable[port] |= mask;
1319   1          
1320   1          /* Connect to AMUX */
1321   1          #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
1322   1              #if (CapSense_IS_COMPLEX_SCANSLOTS)
                          CapSense_AMuxCH0_Connect(CapSense_amuxIndex[sensor]);
                      #else
1325   1                  CapSense_AMuxCH0_Connect(sensor);
1326   1              #endif  /* End CapSense_IS_COMPLEX_SCANSLOTS */
1327   1                      
1328   1          #else
                      #if (CapSense_IS_COMPLEX_SCANSLOTS)
                          if ((amuxCh & CapSense_CHANNEL1_FLAG) == 0u)
                          {
                              CapSense_AMuxCH0_Connect(amuxCh);
                          } 
                          else
                          {
                              amuxCh &= ~ CapSense_CHANNEL1_FLAG;
                              CapSense_AMuxCH1_Connect(amuxCh);
                          }
                          
                      #else
                          if (sensor < CapSense_TOTAL_SENSOR_COUNT__CH0) 
                          {
                              CapSense_AMuxCH0_Connect(sensor);
                          } 
                          else
                          {
                              CapSense_AMuxCH1_Connect(sensor - CapSense_TOTAL_SENSOR_COUNT__CH0);
                          }
                          
                      #endif  /* End CapSense_IS_COMPLEX_SCANSLOTS */
                      
                  #endif  /* End CapSense_DESIGN_TYPE */
1353   1      }
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 23  

1354          
1355          
1356          /*******************************************************************************
1357          * Function Name: CapSense_DisableSensor
1358          ********************************************************************************
1359          *
1360          * Summary:
1361          *  Disables the selected sensor. The corresponding pin is disconnected from the
1362          *  Analog Mux Bus and connected to GND, High_Z or Shield electrode.
1363          *
1364          * Parameters:
1365          *  sensor:  Sensor number
1366          *
1367          * Return:
1368          *  None
1369          *
1370          * Global Variables:
1371          *  CapSense_portTable[] - used to store the port number that pin 
1372          *  belongs to for every sensor.
1373          *  CapSense_maskTable[] - used to store the pin within the port for 
1374          *  every sensor.
1375          *  CapSense_csTable[]   - used to store the pointers to CAPS_SEL 
1376          *  registers for every port.
1377          *  CapSense_pcTable[]   - used to store the pointers to PC pin 
1378          *  register for every sensor.
1379          *  CapSense_amuxIndex[] - used to store corrected AMUX index when 
1380          *  complex sensors are defeined.
1381          *
1382          *******************************************************************************/
1383          void CapSense_DisableSensor(uint8 sensor) 
1384          {
1385   1          uint8 port = CapSense_portTable[sensor];
1386   1          uint8 mask = CapSense_maskTable[sensor];
1387   1          
1388   1          #if ((CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) && \
1389   1               (CapSense_IS_COMPLEX_SCANSLOTS))
                      uint8 amuxCh = CapSense_amuxIndex[sensor];
                  #endif  /* End ((CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN) && \
                                 (CapSense_IS_COMPLEX_SCANSLOTS)) */
1393   1          
1394   1          /* Disconnect from AMUX */
1395   1          #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
1396   1              #if (CapSense_IS_COMPLEX_SCANSLOTS)
                          CapSense_AMuxCH0_Disconnect(CapSense_amuxIndex[sensor]);
                      #else
1399   1                  CapSense_AMuxCH0_Disconnect(sensor);
1400   1              #endif  /* End CapSense_IS_COMPLEX_SCANSLOTS */
1401   1                      
1402   1          #else
                      #if (CapSense_IS_COMPLEX_SCANSLOTS)
                          if ((amuxCh & CapSense_CHANNEL1_FLAG) == 0u)
                          {
                              CapSense_AMuxCH0_Disconnect(amuxCh);
                          } 
                          else
                          {
                              amuxCh &= ~ CapSense_CHANNEL1_FLAG;
                              CapSense_AMuxCH1_Disconnect(amuxCh);
                          }
                          
                      #else
                          if (sensor < CapSense_TOTAL_SENSOR_COUNT__CH0) 
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 24  

                          {
                              CapSense_AMuxCH0_Disconnect(sensor);
                          } 
                          else
                          {
                              CapSense_AMuxCH1_Disconnect(sensor - CapSense_TOTAL_SENSOR_COUNT__CH0);
                          }
                          
                      #endif  /* End CapSense_IS_COMPLEX_SCANSLOTS */
                      
                  #endif  /* End CapSense_DESIGN_TYPE */
1427   1          
1428   1          /* Disconnect from DSI output */
1429   1              if(port == 15u)
1430   1              {
1431   2                      port = 7u;
1432   2              }
1433   1          *CapSense_csTable[port] &= ~mask;
1434   1          
1435   1          /* Set sensor to inactive state */
1436   1          #if (CapSense_CONNECT_INACTIVE_SNS == CapSense_CIS_GND)
1437   1              *CapSense_pcTable[sensor] = CapSense_PRT_PC_GND;
1438   1          #elif (CapSense_CONNECT_INACTIVE_SNS == CapSense_CIS_HIGHZ)
                      *CapSense_pcTable[sensor] = CapSense_PRT_PC_HIGHZ;
                  #else
                      *CapSense_pcTable[sensor] = CapSense_PRT_PC_SHIELD;
                  #endif  /* End (CapSense_CONNECT_INACTIVE_SNS == CapSense_CIS_GND) */
1443   1      }
1444          
1445          
1446          /*******************************************************************************
1447          * Function Name: CapSense_PreScan
1448          ********************************************************************************
1449          *
1450          * Summary:
1451          *  Set required settings, enable sensor, remove Vref from AMUX and start the 
1452          *  scanning process of the sensor.
1453          *
1454          * Parameters:
1455          *  sensor:  Sensor number.
1456          *
1457          * Return:
1458          *  None
1459          *
1460          * Global Variables:
1461          *  CapSense_rbTable[] - used to store pointers to PC pin registers for 
1462          *  every bleed resistor (Rb). Only available when Current Source is External 
1463          *  resistor.
1464          *
1465          *******************************************************************************/
1466          void CapSense_PreScan(uint8 sensor) 
1467          {
1468   1          /* Set Sensor Settings */
1469   1          CapSense_SetScanSlotSettings(sensor);
1470   1          
1471   1          /* Place disable interrupts here to eliminate influence on start of scanning */
1472   1          /* `#START CapSense_PreScan_DisableInt` */
1473   1      
1474   1          /* `#END` */
1475   1          
1476   1          /* Resets digital and pre-charge clocks */
1477   1          CapSense_CONTROL_REG |= CapSense_CTRL_SYNC_EN;
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 25  

1478   1              
1479   1          #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
1480   1              #if (CapSense_CURRENT_SOURCE == CapSense_IDAC_SOURCE)
1481   1                  /* Disable Vref from AMux */
1482   1                  #if (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS)
                              CapSense_AMuxCH0_Disconnect(CapSense_AMuxCH0_VREF_CHANNEL);
                          #else
1485   1                      CapSense_BufCH0_CAPS_CFG0_REG &= ~CapSense_CSBUF_ENABLE;
1486   1                  #endif  /*End (CapSense_VREF_VDAC != CapSense_VREF_OPTIONS) */
1487   1      
1488   1                  /* Enable Sensor */
1489   1                  CapSense_EnableScanSlot(sensor);
1490   1                  
1491   1              #elif (CapSense_CURRENT_SOURCE == CapSense_IDAC_SINK)
                          /* Connect IDAC */
                          CapSense_AMuxCH0_Connect(CapSense_AMuxCH0_IDAC_CHANNEL);
                          
                          /* Enable Sensor */
                          CapSense_EnableScanSlot(sensor);
                              
                          /* Disable CapSense Buffer */
                          CapSense_BufCH0_CAPS_CFG0_REG &= ~CapSense_CSBUF_ENABLE;
                          
                      #else
                          /* Connect DSI output to Rb */
                          *CapSense_rbTable[CapSense_RbCh0_cur] |= CapSense_BYP_MASK;
                          
                          /* Enable Sensor */
                          CapSense_EnableScanSlot(sensor);
                           
                          /* Disable CapSense Buffer */
                          CapSense_BufCH0_CAPS_CFG0_REG &= ~CapSense_CSBUF_ENABLE;
                      
                      #endif  /* (CapSense_CURRENT_SOURCE == CapSense_IDAC_SOURCE) */
1512   1              
1513   1          #else
              
                      if((CapSense_CONTROL_REG & CapSense_CTRL_WINDOW_EN__CH0) != 0u)
                      {
                          #if (CapSense_CURRENT_SOURCE == CapSense_IDAC_SOURCE)
                              /* Disable Vref from AMux */
                              #if (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS)
                                  CapSense_AMuxCH0_Disconnect(CapSense_AMuxCH0_VREF_CHANNEL);
                              #else
                                  CapSense_BufCH0_CAPS_CFG0_REG &= ~CapSense_CSBUF_ENABLE;
                              #endif  /*End (CapSense_VREF_VDAC != CapSense_VREF_OPTIONS) */
                              
                              /* Enable Sensor */
                              CapSense_EnableScanSlot(sensor);
                              
                          #elif (CapSense_CURRENT_SOURCE == CapSense_IDAC_SINK)
                              /* Connect IDAC */
                              CapSense_AMuxCH0_Connect(CapSense_AMuxCH0_IDAC_CHANNEL);
                              
                              /* Enable Sensor */
                              CapSense_EnableScanSlot(sensor);
                                  
                              /* Disable Vref from AMux */
                              CapSense_BufCH0_CAPS_CFG0_REG &= ~CapSense_CSBUF_ENABLE;
                              
                          #else
                              /* Connect DSI output to Rb */
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 26  

                              *CapSense_rbTable[CapSense_RbCh0_cur] |= CapSense_BYP_MASK;
                              
                              /* Enable Sensor */
                              CapSense_EnableScanSlot(sensor);
                                  
                              /* Disable Vref from AMux */
                              CapSense_BufCH0_CAPS_CFG0_REG &= ~CapSense_CSBUF_ENABLE;
                          
                          #endif  /* (CapSense_CURRENT_SOURCE == CapSense_IDAC_SOURCE) */
                          
                      }
                      
                      if((CapSense_CONTROL_REG & CapSense_CTRL_WINDOW_EN__CH1) != 0u)
                      {
                          sensor += CapSense_TOTAL_SENSOR_COUNT__CH0;
                          
                          #if (CapSense_CURRENT_SOURCE == CapSense_IDAC_SOURCE)
                              /* Disable Vref from AMux */
                              #if (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS)
                                 CapSense_AMuxCH1_Disconnect(CapSense_AMuxCH1_VREF_CHANNEL);
                              #else 
                                  CapSense_BufCH1_CAPS_CFG0_REG &= ~CapSense_CSBUF_ENABLE;
                              #endif  /* End (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS) */
                              
                              /* Enable Sensor */
                              CapSense_EnableScanSlot(sensor);
                              
                          #elif (CapSense_CURRENT_SOURCE == CapSense_IDAC_SINK)
                              /* Connect IDAC */
                              CapSense_AMuxCH1_Connect(CapSense_AMuxCH1_IDAC_CHANNEL);
                              
                              /* Enable Sensor */
                              CapSense_EnableScanSlot(sensor);
                                  
                              /* Disable Vref from AMux */
                              CapSense_BufCH1_CAPS_CFG0_REG &= ~CapSense_CSBUF_ENABLE;
                              
                          #else
                              /* Connect DSI output to Rb */
                              *CapSense_rbTable[CapSense_RbCh1_cur] |= CapSense_BYP_MASK;
                              
                              /* Enable Sensor */
                              CapSense_EnableScanSlot(sensor);
                              
                              /* Disable Vref from AMux */
                              CapSense_BufCH1_CAPS_CFG0_REG &= ~CapSense_CSBUF_ENABLE;
                          
                          #endif  /* (CapSense_CURRENT_SOURCE == CapSense_IDAC_SOURCE) */
                      }
                  
                  #endif  /* (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN) */
1591   1          
1592   1          /* Start measurament, pre-charge clocks are running and PRS as well */
1593   1          CapSense_CONTROL_REG |= CapSense_CTRL_START;
1594   1          
1595   1          /* Place enable interrupts here to eliminate influence on start of scanning */
1596   1          /* `#START CapSense_PreScan_EnableInt` */
1597   1      
1598   1          /* `#END` */
1599   1      }
1600          
1601          
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 27  

1602          #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
1603              /*******************************************************************************
1604              * Function Name: CapSense_PostScan
1605              ********************************************************************************
1606              *
1607              * Summary:
1608              *  Store results of measurament in CapSense_SensorResult[] array,
1609              *  sets scan sensor in none sampling state, turn off Idac(Current Source IDAC),
1610              *  disconnect IDAC(Sink mode) or bleed resistor (Rb) and apply Vref on AMUX.
1611              *  Only one channel designs.
1612              *
1613              * Parameters:
1614              *  sensor:  Sensor number.
1615              *
1616              * Return:
1617              *  None
1618              *
1619              * Global Variables:
1620              *  CapSense_SensorRaw[] - used to store sensors raw data.
1621              *
1622              * Reentrant:
1623              *  No
1624              *
1625              *******************************************************************************/
1626              void CapSense_PostScan(uint8 sensor)
1627              {
1628   1              /* Stop Capsensing and rearm sync */
1629   1              CapSense_CONTROL_REG &= ~(CapSense_CTRL_START | CapSense_CTRL_SYNC_EN);
1630   1              
1631   1              /* Read SlotResult from Raw Counter */
1632   1              #if (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF)
                          CapSense_SensorRaw[sensor]  = CapSense_MEASURE_FULL_RANGE - 
                                                                    CY_GET_REG16(CapSense_RAW_CH0_COUNTER_PTR);
                      #else
1636   1                  CapSense_SensorRaw[sensor]  = ((uint16) CapSense_RAW_CH0_COUNTER_HI_REG << 8u);
1637   1                  CapSense_SensorRaw[sensor] |= (uint16) CapSense_RAW_CH0_COUNTER_LO_REG;
1638   1                  CapSense_SensorRaw[sensor]  = CapSense_MEASURE_FULL_RANGE -
1639   1                                                            CapSense_SensorRaw[sensor];
1640   1              #endif  /* End (CapSense_IMPLEMENTATION == CapSense_MEASURE_IMPLEMENTATION_FF)*/
1641   1              
1642   1              /* Disable Sensor */
1643   1              CapSense_DisableScanSlot(sensor);
1644   1              
1645   1              #if(CapSense_CURRENT_SOURCE)
1646   1                  /* Turn off IDAC */
1647   1                  CapSense_IdacCH0_SetValue(CapSense_TURN_OFF_IDAC);
1648   1                  #if (CapSense_CURRENT_SOURCE == CapSense_IDAC_SINK)
                              /* Disconnect IDAC */
                              CapSense_AMuxCH0_Disconnect(CapSense_AMuxCH0_IDAC_CHANNEL);
                          #endif  /* End (CapSense_CURRENT_SOURCE == CapSense_IDAC_SINK) */
1652   1              #else
                          /* Disconnect DSI output from Rb */
                          *CapSense_rbTable[CapSense_RbCh0_cur] &= ~CapSense_BYP_MASK; 
                      #endif  /* End (CapSense_CURRENT_SOURCE)*/
1656   1                  
1657   1              /* Enable Vref on AMUX */
1658   1              #if (CapSense_VREF_OPTIONS == CapSense_VREF_VDAC)
                          CapSense_AMuxCH0_Connect(CapSense_AMuxCH0_VREF_CHANNEL);
                      #else
1661   1                  CapSense_BufCH0_CAPS_CFG0_REG |= CapSense_CSBUF_ENABLE;
1662   1              #endif  /* End (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS) */
1663   1          }
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 28  

1664              
1665          #else
              
                  /*******************************************************************************
                  * Function Name: CapSense_PostScan
                  ********************************************************************************
                  *
                  * Summary:
                  *  Store results of measurament in CapSense_SensorResult[] array,
                  *  sets scan sensor in none sampling state, turn off Idac(Current Source IDAC),
                  *  disconnect IDAC(Sink mode) or bleed resistor (Rb) and apply Vref on AMUX.
                  *  Only used for channel 0 in two channes designs.
                  *
                  * Parameters:
                  *  sensor:  Sensor number.
                  *
                  * Return:
                  *  None
                  *
                  * Global Variables:
                  *  CapSense_SensorRaw[] - used to store sensors raw data.
                  *
                  * Reentrant:
                  *  No
                  *
                  *******************************************************************************/
                  void CapSense_PostScanCh0(uint8 sensor)
                  {
                      if (((CapSense_CONTROL_REG & CapSense_CTRL_WINDOW_EN__CH0) == 0u) && 
                          ((CapSense_CONTROL_REG & CapSense_CTRL_WINDOW_EN__CH1) == 0u)) 
                      {
                          /* Stop Capsensing and rearm sync */
                          CapSense_CONTROL_REG &= ~(CapSense_CTRL_START | CapSense_CTRL_SYNC_EN);
                      }
                      
                      /* Read SlotResult from Raw Counter */
                      #if (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF)
                          CapSense_SensorRaw[sensor]  = CapSense_MEASURE_FULL_RANGE - 
                                                                    CY_GET_REG16(CapSense_RAW_CH0_COUNTER_PTR);
                      #else
                          CapSense_SensorRaw[sensor]  = ((uint16) CapSense_RAW_CH0_COUNTER_HI_REG << 8u);
                          CapSense_SensorRaw[sensor] |= (uint16) CapSense_RAW_CH0_COUNTER_LO_REG;
                          CapSense_SensorRaw[sensor]  = CapSense_MEASURE_FULL_RANGE - 
                                                                    CapSense_SensorRaw[sensor];
                      #endif  /* End (CapSense_IMPLEMENTATION_CH0 == CapSense_MEASURE_IMPLEMENTATION_FF)*/
                      
                      /* Disable Sensor */
                      CapSense_DisableScanSlot(sensor);
                      
                      #if (CapSense_CURRENT_SOURCE)
                          /* Turn off IDAC */
                          CapSense_IdacCH0_SetValue(CapSense_TURN_OFF_IDAC);
                          #if (CapSense_CURRENT_SOURCE == CapSense_IDAC_SINK)
                              /* Disconnect IDAC */
                              CapSense_AMuxCH0_Disconnect(CapSense_AMuxCH0_IDAC_CHANNEL);
                          #endif  /* End (CapSense_CURRENT_SOURCE == CapSense_IDAC_SINK) */
                      #else
                          /* Disconnect DSI output from Rb */
                          *CapSense_rbTable[CapSense_RbCh0_cur] &= ~CapSense_BYP_MASK; 
                      #endif  /* End (CapSense_CURRENT_SOURCE)*/
                      
                      /* Enable Vref on AMUX */
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 29  

                      #if (CapSense_VREF_OPTIONS == CapSense_VREF_VDAC)
                          CapSense_AMuxCH0_Connect(CapSense_AMuxCH0_VREF_CHANNEL);
                      #else
                          CapSense_BufCH0_CAPS_CFG0_REG |= CapSense_CSBUF_ENABLE;
                      #endif  /* End (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS) */
                  }
                  
                  
                  /*******************************************************************************
                  * Function Name: CapSense_PostScanCh1
                  ********************************************************************************
                  *
                  * Summary:
                  *  Store results of measurament in CapSense_SensorResult[] array,
                  *  sets scan sensor in none sampling state, turn off Idac(Current Source IDAC), 
                  *  disconnect IDAC(Sink mode) or bleed resistor (Rb) and apply Vref on AMUX.
                  *  Only used for channel 1 in two channes designs.
                  *
                  * Parameters:
                  *  sensor:  Sensor number.
                  *
                  * Return:
                  *  None
                  *
                  * Global Variables:
                  *  CapSense_SensorRaw[] - used to store sensors raw data.
                  *
                  * Reentrant:
                  *  No
                  *
                  *******************************************************************************/
                  void CapSense_PostScanCh1(uint8 sensor)
                  {
                      if (((CapSense_CONTROL_REG & CapSense_CTRL_WINDOW_EN__CH0) == 0u) && 
                          ((CapSense_CONTROL_REG & CapSense_CTRL_WINDOW_EN__CH1) == 0u))
                      {
                          /* Stop Capsensing and rearm sync */
                          CapSense_CONTROL_REG &= ~(CapSense_CTRL_START | CapSense_CTRL_SYNC_EN);
                      }
                      
                      /* Read SlotResult from Raw Counter */
                      #if (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_FF)
                          CapSense_SensorRaw[sensor]  = CapSense_MEASURE_FULL_RANGE - 
                                                                    CY_GET_REG16(CapSense_RAW_CH1_COUNTER_PTR);
                      #else
                          CapSense_SensorRaw[sensor]  = ((uint16) CapSense_RAW_CH1_COUNTER_HI_REG << 8u);
                          CapSense_SensorRaw[sensor] |= (uint16) CapSense_RAW_CH1_COUNTER_LO_REG;
                          CapSense_SensorRaw[sensor]  = CapSense_MEASURE_FULL_RANGE - 
                                                                    CapSense_SensorRaw[sensor];
                      #endif  /* End (CapSense_IMPLEMENTATION_CH1 == CapSense_MEASURE_IMPLEMENTATION_FF)*/
                      
                      /* Disable Sensor */
                      CapSense_DisableScanSlot(sensor);
                      
                      #if (CapSense_CURRENT_SOURCE)
                          /* Turn off IDAC */
                          CapSense_IdacCH1_SetValue(CapSense_TURN_OFF_IDAC);
                          #if (CapSense_CURRENT_SOURCE == CapSense_IDAC_SINK)
                              /* Disconnect IDAC */
                              CapSense_AMuxCH1_Disconnect(CapSense_AMuxCH1_IDAC_CHANNEL);
                          #endif  /* End (CapSense_CURRENT_SOURCE == CapSense_IDAC_SINK) */
                      #else
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 30  

                          /* Disconnect DSI output from Rb */
                          *CapSense_rbTable[CapSense_RbCh1_cur] &= ~CapSense_BYP_MASK; 
                      #endif  /* End (CapSense_CURRENT_SOURCE)*/
              
                      /* Enable Vref on AMUX */
                      #if (CapSense_VREF_OPTIONS == CapSense_VREF_VDAC)
                          CapSense_AMuxCH1_Connect(CapSense_AMuxCH1_VREF_CHANNEL);
                      #else
                          CapSense_BufCH1_CAPS_CFG0_REG |= CapSense_CSBUF_ENABLE;
                      #endif  /* End (CapSense_VREF_VDAC == CapSense_VREF_OPTIONS) */
                  }
                  
              #endif  /* End CapSense_DESIGN_TYPE */
1801          
1802          
1803          #if (CapSense_CURRENT_SOURCE == CapSense_EXTERNAL_RB)
                  /*******************************************************************************
                  * Function Name:  CapSense_InitRb
                  ********************************************************************************
                  *
                  * Summary:
                  *  Sets all Rbleed resistor to High-Z mode. The first Rbleed resistor is active
                  *  while next measure.
                  *  This function is available only if Current Source is External Resistor.
                  *
                  * Parameters:
                  *  None
                  *
                  * Return:
                  *  None
                  *
                  ********************************************************************************/
                  void CapSense_InitRb(void) 
                  {
                      uint8 i;
                      
                      /* Disable all Rb */
                      for(i=0; i < CapSense_TOTAL_RB_NUMBER; i++)
                      {
                          /* Make High-Z */
                          *CapSense_rbTable[i] = CapSense_PRT_PC_HIGHZ;
                      }
                  }
                  
                  
                  /*******************************************************************************
                  * Function Name: CapSense_SetRBleed
                  ********************************************************************************
                  *
                  * Summary:
                  *  Sets the pin to use for the bleed resistor (Rb) connection. This function
                  *  can be called at runtime to select the current Rb pin setting from those 
                  *  defined customizer. The function overwrites the component parameter setting. 
                  *  This function is available only if Current Source is External Resistor.
                  * 
                  * Parameters:
                  *  rbleed:  Ordering number for bleed resistor terminal defined in CapSense
                  *  customizer.
                  *
                  * Return:
                  *  None
                  *
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 31  

                  * Global Variables:
                  *  CapSense_RbCh0_cur - used to store current number of active 
                  *  bleed resistor (Rb) of channel 0.
                  *  CapSense_RbCh1_cur - used to store current number of active 
                  *  bleed resistor (Rb) of channel 1.
                  *  The active bleed resistor (Rb) pin will be used while next measurement  
                  *  cycle.
                  *
                  * Reentrant:
                  *  No
                  *
                  *******************************************************************************/
                  void CapSense_SetRBleed(uint8 rbleed)
                  {
                      #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
                          CapSense_RbCh0_cur = rbleed;
                          
                      #else
                          if(rbleed < CapSense_TOTAL_RB_NUMBER__CH0)
                          {
                              CapSense_RbCh0_cur = rbleed;
                          }
                          else
                          {
                              CapSense_RbCh1_cur = (rbleed - CapSense_TOTAL_RB_NUMBER__CH0);   
                          }
                  
                      #endif  /* End CapSense_DESIGN_TYPE */ 
                  }
              #endif /* End CapSense_CURRENT_SOURCE */ 
1880          
1881          
1882          #if (CapSense_CURRENT_SOURCE)
1883              /*******************************************************************************
1884              * Function Name: CapSense_IdacCH0_Init
1885              ********************************************************************************
1886              *
1887              * Summary:
1888              *  Sets VIDAC8 block to: IDAC mode, current direction (Source/Sink), current 
1889              *  control from UDB (Ioff), IDAC range (32uA/255uA/2048uA) and IDAC value 0.
1890              *  This function only available when Current Source is IDAC.
1891              *
1892              * Parameters:
1893              *  None
1894              *
1895              * Return:
1896              *  None
1897              *
1898              *******************************************************************************/
1899              void CapSense_IdacCH0_Init(void) 
1900              {
1901   1              /* Set I mode of operation */
1902   1              CapSense_IdacCH0_CR0_REG = CapSense_IDAC_MODE_I;
1903   1              
1904   1              /* Set Source/Sink direction and source of control */
1905   1              CapSense_IdacCH0_CR1_REG = CapSense_IdacCH0_IDIR | CapSense_IDAC_IDIR_CTL_UDB;
1906   1                  
1907   1              /* Set Range and IDAC value */
1908   1              CapSense_IdacCH0_SetRange(CapSense_IDAC_RANGE_VALUE);
1909   1              CapSense_IdacCH0_SetValue(CapSense_TURN_OFF_IDAC);       
1910   1          }
1911              
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 32  

1912              
1913              /*******************************************************************************
1914              * Function Name: CapSense_IdacCH0_Enable
1915              ********************************************************************************
1916              *
1917              * Summary:
1918              *  Turn on IDAC8.
1919              *  This function only available when Current Source is IDAC.
1920              *
1921              * Parameters:
1922              *  None
1923              *
1924              * Return:
1925              *  None
1926              *
1927              *******************************************************************************/
1928              void CapSense_IdacCH0_Enable(void) 
1929              {
1930   1              /* Set I mode of operation */
1931   1              #if (CY_PSOC3_ES2 || CY_PSOC5_ES1)
1932   1                  if (0u != (CapSense_idac_cfg_restore & CapSense_IdacCH0_RESTORE_CFG))
1933   1                  {
1934   2                      CapSense_idac_cfg_restore &= ~CapSense_IdacCH0_RESTORE_CFG;
1935   2                      CapSense_IdacCH0_CR0_REG = CapSense_idac_ch0_cr0reg;
1936   2                  }
1937   1              #endif  /* End (CY_PSOC3_ES2 || CY_PSOC5_ES1) */
1938   1              
1939   1              /* Enable power to DAC */
1940   1              CapSense_IdacCH0_ACT_PWRMGR_REG  |= CapSense_IdacCH0_ACT_PWR_EN;
1941   1              CapSense_IdacCH0_STBY_PWRMGR_REG |= CapSense_IdacCH0_STBY_PWR_EN;
1942   1          }
1943              
1944              
1945              /*******************************************************************************
1946              * Function Name: CapSense_IdacCH0_Stop
1947              ********************************************************************************
1948              *
1949              * Summary:
1950              *  Powers down IDAC8 to lowest power state.
1951              *  This function only available when Current Source is IDAC.
1952              *
1953              * Parameters:
1954              *  None
1955              *
1956              * Return:
1957              *  None
1958              *
1959              *******************************************************************************/
1960              void CapSense_IdacCH0_Stop(void) 
1961              {
1962   1              /* Disble power to DAC */
1963   1              CapSense_IdacCH0_ACT_PWRMGR_REG  &= ~CapSense_IdacCH0_ACT_PWR_EN;
1964   1              CapSense_IdacCH0_STBY_PWRMGR_REG &= ~CapSense_IdacCH0_STBY_PWR_EN;
1965   1              
1966   1              /* Set to V mode */
1967   1              #if (CY_PSOC3_ES2 || CY_PSOC5_ES1)
1968   1                  CapSense_idac_cfg_restore |= CapSense_IdacCH0_RESTORE_CFG;
1969   1                  CapSense_idac_ch0_cr0reg = CapSense_IdacCH0_CR0_REG;
1970   1                  CapSense_IdacCH0_CR0_REG = CapSense_IDAC_STOP_CR0_VAL;
1971   1              #endif   /* End (CY_PSOC3_ES2 || CY_PSOC5_ES1) */
1972   1          }
1973              
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 33  

1974              
1975              /*******************************************************************************
1976              * Function Name: CapSense_IdacCH0_SetValue
1977              ********************************************************************************
1978              *
1979              * Summary:
1980              *  Sets IDAC8 value.
1981              *  This function only available when Current Source is IDAC.
1982              *
1983              * Parameters:
1984              *  value:  Sets DAC value between 0 and 255.
1985              *
1986              * Return:
1987              *  None
1988              *
1989              *******************************************************************************/
1990              void CapSense_IdacCH0_SetValue(uint8 value) 
1991              {
1992   1              #if (CY_PSOC3_ES2 || CY_PSOC5_ES1)
1993   1                  uint8 cts;
1994   1                  cts = CyEnterCriticalSection();
1995   1              #endif  /* End  (CY_PSOC3_ES2 || CY_PSOC5_ES1) */
1996   1              
1997   1              /* Set Value */
1998   1              CapSense_IdacCH0_DATA_REG = value;
1999   1              
2000   1              #if (CY_PSOC3_ES2 || CY_PSOC5_ES1)
2001   1                  CapSense_IdacCH0_DATA_REG = value;
2002   1                  CyExitCriticalSection(cts);
2003   1              #endif  /* End  (CY_PSOC3_ES2 || CY_PSOC5_ES1) */
2004   1          }
2005              
2006              
2007              /*******************************************************************************
2008              * Function Name: CapSense_IdacCH0_DacTrim
2009              ********************************************************************************
2010              *
2011              * Summary:
2012              *  Sets the trim value for the given range.
2013              *  This function only available when Current Source is IDAC.
2014              *
2015              * Parameters:
2016              *  None
2017              * 
2018              * Return:
2019              *  None
2020              *
2021              *******************************************************************************/
2022              void CapSense_IdacCH0_DacTrim(void) 
2023              {
2024   1              uint8 mode;
2025   1              
2026   1              mode = ((CapSense_IdacCH0_CR0_REG & CapSense_IDAC_RANGE_MASK) >> 1u);
2027   1              
2028   1              if((CapSense_IDAC_IDIR_MASK & CapSense_IdacCH0_CR1_REG) == CapSense_IDAC_IDIR_SINK)
2029   1              {
2030   2                  mode++;
2031   2              }
2032   1              
2033   1              CapSense_IdacCH0_TR_REG = CY_GET_XTND_REG8((uint8 *)(CapSense_IdacCH0_DAC_TRIM_BASE + mode));
2034   1          }
2035              
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 34  

2036              
2037              /*******************************************************************************
2038              * Function Name: CapSense_IdacCH0_SetRange
2039              ********************************************************************************
2040              *
2041              * Summary:
2042              *  Sets current range.
2043              *  This function only available when Current Source is IDAC.
2044              *
2045              * Parameters:
2046              *  range:  Sets on of three valid ranges.
2047              *
2048              * Return:
2049              *  None
2050              *
2051              *******************************************************************************/
2052              void CapSense_IdacCH0_SetRange(uint8 range) 
2053              {
2054   1              /* Clear existing mode */
2055   1              CapSense_IdacCH0_CR0_REG &= ~CapSense_IDAC_RANGE_MASK;
2056   1              
2057   1              /* Set Range */
2058   1              CapSense_IdacCH0_CR0_REG |= (range & CapSense_IDAC_RANGE_MASK);
2059   1              CapSense_IdacCH0_DacTrim();
2060   1          }
2061          
2062              #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                      
                      /*******************************************************************************
                      * Function Name: CapSense_IdacCH1_Init
                      ********************************************************************************
                      *
                      * Summary:
                      *  Sets VIDAC8 block to: IDAC mode, current direction (Source/Sink), current 
                      *  control from UDB (Ioff), IDAC range (32uA/255uA/2048uA) and IDAC value 0.
                      *  This function only available when Current Source is IDAC and two channels 
                      *  design is selected.
                      *
                      * Parameters:
                      *  None
                      *
                      * Return:
                      *  None
                      *
                      *******************************************************************************/
                      void CapSense_IdacCH1_Init(void) 
                      {
                          /* Set I mode of operation */
                          CapSense_IdacCH1_CR0_REG = CapSense_IDAC_MODE_I;
                          
                          /* Set Source/Sink direction and source of control */
                          CapSense_IdacCH1_CR1_REG = (CapSense_IdacCH1_IDIR | CapSense_IDAC_IDIR_CTL_UDB);
                          
                          /* Set Range and IDAC value */
                          CapSense_IdacCH1_SetRange(CapSense_IDAC_RANGE_VALUE);
                          CapSense_IdacCH1_SetValue(CapSense_TURN_OFF_IDAC);
                      }
                      
                      /*******************************************************************************
                      * Function Name: CapSense_IdacCH1_Enable
                      ********************************************************************************
                      *
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 35  

                      * Summary:
                      *  Turn on IDAC8.
                      *  This function only available when Current Source is IDAC and two channels 
                      *  design is selected.
                      *
                      * Parameters:
                      *  None
                      *
                      * Return:
                      *  None
                      *
                      *******************************************************************************/
                      void CapSense_IdacCH1_Enable(void) 
                      {
                          /* Set I mode of operation */
                          #if (CY_PSOC3_ES2 || CY_PSOC5_ES1)
                              if (0u != (CapSense_idac_cfg_restore & CapSense_IdacCH1_RESTORE_CFG))
                              {
                                  CapSense_idac_cfg_restore &= ~CapSense_IdacCH1_RESTORE_CFG;
                                  CapSense_IdacCH1_CR0_REG = CapSense_idac_ch1_cr0reg;
                              }
                          #endif   /* End (CY_PSOC3_ES2 || CY_PSOC5_ES1) */
                          
                          /* Enable power to DAC */
                          CapSense_IdacCH1_ACT_PWRMGR_REG  |= CapSense_IdacCH1_ACT_PWR_EN;
                          CapSense_IdacCH1_STBY_PWRMGR_REG |= CapSense_IdacCH1_STBY_PWR_EN;
                      }
                      
                      /*******************************************************************************
                      * Function Name: CapSense_IdacCH1_Stop
                      ********************************************************************************
                      *
                      * Summary:
                      *  Powers down IDAC8 to lowest power state.
                      *  This function only available when Current Source is IDAC and two channels 
                      *  design is selected.
                      *
                      * Parameters:
                      *   None
                      *
                      * Return:
                      *  None
                      *
                      *******************************************************************************/
                      void CapSense_IdacCH1_Stop(void) 
                      {
                          /* Disable power from DAC */
                          CapSense_IdacCH1_ACT_PWRMGR_REG  &= ~CapSense_IdacCH1_ACT_PWR_EN;
                          CapSense_IdacCH1_STBY_PWRMGR_REG &= ~CapSense_IdacCH1_STBY_PWR_EN;
              
                          /* Set to V mode */
                          #if  (CY_PSOC3_ES2 || CY_PSOC5_ES1)
                              CapSense_idac_cfg_restore |= CapSense_IdacCH1_RESTORE_CFG;
                              CapSense_idac_ch1_cr0reg = CapSense_IdacCH1_CR0_REG;
                              CapSense_IdacCH1_CR0_REG = CapSense_IDAC_STOP_CR0_VAL;
                          #endif  /* End (CY_PSOC3_ES2 || CY_PSOC5_ES1) */
                      }
                      
                          
                      /*******************************************************************************
                      * Function Name: CapSense_IdacCH1_SetValue
                      ********************************************************************************
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 36  

                      *
                      * Summary:
                      *  Sets IDAC8 value.
                      *  This function only available when Current Source is IDAC and two channels 
                      *  design is selected.
                      *
                      * Parameters:
                      *  value:  Sets DAC value between 0 and 255.
                      *
                      * Return:
                      *  None
                      *
                      *******************************************************************************/
                      void CapSense_IdacCH1_SetValue(uint8 value) 
                      {
                          #if (CY_PSOC3_ES2 || CY_PSOC5_ES1)
                              uint8 cts;
                              cts = CyEnterCriticalSection();
                          #endif  /* End  (CY_PSOC3_ES2 || CY_PSOC5_ES1) */
              
                          /* Set Value */
                          CapSense_IdacCH1_DATA_REG = value;
                          
                          #if (CY_PSOC3_ES2 || CY_PSOC5_ES1)
                              CapSense_IdacCH1_DATA_REG = value;
                              CyExitCriticalSection(cts);
                          #endif  /* End (CY_PSOC3_ES2 || CY_PSOC5_ES1) */
                      }
                      
                      
                      /*******************************************************************************
                      * Function Name: CapSense_IdacCH1_DacTrim
                      ********************************************************************************
                      *
                      * Summary:
                      *  Sets the trim value for the given range.
                      *  This function only available when Current Source is IDAC and two channels 
                      *  design is selected.
                      *
                      * Parameters:
                      *  None
                      * 
                      * Return:
                      *  None
                      *
                      *******************************************************************************/
                      void CapSense_IdacCH1_DacTrim(void) 
                      {
                          uint8 mode;
                          
                          mode = ((CapSense_IdacCH1_CR0_REG & CapSense_IDAC_RANGE_MASK) >> 1u);
                          
                          if((CapSense_IDAC_IDIR_MASK & CapSense_IdacCH1_CR1_REG) == CapSense_IDAC_IDIR_SINK)
                          {
                              mode++;
                          }
                          
                          CapSense_IdacCH1_TR_REG = 
                                               CY_GET_XTND_REG8((uint8 *)(CapSense_IdacCH1_DAC_TRIM_BASE + mode));
                      }
                      
                      
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 37  

                      /*******************************************************************************
                      * Function Name: CapSense_IdacCH1_SetRange
                      ********************************************************************************
                      *
                      * Summary:
                      *  Sets current range.
                      *  This function only available when Current Source is IDAC and two channels 
                      *  design is selected.
                      *
                      * Parameters:
                      *  range:  Sets on of three valid ranges.
                      *
                      * Return:
                      *  None
                      *
                      *******************************************************************************/
                      void CapSense_IdacCH1_SetRange(uint8 range) 
                      {
                          /* Clear existing mode */
                          CapSense_IdacCH1_CR0_REG &= ~CapSense_IDAC_RANGE_MASK;
                          
                          /* Set Range */
                          CapSense_IdacCH1_CR0_REG |= (range & CapSense_IDAC_RANGE_MASK);
                          CapSense_IdacCH1_DacTrim();
                      }
                      
                  #endif /* End CapSense_CURRENT_SOURCE */ 
2249          
2250          #endif /* End CapSense_CURRENT_SOURCE */ 
2251          
2252          
2253          #if (CapSense_CURRENT_SOURCE)
2254              /*******************************************************************************
2255              * Function Name: CapSense_SetIdacRange
2256              ********************************************************************************
2257              *
2258              * Summary:
2259              *  Sets DAC Range for one or two channels, depends on design type.
2260              *
2261              * Parameters:
2262              *  range:  Sets on of three valid ranges.
2263              *
2264              * Return:
2265              *  None
2266              *
2267              *******************************************************************************/
2268              void CapSense_SetIdacRange(uint8 range)   
2269              {
2270   1              CapSense_IdacCH0_SetRange(range);
2271   1              #if (CapSense_DESIGN_TYPE == CapSense_TWO_CHANNELS_DESIGN)
                          CapSense_IdacCH1_SetRange(range);
                      #endif  /* End CapSense_DESIGN_TYPE */
2274   1          }
2275          #endif /* End CapSense_CURRENT_SOURCE */     
2276          
2277          
2278          #if (CapSense_PRESCALER_OPTIONS)
2279              /*******************************************************************************
2280              * Function Name: CapSense_SetPrescaler
2281              ********************************************************************************
2282              *
2283              * Summary:
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 38  

2284              *  Sets analog switch divider.
2285              *
2286              * Parameters:
2287              *  prescaler:  Sets prescaler divider values.
2288              *
2289              * Return:
2290              *  None
2291              *
2292              *******************************************************************************/
2293              void CapSense_SetPrescaler(uint8 prescaler) 
2294              {
2295   1              /* Set Prescaler */
2296   1              #if (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_UDB)
2297   1                  CapSense_PRESCALER_PERIOD_REG = prescaler;
2298   1                  CapSense_PRESCALER_COMPARE_REG = (prescaler >> 0x01u);
2299   1              #elif (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_FF)
                          CY_SET_REG16(CapSense_PRESCALER_PERIOD_PTR, (uint16) prescaler);
                          CY_SET_REG16(CapSense_PRESCALER_COMPARE_PTR, (uint16) (prescaler >> 0x01u));
                      #else
                          /* Do nothing = config without prescaler */
                      #endif  /* End (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_UDB) */
2305   1          }
2306          
2307          
2308              /*******************************************************************************
2309              * Function Name: CapSense_GetPrescaler
2310              ********************************************************************************
2311              *
2312              * Summary:
2313              *  Gets analog switch divider.
2314              *
2315              * Parameters:
2316              *  None
2317              *
2318              * Return:
2319              *   Returns the prescaler divider value.
2320              *
2321              *******************************************************************************/
2322              uint8 CapSense_GetPrescaler(void) 
2323              {
2324   1              uint8 prescaler = 0u;
2325   1      
2326   1              /* Get Prescaler */
2327   1              #if (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_UDB)
2328   1                  prescaler = CapSense_PRESCALER_PERIOD_REG;
2329   1                  
2330   1              #elif (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_FF)
                          prescaler = (uint8) CY_GET_REG16(CapSense_PRESCALER_PERIOD_PTR);
                          
                      #else
                          /* Do nothing = config without prescaler */
                      #endif  /* End (CapSense_PRESCALER_OPTIONS == CapSense_PRESCALER_UDB) */
2336   1              
2337   1              return prescaler;
2338   1          }
2339          #endif  /* End CapSense_PRESCALER_OPTIONS */
2340          
2341          
2342          /*******************************************************************************
2343          * Function Name: CapSense_SetScanSpeed
2344          ********************************************************************************
2345          *
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 39  

2346          * Summary:
2347          *  Sets ScanSpeed divider.
2348          *
2349          * Parameters:
2350          *  scanspeed:  Sets ScanSpeed divider.
2351          *
2352          * Return:
2353          *  None
2354          *
2355          *******************************************************************************/
2356          void CapSense_SetScanSpeed(uint8 scanspeed) 
2357          {
2358   1          CapSense_SCANSPEED_PERIOD_REG = scanspeed; 
2359   1      }
2360          
2361          
2362          #if (CapSense_PRS_OPTIONS)
2363              /*******************************************************************************
2364              * Function Name: CapSense_SetAnalogSwitchesSource
2365              ********************************************************************************
2366              *
2367              * Summary:
2368              *  Selects the Analog switches source between PRS and prescaler. It is useful
2369              *  for sensor capacitance determination for sensors with low self-capacitance.
2370              *  This function is used in auto-tuning procedure.
2371              *
2372              * Parameters:
2373              *  src:  analog switches source:
2374              *           CapSense_ANALOG_SWITCHES_SRC_PRESCALER - selects prescaler
2375              *           CapSense_ANALOG_SWITCHES_SRC_PRS - selects PRS
2376              *
2377              * Return:
2378              *  None
2379              *
2380              *******************************************************************************/
2381              void CapSense_SetAnalogSwitchesSource(uint8 src)
2382              {
2383   1              if(src == CapSense_ANALOG_SWITCHES_SRC_PRESCALER)
2384   1              {
2385   2                  CapSense_CONTROL_REG &= ~0x10u;
2386   2              }
2387   1              else
2388   1              {
2389   2                  CapSense_CONTROL_REG |= 0x10u;
2390   2              }
2391   1          }
2392          #endif
2393          
2394          /* [] END OF FILE */
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 40  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CapSense_Init (BEGIN)
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 183
0000 120000      R     LCALL   CapSense_ClearSensors
                                           ; SOURCE LINE # 203
0003 7F02              MOV     R7,#02H
0005 120000      R     LCALL   _CapSense_SetAnalogSwitchesSource
                                           ; SOURCE LINE # 219
0008 120000      E     LCALL   CyEnterCriticalSection
000B 900000      R     MOV     DPTR,#enableInterrupts
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 220
0010 906493            MOV     DPTR,#06493H
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 4403              ORL     A,#03H
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 221
001B 906494            MOV     DPTR,#06494H
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 4403              ORL     A,#03H
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 222
0026 900000      R     MOV     DPTR,#enableInterrupts
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 225
002E 7B02              MOV     R3,#02H
0030 7A64              MOV     R2,#064H
0032 7923              MOV     R1,#023H
0034 7D00              MOV     R5,#00H
0036 7CB4              MOV     R4,#0B4H
0038 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 227
003B 7B02              MOV     R3,#02H
003D 7A64              MOV     R2,#064H
003F 7943              MOV     R1,#043H
0041 7DFF              MOV     R5,#0FFH
0043 7CFF              MOV     R4,#0FFH
0045 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 247
0048 906485            MOV     DPTR,#06485H
004B 7407              MOV     A,#07H
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 263
004E 120000      E     LCALL   CyEnterCriticalSection
0051 900000      R     MOV     DPTR,#enableInterrupts
0054 EF                MOV     A,R7
0055 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 41  

                                           ; SOURCE LINE # 264
0056 906497            MOV     DPTR,#06497H
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B EF                MOV     A,R7
005C 4403              ORL     A,#03H
005E FF                MOV     R7,A
005F EF                MOV     A,R7
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 265
0061 906597            MOV     DPTR,#06597H
0064 E0                MOVX    A,@DPTR
0065 FF                MOV     R7,A
0066 EF                MOV     A,R7
0067 4403              ORL     A,#03H
0069 FF                MOV     R7,A
006A EF                MOV     A,R7
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 266
006C 900000      R     MOV     DPTR,#enableInterrupts
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 269
0074 906427            MOV     DPTR,#06427H
0077 74FF              MOV     A,#0FFH
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 270
007A 906447            MOV     DPTR,#06447H
007D 74FF              MOV     A,#0FFH
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 271
0080 906407            MOV     DPTR,#06407H
0083 74FF              MOV     A,#0FFH
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 274
0086 906527            MOV     DPTR,#06527H
0089 74FF              MOV     A,#0FFH
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 275
008C 906557            MOV     DPTR,#06557H
008F 74FF              MOV     A,#0FFH
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 276
0092 906547            MOV     DPTR,#06547H
0095 74FF              MOV     A,#0FFH
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 315
0098 7F0E              MOV     R7,#0EH
009A 120000      E     LCALL   _?CyIntDisable
                                           ; SOURCE LINE # 316
009D 7C00        E     MOV     R4,#HIGH CapSense_IsrCH0_ISR
009F 7D00        E     MOV     R5,#LOW CapSense_IsrCH0_ISR
00A1 7F0E              MOV     R7,#0EH
00A3 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 317
00A6 7D07              MOV     R5,#07H
00A8 7F0E              MOV     R7,#0EH
00AA 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 326
00AD 120000      E     LCALL   CapSense_AMuxCH0_Init
                                           ; SOURCE LINE # 327
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 42  

00B0 7F02              MOV     R7,#02H
00B2 120000      E     LCALL   _CapSense_AMuxCH0_Set
                                           ; SOURCE LINE # 328
00B5 7F03              MOV     R7,#03H
00B7 120000      E     LCALL   _CapSense_AMuxCH0_Set
                                           ; SOURCE LINE # 330
00BA 7F04              MOV     R7,#04H
00BC 120000      E     LCALL   _CapSense_AMuxCH0_Set
                                           ; SOURCE LINE # 348
00BF 906474            MOV     DPTR,#06474H
00C2 E0                MOVX    A,@DPTR
00C3 FF                MOV     R7,A
00C4 EF                MOV     A,R7
00C5 4404              ORL     A,#04H
00C7 FF                MOV     R7,A
00C8 EF                MOV     A,R7
00C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 354
00CA 120000      E     LCALL   CapSense_CompCH0_Init
                                           ; SOURCE LINE # 356
00CD 120000      R     LCALL   CapSense_IdacCH0_Init
                                           ; SOURCE LINE # 373
00D0 22                RET     
             ; FUNCTION CapSense_Init (END)

             ; FUNCTION CapSense_Enable (BEGIN)
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 395
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#enableInterrupts
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 409
0008 906495            MOV     DPTR,#06495H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 4420              ORL     A,#020H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 448
0013 120000      E     LCALL   CapSense_IntClock_Start
                                           ; SOURCE LINE # 452
0016 120000      E     LCALL   CapSense_CompCH0_Enable
                                           ; SOURCE LINE # 454
0019 120000      R     LCALL   CapSense_IdacCH0_Enable
                                           ; SOURCE LINE # 474
001C 9043BB            MOV     DPTR,#043BBH
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 4410              ORL     A,#010H
0024 FF                MOV     R7,A
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 475
0027 9043AB            MOV     DPTR,#043ABH
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 43  

002D 4410              ORL     A,#010H
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 493
0032 905870            MOV     DPTR,#05870H
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 EF                MOV     A,R7
0038 4401              ORL     A,#01H
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 500
003D 900000      R     MOV     DPTR,#enableInterrupts
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 503
0045 7F0E              MOV     R7,#0EH
0047 120000      E     LCALL   _?CyIntEnable
                                           ; SOURCE LINE # 509
004A 906474            MOV     DPTR,#06474H
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F EF                MOV     A,R7
0050 4480              ORL     A,#080H
0052 FF                MOV     R7,A
0053 EF                MOV     A,R7
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 510
0055 22                RET     
             ; FUNCTION CapSense_Enable (END)

             ; FUNCTION CapSense_Start (BEGIN)
                                           ; SOURCE LINE # 539
                                           ; SOURCE LINE # 540
                                           ; SOURCE LINE # 541
0000 900000      R     MOV     DPTR,#CapSense_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 542
                                           ; SOURCE LINE # 543
0008 120000      R     LCALL   CapSense_Init
                                           ; SOURCE LINE # 544
000B 900000      R     MOV     DPTR,#CapSense_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 545
0011         ?C0003:
                                           ; SOURCE LINE # 546
0011 120000      R     LCALL   CapSense_Enable
                                           ; SOURCE LINE # 551
0014 120000      E     LCALL   CapSense_AutoTune
                                           ; SOURCE LINE # 552
0017 900000      R     MOV     DPTR,#CapSense_lowLevelTuningDone
001A 7401              MOV     A,#01H
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 554
001D 22                RET     
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 44  

             ; FUNCTION CapSense_Start (END)

             ; FUNCTION CapSense_Stop (BEGIN)
                                           ; SOURCE LINE # 576
                                           ; SOURCE LINE # 577
                                           ; SOURCE LINE # 579
0000 906474            MOV     DPTR,#06474H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FD              ANL     A,#0FDH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 582
000B 7F0E              MOV     R7,#0EH
000D 120000      E     LCALL   _?CyIntDisable
                                           ; SOURCE LINE # 588
0010 120000      R     LCALL   CapSense_ClearSensors
                                           ; SOURCE LINE # 602
0013 906495            MOV     DPTR,#06495H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 54DF              ANL     A,#0DFH
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 641
001E 120000      E     LCALL   CapSense_IntClock_Stop
                                           ; SOURCE LINE # 645
0021 120000      E     LCALL   CapSense_CompCH0_Stop
                                           ; SOURCE LINE # 647
0024 120000      R     LCALL   CapSense_IdacCH0_Stop
                                           ; SOURCE LINE # 669
0027 905870            MOV     DPTR,#05870H
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54FE              ANL     A,#0FEH
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 670
0032 9043AB            MOV     DPTR,#043ABH
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 EF                MOV     A,R7
0038 54EF              ANL     A,#0EFH
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 671
003D 9043BB            MOV     DPTR,#043BBH
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 EF                MOV     A,R7
0043 54EF              ANL     A,#0EFH
0045 FF                MOV     R7,A
0046 EF                MOV     A,R7
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 681
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 45  

0048 906474            MOV     DPTR,#06474H
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D EF                MOV     A,R7
004E 547F              ANL     A,#07FH
0050 FF                MOV     R7,A
0051 EF                MOV     A,R7
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 682
0053 22                RET     
             ; FUNCTION CapSense_Stop (END)

             ; FUNCTION _CapSense_FindNextSensor (BEGIN)
                                           ; SOURCE LINE # 714
0000 900000      R     MOV     DPTR,#snsIndex
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 715
0005         ?C0008:
                                           ; SOURCE LINE # 721
                                           ; SOURCE LINE # 723
0005 900000      R     MOV     DPTR,#snsIndex
0008 E0                MOVX    A,@DPTR
0009 04                INC     A
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 724
000B 900000      R     MOV     DPTR,#snsIndex
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 6402              XRL     A,#02H
0013 6047              JZ      ?C0007
                                           ; SOURCE LINE # 725
                                           ; SOURCE LINE # 726
                                           ; SOURCE LINE # 727
0015         ?C0009:
                                           ; SOURCE LINE # 728
0015 900000      R     MOV     DPTR,#snsIndex
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 13                RRC     A
001C 13                RRC     A
001D 13                RRC     A
001E 541F              ANL     A,#01FH
0020 FF                MOV     R7,A
0021 900000      R     MOV     DPTR,#pos
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 729
0026 900000      R     MOV     DPTR,#snsIndex
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B EF                MOV     A,R7
002C 5407              ANL     A,#07H
002E FF                MOV     R7,A
002F 7401              MOV     A,#01H
0031 A807              MOV     R0,AR7
0033 08                INC     R0
0034 8002              SJMP    ?C0045
0036         ?C0044:
0036 C3                CLR     C
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 46  

0037 33                RLC     A
0038         ?C0045:
0038 D8FC              DJNZ    R0,?C0044
003A FF                MOV     R7,A
003B 900000      R     MOV     DPTR,#enMask
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 730
                                           ; SOURCE LINE # 731
0040 900000      R     MOV     DPTR,#pos
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 7400        R     MOV     A,#LOW CapSense_SensorEnableMask
0047 2F                ADD     A,R7
0048 F582              MOV     DPL,A
004A E4                CLR     A
004B 3400        R     ADDC    A,#HIGH CapSense_SensorEnableMask
004D F583              MOV     DPH,A
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 900000      R     MOV     DPTR,#enMask
0054 E0                MOVX    A,@DPTR
0055 FE                MOV     R6,A
0056 EF                MOV     A,R7
0057 5E                ANL     A,R6
0058 FF                MOV     R7,A
0059 EF                MOV     A,R7
005A 60A9              JZ      ?C0008
005C         ?C0007:
                                           ; SOURCE LINE # 733
005C 900000      R     MOV     DPTR,#snsIndex
005F E0                MOVX    A,@DPTR
0060 FF                MOV     R7,A
                                           ; SOURCE LINE # 734
0061         ?C0010:
0061 22                RET     
             ; FUNCTION _CapSense_FindNextSensor (END)

             ; FUNCTION _CapSense_SetScanSlotSettings (BEGIN)
                                           ; SOURCE LINE # 863
0000 900000      R     MOV     DPTR,#slot
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 864
                                           ; SOURCE LINE # 869
0005 900000      R     MOV     DPTR,#slot
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      R     MOV     DPTR,#CapSense_widgetNumber
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#widget
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 873
0015 900000      R     MOV     DPTR,#slot
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A 7400        R     MOV     A,#LOW CapSense_idacSettings
001C 2F                ADD     A,R7
001D F582              MOV     DPL,A
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 47  

001F E4                CLR     A
0020 3400        R     ADDC    A,#HIGH CapSense_idacSettings
0022 F583              MOV     DPH,A
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 120000      R     LCALL   _CapSense_IdacCH0_SetValue
                                           ; SOURCE LINE # 881
0029 900000      R     MOV     DPTR,#widget
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E 7400        R     MOV     A,#LOW CapSense_widgetResolution
0030 2F                ADD     A,R7
0031 F582              MOV     DPL,A
0033 E4                CLR     A
0034 3400        R     ADDC    A,#HIGH CapSense_widgetResolution
0036 F583              MOV     DPH,A
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 906457            MOV     DPTR,#06457H
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 886
003F 900000      R     MOV     DPTR,#slot
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 7400        R     MOV     A,#LOW CapSense_AnalogSwitchDivider
0046 2F                ADD     A,R7
0047 F582              MOV     DPL,A
0049 E4                CLR     A
004A 3400        R     ADDC    A,#HIGH CapSense_AnalogSwitchDivider
004C F583              MOV     DPH,A
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
0050 120000      R     LCALL   _CapSense_SetPrescaler
                                           ; SOURCE LINE # 939
0053 22                RET     
             ; FUNCTION _CapSense_SetScanSlotSettings (END)

             ; FUNCTION _CapSense_ScanSensor (BEGIN)
                                           ; SOURCE LINE # 972
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 973
                                           ; SOURCE LINE # 975
0005 900000      R     MOV     DPTR,#CapSense_csv
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 976
000A 900000      R     MOV     DPTR,#sensor
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F 900000      R     MOV     DPTR,#CapSense_sensorIndex
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 980
0014 900000      R     MOV     DPTR,#CapSense_csv
0017 7481              MOV     A,#081H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 981
001A 900000      R     MOV     DPTR,#sensor
001D E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 48  

001E FF                MOV     R7,A
001F 120000      R     LCALL   _CapSense_PreScan
                                           ; SOURCE LINE # 1014
0022 22                RET     
             ; FUNCTION _CapSense_ScanSensor (END)

             ; FUNCTION CapSense_ScanEnabledWidgets (BEGIN)
                                           ; SOURCE LINE # 1049
                                           ; SOURCE LINE # 1050
                                           ; SOURCE LINE # 1052
0000 900000      R     MOV     DPTR,#CapSense_csv
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1053
0005 900000      R     MOV     DPTR,#CapSense_sensorIndex
0008 74FF              MOV     A,#0FFH
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1057
000B 900000      R     MOV     DPTR,#CapSense_sensorIndex
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 120000      R     LCALL   _CapSense_FindNextSensor
0013 900000      R     MOV     DPTR,#CapSense_sensorIndex
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1060
0018 900000      R     MOV     DPTR,#CapSense_sensorIndex
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E C3                CLR     C
001F 9402              SUBB    A,#02H
0021 5016              JNC     ?C0014
                                           ; SOURCE LINE # 1061
                                           ; SOURCE LINE # 1062
0023 900000      R     MOV     DPTR,#CapSense_csv
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 4401              ORL     A,#01H
002B FF                MOV     R7,A
002C 900000      R     MOV     DPTR,#CapSense_csv
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1063
0031 900000      R     MOV     DPTR,#CapSense_sensorIndex
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 120000      R     LCALL   _CapSense_PreScan
                                           ; SOURCE LINE # 1064
                                           ; SOURCE LINE # 1079
0039         ?C0014:
0039 22                RET     
             ; FUNCTION CapSense_ScanEnabledWidgets (END)

             ; FUNCTION CapSense_IsBusy (BEGIN)
                                           ; SOURCE LINE # 1102
                                           ; SOURCE LINE # 1103
                                           ; SOURCE LINE # 1104
0000 900000      R     MOV     DPTR,#CapSense_csv
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 49  

0005 EF                MOV     A,R7
0006 5401              ANL     A,#01H
0008 FF                MOV     R7,A
0009 7E00              MOV     R6,#00H
000B EF                MOV     A,R7
000C 6401              XRL     A,#01H
000E 4E                ORL     A,R6
000F 7004              JNZ     ?C0015
0011 7F01              MOV     R7,#01H
0013 8002              SJMP    ?C0016
0015         ?C0015:
0015 7F00              MOV     R7,#00H
0017         ?C0016:
                                           ; SOURCE LINE # 1106
0017         ?C0017:
0017 22                RET     
             ; FUNCTION CapSense_IsBusy (END)

             ; FUNCTION _CapSense_ReadSensorRaw (BEGIN)
                                           ; SOURCE LINE # 1128
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1129
                                           ; SOURCE LINE # 1130
0005 900000      R     MOV     DPTR,#sensor
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 25E0              ADD     A,ACC
000D 2400        R     ADD     A,#LOW CapSense_SensorRaw
000F F582              MOV     DPL,A
0011 E4                CLR     A
0012 3400        R     ADDC    A,#HIGH CapSense_SensorRaw
0014 F583              MOV     DPH,A
0016 E0                MOVX    A,@DPTR
0017 FE                MOV     R6,A
0018 A3                INC     DPTR
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
                                           ; SOURCE LINE # 1131
001B         ?C0018:
001B 22                RET     
             ; FUNCTION _CapSense_ReadSensorRaw (END)

             ; FUNCTION CapSense_ClearSensors (BEGIN)
                                           ; SOURCE LINE # 1149
                                           ; SOURCE LINE # 1150
                                           ; SOURCE LINE # 1153
0000 900000      R     MOV     DPTR,#i
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005         ?C0019:
0005 900000      R     MOV     DPTR,#i
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 9402              SUBB    A,#02H
000E 5010              JNC     ?C0022
                                           ; SOURCE LINE # 1154
                                           ; SOURCE LINE # 1155
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 50  

0010 900000      R     MOV     DPTR,#i
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 120000      R     LCALL   _CapSense_DisableSensor
                                           ; SOURCE LINE # 1156
0018 900000      R     MOV     DPTR,#i
001B E0                MOVX    A,@DPTR
001C 04                INC     A
001D F0                MOVX    @DPTR,A
001E 80E5              SJMP    ?C0019
                                           ; SOURCE LINE # 1157
0020         ?C0022:
0020 22                RET     
             ; FUNCTION CapSense_ClearSensors (END)

             ; FUNCTION _CapSense_EnableSensor (BEGIN)
                                           ; SOURCE LINE # 1299
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1300
                                           ; SOURCE LINE # 1301
0005 900000      R     MOV     DPTR,#sensor
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      R     MOV     DPTR,#CapSense_portTable
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#port
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1302
0015 900000      R     MOV     DPTR,#sensor
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 900000      R     MOV     DPTR,#CapSense_maskTable
001E 93                MOVC    A,@A+DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#mask
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1311
0025 900000      R     MOV     DPTR,#sensor
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A EF                MOV     A,R7
002B 25E0              ADD     A,ACC
002D 2400        R     ADD     A,#LOW CapSense_pcTable
002F F582              MOV     DPL,A
0031 E4                CLR     A
0032 3400        R     ADDC    A,#HIGH CapSense_pcTable
0034 F583              MOV     DPH,A
0036 E4                CLR     A
0037 93                MOVC    A,@A+DPTR
0038 FE                MOV     R6,A
0039 7401              MOV     A,#01H
003B 93                MOVC    A,@A+DPTR
003C FF                MOV     R7,A
003D 8F82              MOV     DPL,R7
003F 8E83              MOV     DPH,R6
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 51  

0041 7409              MOV     A,#09H
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1314
0044 900000      R     MOV     DPTR,#port
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 EF                MOV     A,R7
004A B40F06            CJNE    A,#0FH,?C0023
                                           ; SOURCE LINE # 1315
                                           ; SOURCE LINE # 1316
004D 900000      R     MOV     DPTR,#port
0050 7407              MOV     A,#07H
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1317
0053         ?C0023:
                                           ; SOURCE LINE # 1318
0053 900000      R     MOV     DPTR,#port
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
0058 EF                MOV     A,R7
0059 25E0              ADD     A,ACC
005B 2400        R     ADD     A,#LOW CapSense_csTable
005D F582              MOV     DPL,A
005F E4                CLR     A
0060 3400        R     ADDC    A,#HIGH CapSense_csTable
0062 F583              MOV     DPH,A
0064 E4                CLR     A
0065 93                MOVC    A,@A+DPTR
0066 FE                MOV     R6,A
0067 7401              MOV     A,#01H
0069 93                MOVC    A,@A+DPTR
006A FF                MOV     R7,A
006B 8F82              MOV     DPL,R7
006D 8E83              MOV     DPH,R6
006F C083              PUSH    DPH
0071 C082              PUSH    DPL
0073 E0                MOVX    A,@DPTR
0074 FF                MOV     R7,A
0075 900000      R     MOV     DPTR,#mask
0078 E0                MOVX    A,@DPTR
0079 FE                MOV     R6,A
007A EF                MOV     A,R7
007B 4E                ORL     A,R6
007C FF                MOV     R7,A
007D D082              POP     DPL
007F D083              POP     DPH
0081 EF                MOV     A,R7
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1325
0083 900000      R     MOV     DPTR,#sensor
0086 E0                MOVX    A,@DPTR
0087 FF                MOV     R7,A
0088 120000      E     LCALL   _CapSense_AMuxCH0_Set
                                           ; SOURCE LINE # 1353
008B 22                RET     
             ; FUNCTION _CapSense_EnableSensor (END)

             ; FUNCTION _CapSense_DisableSensor (BEGIN)
                                           ; SOURCE LINE # 1383
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 52  

                                           ; SOURCE LINE # 1384
                                           ; SOURCE LINE # 1385
0005 900000      R     MOV     DPTR,#sensor
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      R     MOV     DPTR,#CapSense_portTable
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#port
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1386
0015 900000      R     MOV     DPTR,#sensor
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 900000      R     MOV     DPTR,#CapSense_maskTable
001E 93                MOVC    A,@A+DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#mask
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1399
0025 900000      R     MOV     DPTR,#sensor
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A 120000      E     LCALL   _CapSense_AMuxCH0_Unset
                                           ; SOURCE LINE # 1429
002D 900000      R     MOV     DPTR,#port
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 B40F06            CJNE    A,#0FH,?C0025
                                           ; SOURCE LINE # 1430
                                           ; SOURCE LINE # 1431
0036 900000      R     MOV     DPTR,#port
0039 7407              MOV     A,#07H
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1432
003C         ?C0025:
                                           ; SOURCE LINE # 1433
003C 900000      R     MOV     DPTR,#port
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 EF                MOV     A,R7
0042 25E0              ADD     A,ACC
0044 2400        R     ADD     A,#LOW CapSense_csTable
0046 F582              MOV     DPL,A
0048 E4                CLR     A
0049 3400        R     ADDC    A,#HIGH CapSense_csTable
004B F583              MOV     DPH,A
004D E4                CLR     A
004E 93                MOVC    A,@A+DPTR
004F FE                MOV     R6,A
0050 7401              MOV     A,#01H
0052 93                MOVC    A,@A+DPTR
0053 FF                MOV     R7,A
0054 8F82              MOV     DPL,R7
0056 8E83              MOV     DPH,R6
0058 C083              PUSH    DPH
005A C082              PUSH    DPL
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 53  

005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
005E 900000      R     MOV     DPTR,#mask
0061 E0                MOVX    A,@DPTR
0062 FE                MOV     R6,A
0063 EE                MOV     A,R6
0064 F4                CPL     A
0065 FE                MOV     R6,A
0066 EF                MOV     A,R7
0067 5E                ANL     A,R6
0068 FF                MOV     R7,A
0069 D082              POP     DPL
006B D083              POP     DPH
006D EF                MOV     A,R7
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1437
006F 900000      R     MOV     DPTR,#sensor
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 EF                MOV     A,R7
0075 25E0              ADD     A,ACC
0077 2400        R     ADD     A,#LOW CapSense_pcTable
0079 F582              MOV     DPL,A
007B E4                CLR     A
007C 3400        R     ADDC    A,#HIGH CapSense_pcTable
007E F583              MOV     DPH,A
0080 E4                CLR     A
0081 93                MOVC    A,@A+DPTR
0082 FE                MOV     R6,A
0083 7401              MOV     A,#01H
0085 93                MOVC    A,@A+DPTR
0086 FF                MOV     R7,A
0087 8F82              MOV     DPL,R7
0089 8E83              MOV     DPH,R6
008B 7408              MOV     A,#08H
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1443
008E 22                RET     
             ; FUNCTION _CapSense_DisableSensor (END)

             ; FUNCTION _CapSense_PreScan (BEGIN)
                                           ; SOURCE LINE # 1466
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1467
                                           ; SOURCE LINE # 1469
0005 900000      R     MOV     DPTR,#sensor
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 120000      R     LCALL   _CapSense_SetScanSlotSettings
                                           ; SOURCE LINE # 1477
000D 906474            MOV     DPTR,#06474H
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 EF                MOV     A,R7
0013 4401              ORL     A,#01H
0015 FF                MOV     R7,A
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1485
0018 905870            MOV     DPTR,#05870H
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 54  

001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 54FE              ANL     A,#0FEH
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1489
0023 900000      R     MOV     DPTR,#sensor
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 120000      R     LCALL   _CapSense_EnableSensor
                                           ; SOURCE LINE # 1593
002B 906474            MOV     DPTR,#06474H
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 4402              ORL     A,#02H
0033 FF                MOV     R7,A
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1599
0036 22                RET     
             ; FUNCTION _CapSense_PreScan (END)

             ; FUNCTION _CapSense_PostScan (BEGIN)
                                           ; SOURCE LINE # 1626
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1627
                                           ; SOURCE LINE # 1629
0005 906474            MOV     DPTR,#06474H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 54FC              ANL     A,#0FCH
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1636
0010 906517            MOV     DPTR,#06517H
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 7E00              MOV     R6,#00H
0017 EF                MOV     A,R7
0018 7F00              MOV     R7,#00H
001A FE                MOV     R6,A
001B 900000      R     MOV     DPTR,#sensor
001E E0                MOVX    A,@DPTR
001F FD                MOV     R5,A
0020 ED                MOV     A,R5
0021 25E0              ADD     A,ACC
0023 2400        R     ADD     A,#LOW CapSense_SensorRaw
0025 F582              MOV     DPL,A
0027 E4                CLR     A
0028 3400        R     ADDC    A,#HIGH CapSense_SensorRaw
002A F583              MOV     DPH,A
002C EE                MOV     A,R6
002D F0                MOVX    @DPTR,A
002E A3                INC     DPTR
002F EF                MOV     A,R7
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 55  

0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1637
0031 900000      R     MOV     DPTR,#sensor
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 EF                MOV     A,R7
0037 25E0              ADD     A,ACC
0039 2400        R     ADD     A,#LOW CapSense_SensorRaw
003B F582              MOV     DPL,A
003D E4                CLR     A
003E 3400        R     ADDC    A,#HIGH CapSense_SensorRaw
0040 F583              MOV     DPH,A
0042 C083              PUSH    DPH
0044 C082              PUSH    DPL
0046 E0                MOVX    A,@DPTR
0047 FE                MOV     R6,A
0048 A3                INC     DPTR
0049 E0                MOVX    A,@DPTR
004A FF                MOV     R7,A
004B 906507            MOV     DPTR,#06507H
004E E0                MOVX    A,@DPTR
004F FD                MOV     R5,A
0050 7C00              MOV     R4,#00H
0052 EE                MOV     A,R6
0053 4C                ORL     A,R4
0054 FE                MOV     R6,A
0055 EF                MOV     A,R7
0056 4D                ORL     A,R5
0057 FF                MOV     R7,A
0058 D082              POP     DPL
005A D083              POP     DPH
005C EE                MOV     A,R6
005D F0                MOVX    @DPTR,A
005E A3                INC     DPTR
005F EF                MOV     A,R7
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1638
0061 900000      R     MOV     DPTR,#sensor
0064 E0                MOVX    A,@DPTR
0065 FF                MOV     R7,A
0066 EF                MOV     A,R7
0067 25E0              ADD     A,ACC
0069 2400        R     ADD     A,#LOW CapSense_SensorRaw
006B F582              MOV     DPL,A
006D E4                CLR     A
006E 3400        R     ADDC    A,#HIGH CapSense_SensorRaw
0070 F583              MOV     DPH,A
0072 E0                MOVX    A,@DPTR
0073 FE                MOV     R6,A
0074 A3                INC     DPTR
0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
0077 C3                CLR     C
0078 74FF              MOV     A,#0FFH
007A 9F                SUBB    A,R7
007B FF                MOV     R7,A
007C 74FF              MOV     A,#0FFH
007E 9E                SUBB    A,R6
007F FE                MOV     R6,A
0080 900000      R     MOV     DPTR,#sensor
0083 E0                MOVX    A,@DPTR
0084 FD                MOV     R5,A
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 56  

0085 ED                MOV     A,R5
0086 25E0              ADD     A,ACC
0088 2400        R     ADD     A,#LOW CapSense_SensorRaw
008A F582              MOV     DPL,A
008C E4                CLR     A
008D 3400        R     ADDC    A,#HIGH CapSense_SensorRaw
008F F583              MOV     DPH,A
0091 EE                MOV     A,R6
0092 F0                MOVX    @DPTR,A
0093 A3                INC     DPTR
0094 EF                MOV     A,R7
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1643
0096 900000      R     MOV     DPTR,#sensor
0099 E0                MOVX    A,@DPTR
009A FF                MOV     R7,A
009B 120000      R     LCALL   _CapSense_DisableSensor
                                           ; SOURCE LINE # 1647
009E 7F00              MOV     R7,#00H
00A0 120000      R     LCALL   _CapSense_IdacCH0_SetValue
                                           ; SOURCE LINE # 1661
00A3 905870            MOV     DPTR,#05870H
00A6 E0                MOVX    A,@DPTR
00A7 FF                MOV     R7,A
00A8 EF                MOV     A,R7
00A9 4401              ORL     A,#01H
00AB FF                MOV     R7,A
00AC EF                MOV     A,R7
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1663
00AE 22                RET     
             ; FUNCTION _CapSense_PostScan (END)

             ; FUNCTION CapSense_IdacCH0_Init (BEGIN)
                                           ; SOURCE LINE # 1899
                                           ; SOURCE LINE # 1900
                                           ; SOURCE LINE # 1902
0000 905820            MOV     DPTR,#05820H
0003 7410              MOV     A,#010H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1905
0006 905821            MOV     DPTR,#05821H
0009 7402              MOV     A,#02H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1908
000C 7F04              MOV     R7,#04H
000E 120000      R     LCALL   _CapSense_IdacCH0_SetRange
                                           ; SOURCE LINE # 1909
0011 7F00              MOV     R7,#00H
0013 120000      R     LCALL   _CapSense_IdacCH0_SetValue
                                           ; SOURCE LINE # 1910
0016 22                RET     
             ; FUNCTION CapSense_IdacCH0_Init (END)

             ; FUNCTION CapSense_IdacCH0_Enable (BEGIN)
                                           ; SOURCE LINE # 1928
                                           ; SOURCE LINE # 1929
                                           ; SOURCE LINE # 1932
0000 900000      R     MOV     DPTR,#CapSense_idac_cfg_restore
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 57  

0006 5401              ANL     A,#01H
0008 FF                MOV     R7,A
0009 7E00              MOV     R6,#00H
000B EF                MOV     A,R7
000C 4E                ORL     A,R6
000D 6018              JZ      ?C0030
                                           ; SOURCE LINE # 1933
                                           ; SOURCE LINE # 1934
000F 900000      R     MOV     DPTR,#CapSense_idac_cfg_restore
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 54FE              ANL     A,#0FEH
0017 FF                MOV     R7,A
0018 900000      R     MOV     DPTR,#CapSense_idac_cfg_restore
001B EF                MOV     A,R7
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1935
001D 900000      R     MOV     DPTR,#CapSense_idac_ch0_cr0reg
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 905820            MOV     DPTR,#05820H
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1936
0027         ?C0030:
                                           ; SOURCE LINE # 1940
0027 9043A8            MOV     DPTR,#043A8H
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 4401              ORL     A,#01H
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1941
0032 9043B8            MOV     DPTR,#043B8H
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 EF                MOV     A,R7
0038 4401              ORL     A,#01H
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1942
003D 22                RET     
             ; FUNCTION CapSense_IdacCH0_Enable (END)

             ; FUNCTION CapSense_IdacCH0_Stop (BEGIN)
                                           ; SOURCE LINE # 1960
                                           ; SOURCE LINE # 1961
                                           ; SOURCE LINE # 1963
0000 9043A8            MOV     DPTR,#043A8H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1964
000B 9043B8            MOV     DPTR,#043B8H
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 58  

000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54FE              ANL     A,#0FEH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1968
0016 900000      R     MOV     DPTR,#CapSense_idac_cfg_restore
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 4401              ORL     A,#01H
001E FF                MOV     R7,A
001F 900000      R     MOV     DPTR,#CapSense_idac_cfg_restore
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1969
0024 905820            MOV     DPTR,#05820H
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 900000      R     MOV     DPTR,#CapSense_idac_ch0_cr0reg
002C EF                MOV     A,R7
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1970
002E 905820            MOV     DPTR,#05820H
0031 741E              MOV     A,#01EH
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1972
0034 22                RET     
             ; FUNCTION CapSense_IdacCH0_Stop (END)

             ; FUNCTION _CapSense_IdacCH0_SetValue (BEGIN)
                                           ; SOURCE LINE # 1990
0000 900000      R     MOV     DPTR,#value
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1991
                                           ; SOURCE LINE # 1994
0005 120000      E     LCALL   CyEnterCriticalSection
0008 900000      R     MOV     DPTR,#cts
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1998
000D 900000      R     MOV     DPTR,#value
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 905B80            MOV     DPTR,#05B80H
0015 EF                MOV     A,R7
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2001
0017 900000      R     MOV     DPTR,#value
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C 905B80            MOV     DPTR,#05B80H
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2002
0021 900000      R     MOV     DPTR,#cts
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 120000      E     LCALL   _CyExitCriticalSection
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 59  

                                           ; SOURCE LINE # 2004
0029 22                RET     
             ; FUNCTION _CapSense_IdacCH0_SetValue (END)

             ; FUNCTION CapSense_IdacCH0_DacTrim (BEGIN)
                                           ; SOURCE LINE # 2022
                                           ; SOURCE LINE # 2023
                                           ; SOURCE LINE # 2026
0000 905820            MOV     DPTR,#05820H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 540C              ANL     A,#0CH
0008 FF                MOV     R7,A
0009 7E00              MOV     R6,#00H
000B EE                MOV     A,R6
000C C3                CLR     C
000D 13                RRC     A
000E FE                MOV     R6,A
000F EF                MOV     A,R7
0010 13                RRC     A
0011 FF                MOV     R7,A
0012 900000      R     MOV     DPTR,#mode
0015 EF                MOV     A,R7
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2028
0017 905821            MOV     DPTR,#05821H
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 5404              ANL     A,#04H
001F FF                MOV     R7,A
0020 7E00              MOV     R6,#00H
0022 EF                MOV     A,R7
0023 6404              XRL     A,#04H
0025 4E                ORL     A,R6
0026 7006              JNZ     ?C0034
                                           ; SOURCE LINE # 2029
                                           ; SOURCE LINE # 2030
0028 900000      R     MOV     DPTR,#mode
002B E0                MOVX    A,@DPTR
002C 04                INC     A
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2031
002E         ?C0034:
                                           ; SOURCE LINE # 2033
002E 900000      R     MOV     DPTR,#mode
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 E4                CLR     A
0034 FC                MOV     R4,A
0035 FD                MOV     R5,A
0036 FE                MOV     R6,A
0037 EF                MOV     A,R7
0038 241C              ADD     A,#01CH
003A FF                MOV     R7,A
003B EE                MOV     A,R6
003C 3401              ADDC    A,#01H
003E FE                MOV     R6,A
003F ED                MOV     A,R5
0040 340C              ADDC    A,#0CH
0042 FD                MOV     R5,A
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 60  

0043 EC                MOV     A,R4
0044 3400              ADDC    A,#00H
0046 FC                MOV     R4,A
0047 A907              MOV     R1,AR7
0049 AA06              MOV     R2,AR6
004B AB05              MOV     R3,AR5
004D 120000      E     LCALL   _cyread8
0050 904608            MOV     DPTR,#04608H
0053 EF                MOV     A,R7
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2034
0055 22                RET     
             ; FUNCTION CapSense_IdacCH0_DacTrim (END)

             ; FUNCTION _CapSense_IdacCH0_SetRange (BEGIN)
                                           ; SOURCE LINE # 2052
0000 900000      R     MOV     DPTR,#range
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2053
                                           ; SOURCE LINE # 2055
0005 905820            MOV     DPTR,#05820H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 54F3              ANL     A,#0F3H
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2058
0010 905820            MOV     DPTR,#05820H
0013 C083              PUSH    DPH
0015 C082              PUSH    DPL
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 900000      R     MOV     DPTR,#range
001C E0                MOVX    A,@DPTR
001D FE                MOV     R6,A
001E EE                MOV     A,R6
001F 540C              ANL     A,#0CH
0021 FE                MOV     R6,A
0022 EF                MOV     A,R7
0023 4E                ORL     A,R6
0024 FF                MOV     R7,A
0025 D082              POP     DPL
0027 D083              POP     DPH
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2059
002B 120000      R     LCALL   CapSense_IdacCH0_DacTrim
                                           ; SOURCE LINE # 2060
002E 22                RET     
             ; FUNCTION _CapSense_IdacCH0_SetRange (END)

             ; FUNCTION _CapSense_SetIdacRange (BEGIN)
                                           ; SOURCE LINE # 2268
0000 900000      R     MOV     DPTR,#range
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2269
                                           ; SOURCE LINE # 2270
0005 900000      R     MOV     DPTR,#range
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 61  

0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 120000      R     LCALL   _CapSense_IdacCH0_SetRange
                                           ; SOURCE LINE # 2274
000D 22                RET     
             ; FUNCTION _CapSense_SetIdacRange (END)

             ; FUNCTION _CapSense_SetPrescaler (BEGIN)
                                           ; SOURCE LINE # 2293
0000 900000      R     MOV     DPTR,#prescaler
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2294
                                           ; SOURCE LINE # 2297
0005 900000      R     MOV     DPTR,#prescaler
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906425            MOV     DPTR,#06425H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2298
000F 900000      R     MOV     DPTR,#prescaler
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 C3                CLR     C
0016 13                RRC     A
0017 FF                MOV     R7,A
0018 906435            MOV     DPTR,#06435H
001B EF                MOV     A,R7
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2305
001D 22                RET     
             ; FUNCTION _CapSense_SetPrescaler (END)

             ; FUNCTION CapSense_GetPrescaler (BEGIN)
                                           ; SOURCE LINE # 2322
                                           ; SOURCE LINE # 2323
                                           ; SOURCE LINE # 2324
0000 900000      R     MOV     DPTR,#prescaler
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2328
0005 906425            MOV     DPTR,#06425H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#prescaler
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2337
000F 900000      R     MOV     DPTR,#prescaler
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
                                           ; SOURCE LINE # 2338
0014         ?C0039:
0014 22                RET     
             ; FUNCTION CapSense_GetPrescaler (END)

             ; FUNCTION _CapSense_SetScanSpeed (BEGIN)
                                           ; SOURCE LINE # 2356
0000 900000      R     MOV     DPTR,#scanspeed
0003 EF                MOV     A,R7
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 62  

0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2357
                                           ; SOURCE LINE # 2358
0005 900000      R     MOV     DPTR,#scanspeed
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906485            MOV     DPTR,#06485H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2359
000F 22                RET     
             ; FUNCTION _CapSense_SetScanSpeed (END)

             ; FUNCTION _CapSense_SetAnalogSwitchesSource (BEGIN)
                                           ; SOURCE LINE # 2381
0000 900000      R     MOV     DPTR,#src
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2382
                                           ; SOURCE LINE # 2383
0005 900000      R     MOV     DPTR,#src
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B B4010C            CJNE    A,#01H,?C0041
                                           ; SOURCE LINE # 2384
                                           ; SOURCE LINE # 2385
000E 906474            MOV     DPTR,#06474H
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 54EF              ANL     A,#0EFH
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2386
0019 22                RET     
001A         ?C0041:
                                           ; SOURCE LINE # 2388
                                           ; SOURCE LINE # 2389
001A 906474            MOV     DPTR,#06474H
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 4410              ORL     A,#010H
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2390
                                           ; SOURCE LINE # 2391
0025         ?C0043:
0025 22                RET     
             ; FUNCTION _CapSense_SetAnalogSwitchesSource (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1714    ----
   CONSTANT SIZE    =     26    ----
   XDATA SIZE       =     17      27
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.03   CAPSENSE                                                              08/28/2015 10:18:32 PAGE 63  

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
